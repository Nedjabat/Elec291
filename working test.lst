                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P4.5
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   UPDOWN           equ P0.1
0000             10   
0000             11   CLK           EQU 22118400
0000             12   TIMER1_RATE   EQU 100     ; 1000Hz, for a timer tick of 1ms
0000             13   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))     ; 2100Hz Win Tone
0000             14   TIMER00_RATE   EQU 6000     ; 2100Hz Win Tone, made very high freq to check
0000             15   TIMER00_RELOAD EQU ((65536-(CLK/TIMER00_RATE))) 
0000             16   TIMER01_RATE   EQU 2000  ;2000Hz Lose Tone, made very low freq to check
0000             17   TIMER01_RELOAD EQU ((65536-(CLK/TIMER01_RATE))) ;2000Hz frequency lose frequency
0000             18   TIMER2_RATE   EQU 4200                 ;2100Hz frequency win frequency
0000             19   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             20   
0000             21   ;Music player
0000             22   ;Normal notes Octave6
0000             23   TIMER0C_RATE EQU 2093
0000             24   TIMER0C_RELOAD EQU ((65536-(CLK/TIMER0C_RATE)))
0000             25   TIMER0D_RATE EQU 2349
0000             26   TIMER0D_RELOAD EQU ((65536-(CLK/TIMER0D_RATE)))
0000             27   TIMER0E_RATE EQU 2637
0000             28   TIMER0E_RELOAD EQU ((65536-(CLK/TIMER0E_RATE)))
0000             29   TIMER0F_RATE EQU 2794
0000             30   TIMER0F_RELOAD EQU ((65536-(CLK/TIMER0F_RATE)))
0000             31   TIMER0G_RATE EQU 3136
0000             32   TIMER0G_RELOAD EQU ((65536-(CLK/TIMER0G_RATE)))
0000             33   TIMER0A_RATE EQU 3520
0000             34   TIMER0A_RELOAD EQU ((65536-(CLK/TIMER0A_RATE)))
0000             35   TIMER0B_RATE EQU 3951
0000             36   TIMER0B_RELOAD EQU ((65536-(CLK/TIMER0B_RATE)))
0000             37   ;Sharps Octave 6
0000             38   TIMER0C1_RATE EQU 2217
0000             39   TIMER0C1_RELOAD EQU ((65536-(CLK/TIMER0C1_RATE)))
0000             40   TIMER0D1_RATE EQU 2489
0000             41   TIMER0D1_RELOAD EQU ((65536-(CLK/TIMER0D1_RATE)))
0000             42   TIMER0F1_RATE EQU 2960
0000             43   TIMER0F1_RELOAD EQU ((65536-(CLK/TIMER0F1_RATE)))
0000             44   TIMER0G1_RATE EQU 3322
0000             45   TIMER0G1_RELOAD EQU ((65536-(CLK/TIMER0G1_RATE)))
0000             46   TIMER0A1_RATE EQU 3729
0000             47   TIMER0A1_RELOAD EQU ((65536-(CLK/TIMER0A1_RATE)))
0000             48   ;other Octaves
0000             49   TIMER0A2_RATE EQU 1865 ;Octave 5 A#
0000             50   TIMER0A2_RELOAD EQU ((65536-(CLK/TIMER0A2_RATE)))
0000             51   TIMER0C2_RATE EQU 262 ;Octave 3 C
0000             52   TIMER0C2_RELOAD EQU ((65536-(CLK/TIMER0C2_RATE)))
0000             53   
0000             54   
0000             55   org 0000H
0000 020696      56      ljmp MyProgram
0003             57   
000B             58   org 0x000B
000B 020540      59            ljmp Timer0_ISR
000E             60   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             61   org 0x001B
001B 02056E      62            ljmp Timer1_ISR
001E             63   
001E             64   
0030             65   DSEG at 0x30
0030             66   x:   ds 4
0034             67   y:   ds 4
0038             68   seed: ds 4  
003C             69   bcd: ds 5
0041             70   Count1ms:     ds 2 
0043             71   seconds:  ds 1 ;
0044             72   p1points: ds 1
0045             73   p2points: ds 1
0046             74   freq1: ds 4
004A             75   freq2: ds 4
004E             76   counter: ds 4
0052             77   Period_A: ds 2
0054             78   Period_B: ds 2
0056             79   bcd1: ds 5
005B             80   bcd2: ds 5
0060             81   
0000             82   BSEG
0000             83   mf: dbit 1
0001             84   p1_press: dbit 1
0002             85   p2_press: dbit 1
0003             86   second_high: dbit 1
0004             87   half_seconds_flag: dbit 1
0005             88   
001E             89   cseg
001E             90   ; These 'equ' must match the hardware wiring
001E             91   LCD_RS equ P3.2
001E             92   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             93   LCD_E  equ P3.3
001E             94   LCD_D4 equ P3.4
001E             95   LCD_D5 equ P3.5
001E             96   LCD_D6 equ P3.6
001E             97   LCD_D7 equ P3.7
001E             98   SOUND_OUT equ P1.1
001E             99   
001E            100   
001E 506C6179   101   Initial_Message:  db 'Player1:    ', 0
     6572313A
     20202020
     00
002B 506C6179   102   Initial_Message2: db 'Player2:    ', 0
     6572323A
     20202020
     00
0038            103   
0038 50313A57   104   Winner1_message1: db 'P1:Win!:D', 0
     696E213A
     4400
0042 50323A4C   105   Winner1_message2: db 'P2:Lose:P', 0
     6F73653A
     5000
004C            106   
004C 4C6F7365   107   Winner2_message1: db 'Loser:P', 0
     723A5000
0054 57696E6E   108   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
005E            109   
005E 506C6179   110   Playagain       : db 'Play   ', 0;changed for aesthetic
     20202000
0066 41676169   111   Clear_screen    : db 'Again ?', 0
     6E203F00
006E            112   
                570   $LIST
                115   $LIST
03B0            117   
03B0            118   
03B0            119   Timer00_Init:
03B0 E589       120            mov a, TMOD
03B2 54F0       121            anl a, #0xf0 ; Clear the bits for timer 0
03B4 4401       122            orl a, #0x01 ; Configure timer 0 as 16-timer
03B6 F589       123            mov TMOD, a
03B8 758CF1     124            mov TH0, #high(TIMER00_RELOAD)
03BB 758A9A     125            mov TL0, #low(TIMER00_RELOAD)
03BE            126            ; Set autoreload value
03BE 75F4F1     127            mov RH0, #high(TIMER00_RELOAD)
03C1 75F29A     128            mov RL0, #low(TIMER00_RELOAD)
03C4            129            ; Enable the timer and interrupts
03C4 D2A9       130       setb ET0  ; Enable timer 0 interrupt
03C6 D28C       131       setb TR0  ; Start timer 0
03C8 22         132            ret
03C9            133   
03C9            134   ;---------------------------------;
03C9            135   ; ISR for timer 0.  Set to execute;
03C9            136   ; every 1/4096Hz to generate a    ;
03C9            137   ; 2048 Hz square wave at pin P1.1 ;
03C9            138   ;---------------------------------;
03C9            139   
03C9            140   
03C9            141   Timer01_Init:
03C9 E589       142            mov a, TMOD
03CB 54F0       143            anl a, #0xf0 ; Clear the bits for timer 0
03CD 4401       144            orl a, #0x01 ; Configure timer 0 as 16-timer
03CF F589       145            mov TMOD, a
03D1 758CD4     146            mov TH0, #high(TIMER01_RELOAD)
03D4 758ACD     147            mov TL0, #low(TIMER01_RELOAD)
03D7            148            ; Set autoreload value
03D7 75F4D4     149            mov RH0, #high(TIMER01_RELOAD)
03DA 75F2CD     150            mov RL0, #low(TIMER01_RELOAD)
03DD            151            ; Enable the timer and interrupts
03DD D2A9       152       setb ET0  ; Enable timer 0 interrupt
03DF D28C       153       setb TR0  ; Start timer 0
03E1 22         154            ret
03E2            155            
03E2            156   
03E2            157   Timer0C_Init:
03E2 E589       158   mov a, TMOD
03E4 54F0       159   anl a, #0xf0 ; Clear the bits for timer 0
03E6 4401       160   orl a, #0x01 ; Configure timer 0 as 16-timer
03E8 F589       161   mov TMOD, a
03EA 758CD6     162   mov TH0, #high(TIMER0C_RELOAD)
03ED 758AB9     163   mov TL0, #low(TIMER0C_RELOAD)
03F0            164   ; Set autoreload value
03F0 75F4D6     165   mov RH0, #high(TIMER0C_RELOAD)
03F3 75F2B9     166   mov RL0, #low(TIMER0C_RELOAD)
03F6            167   ; Enable the timer and interrupts
03F6 D2A9       168       setb ET0  ; Enable timer 0 interrupt
03F8 D28C       169       setb TR0  ; Start timer 0
03FA 22         170   ret
03FB            171   
03FB            172   Timer0C1_Init:
03FB E589       173   mov a, TMOD
03FD 54F0       174   anl a, #0xf0 ; Clear the bits for timer 0
03FF 4401       175   orl a, #0x01 ; Configure timer 0 as 16-timer
0401 F589       176   mov TMOD, a
0403 758CD9     177   mov TH0, #high(TIMER0C1_RELOAD)
0406 758A08     178   mov TL0, #low(TIMER0C1_RELOAD)
0409            179   ; Set autoreload value
0409 75F4D9     180   mov RH0, #high(TIMER0C1_RELOAD)
040C 75F208     181   mov RL0, #low(TIMER0C1_RELOAD)
040F            182   ; Enable the timer and interrupts
040F D2A9       183       setb ET0  ; Enable timer 0 interrupt
0411 D28C       184       setb TR0  ; Start timer 0
0413 22         185   ret
0414            186   
0414            187   Timer0D_Init:
0414 E589       188   mov a, TMOD
0416 54F0       189   anl a, #0xf0 ; Clear the bits for timer 0
0418 4401       190   orl a, #0x01 ; Configure timer 0 as 16-timer
041A F589       191   mov TMOD, a
041C 758CDB     192   mov TH0, #high(TIMER0D_RELOAD)
041F 758A38     193   mov TL0, #low(TIMER0D_RELOAD)
0422            194   ; Set autoreload value
0422 75F4DB     195   mov RH0, #high(TIMER0D_RELOAD)
0425 75F238     196   mov RL0, #low(TIMER0D_RELOAD)
0428            197   ; Enable the timer and interrupts
0428 D2A9       198       setb ET0  ; Enable timer 0 interrupt
042A D28C       199       setb TR0  ; Start timer 0
042C 22         200   ret
042D            201   
042D            202   
042D            203   Timer0D1_Init:
042D E589       204   mov a, TMOD
042F 54F0       205   anl a, #0xf0 ; Clear the bits for timer 0
0431 4401       206   orl a, #0x01 ; Configure timer 0 as 16-timer
0433 F589       207   mov TMOD, a
0435 758CDD     208   mov TH0, #high(TIMER0D1_RELOAD)
0438 758A4A     209   mov TL0, #low(TIMER0D1_RELOAD)
043B            210   ; Set autoreload value
043B 75F4DD     211   mov RH0, #high(TIMER0D1_RELOAD)
043E 75F24A     212   mov RL0, #low(TIMER0D1_RELOAD)
0441            213   ; Enable the timer and interrupts
0441 D2A9       214       setb ET0  ; Enable timer 0 interrupt
0443 D28C       215       setb TR0  ; Start timer 0
0445 22         216   ret
0446            217   Timer0E_Init:
0446 E589       218   mov a, TMOD
0448 54F0       219   anl a, #0xf0 ; Clear the bits for timer 0
044A 4401       220   orl a, #0x01 ; Configure timer 0 as 16-timer
044C F589       221   mov TMOD, a
044E 758CDF     222   mov TH0, #high(TIMER0E_RELOAD)
0451 758A3D     223   mov TL0, #low(TIMER0E_RELOAD)
0454            224   ; Set autoreload value
0454 75F4DF     225   mov RH0, #high(TIMER0E_RELOAD)
0457 75F23D     226   mov RL0, #low(TIMER0E_RELOAD)
045A            227   ; Enable the timer and interrupts
045A D2A9       228       setb ET0  ; Enable timer 0 interrupt
045C D28C       229       setb TR0  ; Start timer 0
045E 22         230   ret
045F            231   
045F            232   Timer0F_Init:
045F E589       233   mov a, TMOD
0461 54F0       234   anl a, #0xf0 ; Clear the bits for timer 0
0463 4401       235   orl a, #0x01 ; Configure timer 0 as 16-timer
0465 F589       236   mov TMOD, a
0467 758CE1     237   mov TH0, #high(TIMER0F_RELOAD)
046A 758A14     238   mov TL0, #low(TIMER0F_RELOAD)
046D            239   ; Set autoreload value
046D 75F4E1     240   mov RH0, #high(TIMER0F_RELOAD)
0470 75F214     241   mov RL0, #low(TIMER0F_RELOAD)
0473            242   ; Enable the timer and interrupts
0473 D2A9       243       setb ET0  ; Enable timer 0 interrupt
0475 D28C       244       setb TR0  ; Start timer 0
0477 22         245   ret
0478            246   
0478            247   Timer0F1_Init:
0478 E589       248   mov a, TMOD
047A 54F0       249   anl a, #0xf0 ; Clear the bits for timer 0
047C 4401       250   orl a, #0x01 ; Configure timer 0 as 16-timer
047E F589       251   mov TMOD, a
0480 758CE2     252   mov TH0, #high(TIMER0F1_RELOAD)
0483 758AD0     253   mov TL0, #low(TIMER0F1_RELOAD)
0486            254   ; Set autoreload value
0486 75F4E2     255   mov RH0, #high(TIMER0F1_RELOAD)
0489 75F2D0     256   mov RL0, #low(TIMER0F1_RELOAD)
048C            257   ; Enable the timer and interrupts
048C D2A9       258       setb ET0  ; Enable timer 0 interrupt
048E D28C       259       setb TR0  ; Start timer 0
0490 22         260   ret
0491            261   
0491            262   Timer0G_Init:
0491 E589       263   mov a, TMOD
0493 54F0       264   anl a, #0xf0 ; Clear the bits for timer 0
0495 4401       265   orl a, #0x01 ; Configure timer 0 as 16-timer
0497 F589       266   mov TMOD, a
0499 758CE4     267   mov TH0, #high(TIMER0G_RELOAD)
049C 758A73     268   mov TL0, #low(TIMER0G_RELOAD)
049F            269   ; Set autoreload value
049F 75F4E4     270   mov RH0, #high(TIMER0G_RELOAD)
04A2 75F273     271   mov RL0, #low(TIMER0G_RELOAD)
04A5            272   ; Enable the timer and interrupts
04A5 D2A9       273       setb ET0  ; Enable timer 0 interrupt
04A7 D28C       274       setb TR0  ; Start timer 0
04A9 22         275   ret
04AA            276   
04AA            277   Timer0G1_Init:
04AA E589       278   mov a, TMOD
04AC 54F0       279   anl a, #0xf0 ; Clear the bits for timer 0
04AE 4401       280   orl a, #0x01 ; Configure timer 0 as 16-timer
04B0 F589       281   mov TMOD, a
04B2 758CE5     282   mov TH0, #high(TIMER0G1_RELOAD)
04B5 758AFE     283   mov TL0, #low(TIMER0G1_RELOAD)
04B8            284   ; Set autoreload value
04B8 75F4E5     285   mov RH0, #high(TIMER0G1_RELOAD)
04BB 75F2FE     286   mov RL0, #low(TIMER0G1_RELOAD)
04BE            287   ; Enable the timer and interrupts
04BE D2A9       288       setb ET0  ; Enable timer 0 interrupt
04C0 D28C       289       setb TR0  ; Start timer 0
04C2 22         290   ret
04C3            291   
04C3            292   Timer0A_Init:
04C3 E589       293   mov a, TMOD
04C5 54F0       294   anl a, #0xf0 ; Clear the bits for timer 0
04C7 4401       295   orl a, #0x01 ; Configure timer 0 as 16-timer
04C9 F589       296   mov TMOD, a
04CB 758CE7     297   mov TH0, #high(TIMER0A_RELOAD)
04CE 758A75     298   mov TL0, #low(TIMER0A_RELOAD)
04D1            299   ; Set autoreload value
04D1 75F4E7     300   mov RH0, #high(TIMER0A_RELOAD)
04D4 75F275     301   mov RL0, #low(TIMER0A_RELOAD)
04D7            302   ; Enable the timer and interrupts
04D7 D2A9       303       setb ET0  ; Enable timer 0 interrupt
04D9 D28C       304       setb TR0  ; Start timer 0
04DB 22         305   ret
04DC            306   
04DC            307   Timer0A1_Init:
04DC E589       308   mov a, TMOD
04DE 54F0       309   anl a, #0xf0 ; Clear the bits for timer 0
04E0 4401       310   orl a, #0x01 ; Configure timer 0 as 16-timer
04E2 F589       311   mov TMOD, a
04E4 758CE8     312   mov TH0, #high(TIMER0A1_RELOAD)
04E7 758AD5     313   mov TL0, #low(TIMER0A1_RELOAD)
04EA            314   ; Set autoreload value
04EA 75F4E8     315   mov RH0, #high(TIMER0A1_RELOAD)
04ED 75F2D5     316   mov RL0, #low(TIMER0A1_RELOAD)
04F0            317   ; Enable the timer and interrupts
04F0 D2A9       318       setb ET0  ; Enable timer 0 interrupt
04F2 D28C       319       setb TR0  ; Start timer 0
04F4 22         320   ret
04F5            321   
04F5            322   Timer0B_Init:
04F5 E589       323   mov a, TMOD
04F7 54F0       324   anl a, #0xf0 ; Clear the bits for timer 0
04F9 4401       325   orl a, #0x01 ; Configure timer 0 as 16-timer
04FB F589       326   mov TMOD, a
04FD 758CEA     327   mov TH0, #high(TIMER0B_RELOAD)
0500 758A22     328   mov TL0, #low(TIMER0B_RELOAD)
0503            329   ; Set autoreload value
0503 75F4EA     330   mov RH0, #high(TIMER0B_RELOAD)
0506 75F222     331   mov RL0, #low(TIMER0B_RELOAD)
0509            332   ; Enable the timer and interrupts
0509 D2A9       333       setb ET0  ; Enable timer 0 interrupt
050B D28C       334       setb TR0  ; Start timer 0
050D 22         335   ret
050E            336   
050E            337   Timer0A2_Init:
050E E589       338   mov a, TMOD
0510 54F0       339   anl a, #0xf0 ; Clear the bits for timer 0
0512 4401       340   orl a, #0x01 ; Configure timer 0 as 16-timer
0514 F589       341   mov TMOD, a
0516 758CD1     342   mov TH0, #high(TIMER0A2_RELOAD)
0519 758AAD     343   mov TL0, #low(TIMER0A2_RELOAD)
051C            344   ; Set autoreload value
051C 75F4D1     345   mov RH0, #high(TIMER0A2_RELOAD)
051F 75F2AD     346   mov RL0, #low(TIMER0A2_RELOAD)
0522            347   ; Enable the timer and interrupts
0522 D2A9       348       setb ET0  ; Enable timer 0 interrupt
0524 D28C       349       setb TR0  ; Start timer 0
0526 22         350   ret
0527            351   
0527            352   Timer0C2_Init:
0527 E589       353   mov a, TMOD
0529 54F0       354   anl a, #0xf0 ; Clear the bits for timer 0
052B 4401       355   orl a, #0x01 ; Configure timer 0 as 16-timer
052D F589       356   mov TMOD, a
052F 758CB7     357   mov TH0, #high(TIMER0C2_RELOAD)
0532 758A3B     358   mov TL0, #low(TIMER0C2_RELOAD)
0535            359   ; Set autoreload value
0535 75F4B7     360   mov RH0, #high(TIMER0C2_RELOAD)
0538 75F23B     361   mov RL0, #low(TIMER0C2_RELOAD)
053B            362   ; Enable the timer and interrupts
053B D2A9       363       setb ET0  ; Enable timer 0 interrupt
053D D28C       364       setb TR0  ; Start timer 0
053F 22         365   ret
0540            366   
0540            367   
0540            368   
0540            369   Timer0_ISR:
0540 C28D       370            clr TF0  ; According to the data sheet this is done for us already.
0542 B291       371            cpl SOUND_OUT ; Connect speaker to P1.1!
0544 32         372            reti
0545            373            
0545            374   Timer2_Init:
0545            375   
0545 75C800     376            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0548 75CDEB     377            mov TH2, #high(TIMER2_RELOAD)
054B 75CC6E     378            mov TL2, #low(TIMER2_RELOAD)
054E            379            ; Set the reload value
054E 75CBEB     380            mov RCAP2H, #high(TIMER2_RELOAD)
0551 75CA6E     381            mov RCAP2L, #low(TIMER2_RELOAD)
0554            382            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0554 E4         383            clr a
0555 F541       384            mov Count1ms+0, a
0557 F542       385            mov Count1ms+1, a
0559            386            ; Enable the timer and interrupts
0559 D2AD       387       setb ET2  ; Enable timer 2 interrupt
055B D2CA       388       setb TR2  ; Enable timer 2
055D 22         389            ret
055E            390   
055E            391   
055E            392   ;---------------------------------;
055E            393   ; ISR for timer 2                 ;
055E            394   ;---------------------------------;
055E            395   Timer1_Init:
055E            396   
055E 758DA0     397            mov TH1, #high(TIMER1_RELOAD)
0561 758B00     398            mov TL1, #low(TIMER1_RELOAD)
0564            399            ; Set the reload value
0564            400            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0564 E4         401            clr a
0565 F541       402            mov Count1ms+0, a
0567 F542       403            mov Count1ms+1, a
0569            404            ; Enable the timer and interrupts
0569 D2AB       405       setb ET1  ; Enable timer 2 interrupt
056B D28E       406       setb TR1  ; Enable timer 2
056D 22         407            ret
056E            408   
056E            409   ;---------------------------------;
056E            410   ; ISR for timer 2                 ;
056E            411   ;---------------------------------;
056E            412   Timer1_ISR:
056E C28F       413            clr TF1  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0570            414            
0570            415            ; The two registers used in the ISR must be saved in the stack
0570 C0E0       416            push acc
0572 C0D0       417            push psw
0574            418            
0574            419            ; Increment the 16-bit one mili second counter
0574 0541       420            inc Count1ms+0    ; Increment the low 8-bits first
0576 E541       421            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0578 7002       422            jnz Inc_Done
057A 0542       423            inc Count1ms+1
057C            424   Inc_Done:
057C            425            ; Check if half second has passed
057C E541       426            mov a, Count1ms+0
057E B4E824     427            cjne a, #low(1000), Timer1_ISR_done ; Warning: this instruction changes the carry flag!
0581 E542       428            mov a, Count1ms+1
0583 B4031F     429            cjne a, #high(1000), Timer1_ISR_done
0586            430            
0586            431            ; 500 milliseconds have passed.  Set a flag so the main program knows
0586 D204       432            setb half_seconds_flag ; Let the main program know half second had passed
0588 B28C       433            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
058A            434            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
058A E4         435            clr a
058B F541       436            mov Count1ms+0, a
058D F542       437            mov Count1ms+1, a
058F            438            ; Increment the BCD counter
058F E543       439            mov a, seconds
0591 308104     440            jnb UPDOWN, Timer1_ISR_decrement
0594 2401       441            add a, #0x01
0596 8002       442            sjmp Timer1_ISR_da
0598            443   Timer1_ISR_decrement:
0598 2499       444            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
059A            445   Timer1_ISR_da:
059A D4         446            da a ; Decimal adjust instruction.  Check datasheet for more details!
059B F543       447            mov seconds, a
059D B46005     448       cjne a, #0x60, Timer1_ISR_done
05A0 D203       449       setb second_high
05A2 E4         450       clr a
05A3 F543       451       mov seconds, a
05A5            452   Timer1_ISR_done:
05A5 D0D0       453            pop psw
05A7 D0E0       454            pop acc
05A9 32         455            reti
05AA            456   ;---------------------------------;
05AA            457   ; ISR for timer 0.  Set to execute;
05AA            458   ; every 1/4096Hz to generate a    ;
05AA            459   ; 2048 Hz square wave at pin P1.1 ;
05AA            460   ;---------------------------------;
05AA            461   ; When using a 22.1184MHz crystal in fast mode
05AA            462   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
05AA            463   ; (tuned manually to get as close to 1s as possible)
05AA            464   Wait1s:
05AA 7AB0       465       mov R2, #176
05AC 79FA       466   X3: mov R1, #250
05AE 78A6       467   X2: mov R0, #166
05B0 D8FE       468   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
05B2 D9FA       469       djnz R1, X2 ; 22.51519us*250=5.629ms
05B4 DAF6       470       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
05B6 22         471       ret
05B7            472   
05B7            473   ;Initializes timer/counter 2 as a 16-bit counter
05B7            474   InitTimer2:
05B7 75C800     475            mov T2CON, #0b_0000_0000 ; Stop timer/counter.  Set as counter (clock input is pin T2).
05BA            476            ; Set the reload value on overflow to zero (just in case is not zero)
05BA 75CB00     477            mov RCAP2H, #0
05BD 75CA00     478            mov RCAP2L, #0
05C0 D2A0       479       setb P2.0 ; Pin is used as input
05C2 D2A1       480       setb P2.1  ; P1.0 is connected to T2.  Make sure it can be used as input.
05C4 22         481       ret
05C5            482   
05C5            483   
05C5            484   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
05C5            485   
05C5            486   hex2bcd1:
05C5 E4         487            clr a
05C6 7800       488       mov R0, #0  ;Set BCD result to 00000000 
05C8 7900       489       mov R1, #0
05CA 7A00       490       mov R2, #0
05CC 7B10       491       mov R3, #16 ;Loop counter.
05CE            492   
05CE            493   hex2bcd_loop1:
05CE E5CC       494       mov a, TL2 ;Shift TH0-TL0 left through carry
05D0 33         495       rlc a
05D1 F5CC       496       mov TL2, a
05D3            497       
05D3 E5CD       498       mov a, TH2
05D5 33         499       rlc a
05D6 F5CD       500       mov TH2, a
05D8            501         
05D8            502            ; Perform bcd + bcd + carry
05D8            503            ; using BCD numbers
05D8 E8         504            mov a, R0
05D9 38         505            addc a, R0
05DA D4         506            da a
05DB F8         507            mov R0, a
05DC            508            
05DC E9         509            mov a, R1
05DD 39         510            addc a, R1
05DE D4         511            da a
05DF F9         512            mov R1, a
05E0            513            
05E0 EA         514            mov a, R2
05E1 3A         515            addc a, R2
05E2 D4         516            da a
05E3 FA         517            mov R2, a
05E4            518            
05E4 DBE8       519            djnz R3, hex2bcd_loop1
05E6 22         520            ret
05E7            521   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
05E7            522   DisplayBCD_LCD:
05E7            523            ; 5th digit:
05E7 EA         524       mov a, R2
05E8 540F       525       anl a, #0FH
05EA 4430       526       orl a, #'0' ; convert to ASCII
05EC 1200BE     527            lcall ?WriteData
05EF            528            ; 4th digit:
05EF E9         529       mov a, R1
05F0 C4         530       swap a
05F1 540F       531       anl a, #0FH
05F3 4430       532       orl a, #'0' ; convert to ASCII
05F5 1200BE     533            lcall ?WriteData
05F8            534            ; 3rd digit:
05F8 E9         535       mov a, R1
05F9 540F       536       anl a, #0FH
05FB 4430       537       orl a, #'0' ; convert to ASCII
05FD 1200BE     538            lcall ?WriteData
0600            539            ; 2nd digit:
0600 E8         540       mov a, R0
0601 C4         541       swap a
0602 540F       542       anl a, #0FH
0604 4430       543       orl a, #'0' ; convert to ASCII
0606 1200BE     544            lcall ?WriteData
0609            545            ; 1st digit:
0609 E8         546       mov a, R0
060A 540F       547       anl a, #0FH
060C 4430       548       orl a, #'0' ; convert to ASCII
060E 1200BE     549            lcall ?WriteData
0611            550       
0611 22         551       ret
0612            552   
0612            553   random:
0612 853830     554       mov x+0, seed+0
0615 853931     555       mov x+1, seed+1
0618 853A32     556       mov x+2, seed+2
061B 853B33     557       mov x+3, seed+3
061E 7534FD     558            mov y+0, #low (214013 % 0x10000) 
0621 753543     558            mov y+1, #high(214013 % 0x10000) 
0624 753603     558            mov y+2, #low (214013 / 0x10000) 
0627 753700     558            mov y+3, #high(214013 / 0x10000) 
062A 120294     559       lcall mul32
062D 753443     560            mov y+0, #low (2451011 % 0x10000) 
0630 753566     560            mov y+1, #high(2451011 % 0x10000) 
0633 753625     560            mov y+2, #low (2451011 / 0x10000) 
0636 753700     560            mov y+3, #high(2451011 / 0x10000) 
0639 1201DF     561       lcall add32
063C 853038     562       mov seed+0, x+0
063F 853139     563       mov seed+1, x+1
0642 85323A     564       mov seed+2, x+2
0645 85333B     565       mov seed+3, x+3
0648 22         566       ret
0649            567   
0649            568   wait_random:
0649 C002       569            push AR2
064B AA38       569            mov R2, seed+0
064D 120079     569            lcall ?Wait_Milli_Seconds
0650 D002       569            pop AR2
0652 C002       570            push AR2
0654 AA39       570            mov R2, seed+1
0656 120079     570            lcall ?Wait_Milli_Seconds
0659 D002       570            pop AR2
065B C002       571            push AR2
065D AA3A       571            mov R2, seed+2
065F 120079     571            lcall ?Wait_Milli_Seconds
0662 D002       571            pop AR2
0664 C002       572            push AR2
0666 AA3B       572            mov R2, seed+3
0668 120079     572            lcall ?Wait_Milli_Seconds
066B D002       572            pop AR2
066D 22         573       ret
066E            574   
066E            575   movtox:
066E            576            ; 5th digit:
066E EA         577       mov a, R2
066F 540F       578       anl a, #0FH
0671 4430       579       orl a, #'0' ; convert to ASCII
0673 754000     580       mov bcd+4, #0
0676 753F00     581       mov bcd+3, #0
0679 8A3E       582       mov bcd+2, R2
067B            583            ;lcall ?WriteData
067B            584            ; 4th digit:
067B E9         585       mov a, R1
067C C4         586       swap a
067D 540F       587       anl a, #0FH
067F 4430       588       orl a, #'0' ; convert to ASCII
0681            589            ;lcall ?WriteData
0681            590            ; 3rd digit:
0681 E9         591       mov a, R1
0682 540F       592       anl a, #0FH
0684 4430       593       orl a, #'0' ; convert to ASCII
0686 893D       594       mov bcd+1, R1
0688            595            ;lcall ?WriteData
0688            596            ; 2nd digit:
0688 E8         597       mov a, R0
0689 C4         598       swap a
068A 540F       599       anl a, #0FH
068C 4430       600       orl a, #'0' ; convert to ASCII
068E            601       
068E            602            ;lcall ?WriteData
068E            603            ; 1st digit:
068E E8         604       mov a, R0
068F 540F       605       anl a, #0FH
0691 4430       606       orl a, #'0' ; convert to ASCII
0693 883C       607       mov bcd+0, R0
0695            608            ;lcall ?WriteData
0695            609       
0695 22         610       ret
0696            611   ;---------------------------------;
0696            612   ; Hardware initialization         ;
0696            613   ;---------------------------------;
0696            614   
0696            615   ;---------------------------------;
0696            616   ; Main program loop               ;
0696            617   ;---------------------------------;
0696            618   MyProgram:
0696            619       ; Initialize the hardware:
0696 75817F     620       mov SP, #7FH
0699 1205B7     621       lcall InitTimer2
069C 1200C8     622       lcall LCD_4BIT
069F 12055E     623       lcall Timer1_Init
06A2 C0E0       624            push acc
06A4 7401       624            mov a, #1
06A6 14         624            dec a
06A7 1200FF     624            lcall ?Set_Cursor_1 ; Select column and row
06AA D0E0       624            pop acc
06AC C083       625            push dph
06AE C082       625            push dpl
06B0 C0E0       625            push acc
06B2 90001E     625            mov dptr, #Initial_Message
06B5 1200F2     625            lcall ?Send_Constant_String
06B8 D0E0       625            pop acc
06BA D082       625            pop dpl
06BC D083       625            pop dph
06BE C0E0       626            push acc
06C0 7401       626            mov a, #1
06C2 14         626            dec a
06C3 1200FD     626            lcall ?Set_Cursor_2 ; Select column and row
06C6 D0E0       626            pop acc
06C8 C083       627            push dph
06CA C082       627            push dpl
06CC C0E0       627            push acc
06CE 90002B     627            mov dptr, #Initial_Message2
06D1 1200F2     627            lcall ?Send_Constant_String
06D4 D0E0       627            pop acc
06D6 D082       627            pop dpl
06D8 D083       627            pop dph
06DA D2AF       628       setb EA
06DC D28C       629       setb TR0
06DE D2CA       630       setb TR2;random number
06E0 D204       631       setb half_seconds_flag
06E2 20C5FD     632       jb P4.5, $
06E5 85CD38     633       mov seed+0, TH2
06E8 753901     634       mov seed+1, #0x01
06EB 753A87     635       mov seed+2, #0x87
06EE 85CC3B     636       mov seed+3, TL2
06F1 C2CA       637       clr TR2
06F3 754400     638       mov p1points, #0x00
06F6 754500     639       mov p2points, #0x00
06F9            640       
06F9            641   forever:
06F9            642       ; Measure the frequency applied to pin T2
06F9            643       ; Measure the period applied to pin P2.0
06F9 C2CA       644       clr TR2 ; Stop counter 2
06FB 75CC00     645       mov TL2, #0
06FE 75CD00     646       mov TH2, #0
0701 20A0FD     647       jb P2.0, $
0704 30A0FD     648       jnb P2.0, $
0707 D2CA       649       setb TR2 ; Start counter 0
0709 20A0FD     650       jb P2.0, $
070C 30A0FD     651       jnb P2.0, $
070F C2CA       652       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0711            653       ; save the period of P2.0 for later use
0711            654            ; Convert the result to BCD and display on LCD
0711 C0E0       655            push acc
0713 740C       655            mov a, #12
0715 14         655            dec a
0716 1200FF     655            lcall ?Set_Cursor_1 ; Select column and row
0719 D0E0       655            pop acc
071B 1205C5     656            lcall hex2bcd1
071E            657       ;lcall DisplayBCD_LCD
071E            658       
071E            659       ; Measure the period applied to pin P2.1
071E C2CA       660       clr TR2 ; Stop counter 2
0720 75CC00     661       mov TL2, #0
0723 75CD00     662       mov TH2, #0
0726 20A1FD     663       jb P2.1, $
0729 30A1FD     664       jnb P2.1, $
072C D2CA       665       setb TR2 ; Start counter 0
072E 20A1FD     666       jb P2.1, $
0731 30A1FD     667       jnb P2.1, $
0734 C2CA       668       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0736            669       ; save the period of P2.1 for later use
0736            670            ; Convert the result to BCD and display on LCD
0736 C0E0       671            push acc
0738 740C       671            mov a, #12
073A 14         671            dec a
073B 1200FD     671            lcall ?Set_Cursor_2 ; Select column and row
073E D0E0       671            pop acc
0740 1205C5     672            lcall hex2bcd1
0743            673      ; lcall DisplayBCD_LCD
0743            674            ; Convert the result to BCD and display on LCD
0743 0207E1     675            ljmp start_game
0746 0206F9     676       ljmp forever ;  Repeat! 
0749            677   
0749            678   forever1:
0749 C0E0       679            push acc
074B 7409       679            mov a, #9
074D 14         679            dec a
074E 1200FF     679            lcall ?Set_Cursor_1 ; Select column and row
0751 D0E0       679            pop acc
0753 C000       680            push ar0
0755 A844       680            mov r0, p1points
0757 120104     680            lcall ?Display_BCD
075A D000       680            pop ar0
075C C0E0       681            push acc
075E 7409       681            mov a, #9
0760 14         681            dec a
0761 1200FD     681            lcall ?Set_Cursor_2 ; Select column and row
0764 D0E0       681            pop acc
0766 C000       682            push ar0
0768 A845       682            mov r0, p2points
076A 120104     682            lcall ?Display_BCD
076D D000       682            pop ar0
076F            683       ; Measure the period applied to pin P2.0
076F C2CA       684       clr TR2 ; Stop counter 2
0771 75CC00     685       mov TL2, #0
0774 75CD00     686       mov TH2, #0
0777 20A0FD     687       jb P2.0, $
077A 30A0FD     688       jnb P2.0, $
077D D2CA       689       setb TR2 ; Start counter 0
077F 20A0FD     690       jb P2.0, $
0782 30A0FD     691       jnb P2.0, $
0785 C2CA       692       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0787            693       ; save the period of P2.0 for later use
0787            694            ; Convert the result to BCD and display on LCD
0787 C0E0       695            push acc
0789 740C       695            mov a, #12
078B 14         695            dec a
078C 1200FF     695            lcall ?Set_Cursor_1 ; Select column and row
078F D0E0       695            pop acc
0791 1205C5     696            lcall hex2bcd1
0794            697       ;lcall DisplayBCD_LCD
0794 22         698       ret
0795            699   forever2:
0795 C0E0       700            push acc
0797 7409       700            mov a, #9
0799 14         700            dec a
079A 1200FF     700            lcall ?Set_Cursor_1 ; Select column and row
079D D0E0       700            pop acc
079F C000       701            push ar0
07A1 A844       701            mov r0, p1points
07A3 120104     701            lcall ?Display_BCD
07A6 D000       701            pop ar0
07A8 C0E0       702            push acc
07AA 7409       702            mov a, #9
07AC 14         702            dec a
07AD 1200FD     702            lcall ?Set_Cursor_2 ; Select column and row
07B0 D0E0       702            pop acc
07B2 C000       703            push ar0
07B4 A845       703            mov r0, p2points
07B6 120104     703            lcall ?Display_BCD
07B9 D000       703            pop ar0
07BB            704       ; Measure the period applied to pin P2.1
07BB C2CA       705       clr TR2 ; Stop counter 2
07BD 75CC00     706       mov TL2, #0
07C0 75CD00     707       mov TH2, #0
07C3 20A1FD     708       jb P2.1, $
07C6 30A1FD     709       jnb P2.1, $
07C9 D2CA       710       setb TR2 ; Start counter 0
07CB 20A1FD     711       jb P2.1, $
07CE 30A1FD     712       jnb P2.1, $
07D1 C2CA       713       clr TR2 ; Stop counter 2, TH2-TL2 has the period
07D3            714       ; save the period of P2.1 for later use
07D3            715            ; Convert the result to BCD and display on LCD
07D3 C0E0       716            push acc
07D5 740C       716            mov a, #12
07D7 14         716            dec a
07D8 1200FD     716            lcall ?Set_Cursor_2 ; Select column and row
07DB D0E0       716            pop acc
07DD 1205C5     717            lcall hex2bcd1
07E0            718       ;lcall DisplayBCD_LCD
07E0 22         719       ret
07E1            720   start_game:
07E1 D201       721       setb p1_press
07E3 D202       722       setb p2_press 
07E5            723       ;Set_Cursor(1, 1)
07E5            724       ;Send_Constant_String(#Initial_Message);put initial message here too
07E5            725       ;Set_Cursor(2, 1)
07E5            726       ;Send_Constant_String(#Initial_Message2)     
07E5 C0E0       727            push acc
07E7 7401       727            mov a, #1
07E9 14         727            dec a
07EA 1200FF     727            lcall ?Set_Cursor_1 ; Select column and row
07ED D0E0       727            pop acc
07EF C083       728            push dph
07F1 C082       728            push dpl
07F3 C0E0       728            push acc
07F5 90001E     728            mov dptr, #Initial_Message
07F8 1200F2     728            lcall ?Send_Constant_String
07FB D0E0       728            pop acc
07FD D082       728            pop dpl
07FF D083       728            pop dph;put initial message here too
0801 C0E0       729            push acc
0803 7401       729            mov a, #1
0805 14         729            dec a
0806 1200FD     729            lcall ?Set_Cursor_2 ; Select column and row
0809 D0E0       729            pop acc
080B C083       730            push dph
080D C082       730            push dpl
080F C0E0       730            push acc
0811 90002B     730            mov dptr, #Initial_Message2
0814 1200F2     730            lcall ?Send_Constant_String
0817 D0E0       730            pop acc
0819 D082       730            pop dpl
081B D083       730            pop dph         
081D C0E0       731            push acc
081F 7409       731            mov a, #9
0821 14         731            dec a
0822 1200FF     731            lcall ?Set_Cursor_1 ; Select column and row
0825 D0E0       731            pop acc
0827 C000       732            push ar0
0829 A844       732            mov r0, p1points
082B 120104     732            lcall ?Display_BCD
082E D000       732            pop ar0
0830 C0E0       733            push acc
0832 7409       733            mov a, #9
0834 14         733            dec a
0835 1200FD     733            lcall ?Set_Cursor_2 ; Select column and row
0838 D0E0       733            pop acc
083A C000       734            push ar0
083C A845       734            mov r0, p2points
083E 120104     734            lcall ?Display_BCD
0841 D000       734            pop ar0  
0843            735            ;Set_Cursor(1, 12) ;period? for visibility
0843            736            ;lcall hex2bcd1
0843            737            ;Set_Cursor(2, 12)
0843            738            ;lcall hex2bcd1
0843 C28C       739            clr TR0
0845 C28E       740            clr TR1
0847 120612     741       lcall random
084A 120649     742       lcall wait_random
084D E539       743       mov a, seed+1
084F A2E3       744       mov c, acc.3
0851            745       ;mov HLbit, c
0851 4024       746       jc win_tone
0853 020856     747       ljmp lose_tone
0856            748   
0856            749   ;figure out how to make it wait few seconds and then skip if none of the players pushes
0856            750   
0856            751   lose_tone:
0856 1203C9     752       lcall Timer01_Init
0859 C002       753            push AR2
085B 7AFF       753            mov R2, #255
085D 120079     753            lcall ?Wait_Milli_Seconds
0860 D002       753            pop AR2
0862 C002       754            push AR2
0864 7AFF       754            mov R2, #255
0866 120079     754            lcall ?Wait_Milli_Seconds
0869 D002       754            pop AR2
086B C002       755            push AR2
086D 7AFF       755            mov R2, #255
086F 120079     755            lcall ?Wait_Milli_Seconds
0872 D002       755            pop AR2
0874 020949     756       ljmp start_game_nohit1
0877            757   win_tone: 
0877 1203B0     758       lcall Timer00_Init
087A C002       759            push AR2
087C 7AFF       759            mov R2, #255
087E 120079     759            lcall ?Wait_Milli_Seconds
0881 D002       759            pop AR2
0883 C002       760            push AR2
0885 7AFF       760            mov R2, #255
0887 120079     760            lcall ?Wait_Milli_Seconds
088A D002       760            pop AR2
088C C002       761            push AR2
088E 7AFF       761            mov R2, #255
0890 120079     761            lcall ?Wait_Milli_Seconds
0893 D002       761            pop AR2
0895 0208E0     762       ljmp start_game_hit1
0898            763       
0898            764   checkfreq1:
0898 753425     765            mov y+0, #low (4645 % 0x10000) 
089B 753512     765            mov y+1, #high(4645 % 0x10000) 
089E 753600     765            mov y+2, #low (4645 / 0x10000) 
08A1 753700     765            mov y+3, #high(4645 / 0x10000) 
08A4 753464     766            mov y+0, #low (100 % 0x10000) 
08A7 753500     766            mov y+1, #high(100 % 0x10000) 
08AA 753600     766            mov y+2, #low (100 / 0x10000) 
08AD 753700     766            mov y+3, #high(100 / 0x10000) ;change made for my sensor
08B0 120280     767       lcall x_gteq_y
08B3 100003     768       jbc mf, freq1_nopress
08B6 D201       769       setb p1_press
08B8 22         770       ret
08B9            771   
08B9            772   freq1_nopress:
08B9 C201       773       clr p1_press
08BB 22         774       ret
08BC            775   
08BC            776   checkfreq2:
08BC 75342A     777            mov y+0, #low (4650 % 0x10000) 
08BF 753512     777            mov y+1, #high(4650 % 0x10000) 
08C2 753600     777            mov y+2, #low (4650 / 0x10000) 
08C5 753700     777            mov y+3, #high(4650 / 0x10000) 
08C8 753464     778            mov y+0, #low (100 % 0x10000) 
08CB 753500     778            mov y+1, #high(100 % 0x10000) 
08CE 753600     778            mov y+2, #low (100 / 0x10000) 
08D1 753700     778            mov y+3, #high(100 / 0x10000) ;change made for my sensor
08D4 120280     779       lcall x_gteq_y
08D7 100003     780       jbc mf, freq2_press
08DA D202       781       setb p2_press
08DC 22         782       ret
08DD            783   
08DD            784   freq2_press:
08DD C202       785       clr p2_press
08DF 22         786       ret
08E0            787   
08E0            788   start_game_hit1:
08E0 120749     789       lcall forever1
08E3 12066E     790       lcall movtox
08E6 1201A3     791       lcall bcd2hex
08E9 120898     792       lcall checkfreq1
08EC 12011A     793       lcall hex2bcd
08EF 1205E7     794       lcall DisplayBCD_LCD
08F2 10011E     795       jbc p1_press, start_game_hit2
08F5 C28E       796       clr TR1
08F7 E4         797       clr a 
08F8 E544       798       mov a, p1points
08FA 2401       799       add a, #0x01
08FC F544       800       mov p1points, a
08FE B4053E     801       cjne a, #0x05, start_jmp1
0901 E4         802       clr a
0902 D201       803       setb p1_press
0904 D202       804       setb p2_press
0906 020909     805       ljmp p1win_jmp
0909            806   
0909            807   p1win_jmp:
0909 D201       808       setb p1_press
090B D202       809       setb p2_press
090D 020D8D     810       ljmp p1win
0910            811   checkfreq1_jmp:
0910 020898     812       ljmp checkfreq1
0913            813   start_game_hit2:
0913 120795     814       lcall forever2
0916 12066E     815       lcall movtox
0919 1201A3     816       lcall bcd2hex
091C 1208BC     817       lcall checkfreq2
091F 12011A     818       lcall hex2bcd
0922 1205E7     819       lcall DisplayBCD_LCD
0925 1002B8     820       jbc p2_press, start_game_hit1
0928 C28E       821       clr TR1
092A E4         822       clr a 
092B E545       823       mov a, p2points
092D 2401       824       add a, #0x01
092F F545       825       mov p2points, a
0931 B4050B     826       cjne a, #0x05, start_jmp1
0934 D201       827       setb p1_press
0936 D202       828       setb p2_press
0938 E4         829       clr a
0939 020942     830       ljmp p2win_jmp
093C            831   start_game_hit1_jmp:
093C 0208E0     832            ljmp start_game_hit1
093F            833            
093F            834   start_jmp1:
093F 0207E1     835       ljmp start_game
0942            836   
0942            837   p2win_jmp:
0942 D201       838       setb p1_press
0944 D202       839       setb p2_press
0946 020F18     840       ljmp p2win
0949            841   
0949            842   start_game_nohit1:
0949 D201       843       setb p1_press
094B D202       844       setb p2_press
094D 120749     845       lcall forever1
0950 12066E     846       lcall movtox
0953 1201A3     847       lcall bcd2hex
0956 120898     848       lcall checkfreq1
0959 12011A     849       lcall hex2bcd
095C 1205E7     850       lcall DisplayBCD_LCD
095F 120795     851       lcall forever2
0962 12066E     852       lcall movtox
0965 1201A3     853       lcall bcd2hex
0968 1208BC     854       lcall checkfreq2
096B 12011A     855       lcall hex2bcd
096E 1205E7     856       lcall DisplayBCD_LCD
0971            857       ;jbc p1_press, start_game_nohit2
0971            858    ;   jbc half_seconds_flag, start_game_jmp
0971 C002       859            push AR2
0973 7A0A       859            mov R2, #10
0975 120079     859            lcall ?Wait_Milli_Seconds
0978 D002       859            pop AR2
097A 120749     860       lcall forever1
097D 12066E     861       lcall movtox
0980 1201A3     862       lcall bcd2hex
0983 120898     863       lcall checkfreq1
0986 12011A     864       lcall hex2bcd
0989 1205E7     865       lcall DisplayBCD_LCD
098C 120795     866       lcall forever2
098F 12066E     867       lcall movtox
0992 1201A3     868       lcall bcd2hex
0995 1208BC     869       lcall checkfreq2
0998 12011A     870       lcall hex2bcd
099B 1205E7     871       lcall DisplayBCD_LCD
099E C002       872            push AR2
09A0 7A0A       872            mov R2, #10
09A2 120079     872            lcall ?Wait_Milli_Seconds
09A5 D002       872            pop AR2
09A7 120749     873       lcall forever1
09AA 12066E     874       lcall movtox
09AD 1201A3     875       lcall bcd2hex
09B0 120898     876       lcall checkfreq1
09B3 12011A     877       lcall hex2bcd
09B6 1205E7     878       lcall DisplayBCD_LCD
09B9 120795     879       lcall forever2
09BC 12066E     880       lcall movtox
09BF 1201A3     881       lcall bcd2hex
09C2 1208BC     882       lcall checkfreq2
09C5 12011A     883       lcall hex2bcd
09C8 1205E7     884       lcall DisplayBCD_LCD
09CB C002       885            push AR2
09CD 7A0A       885            mov R2, #10
09CF 120079     885            lcall ?Wait_Milli_Seconds
09D2 D002       885            pop AR2
09D4 120749     886       lcall forever1
09D7 12066E     887       lcall movtox
09DA 1201A3     888       lcall bcd2hex
09DD 120898     889       lcall checkfreq1
09E0 12011A     890       lcall hex2bcd
09E3 1205E7     891       lcall DisplayBCD_LCD
09E6 120795     892       lcall forever2
09E9 12066E     893       lcall movtox
09EC 1201A3     894       lcall bcd2hex
09EF 1208BC     895       lcall checkfreq2
09F2 12011A     896       lcall hex2bcd
09F5 1205E7     897       lcall DisplayBCD_LCD
09F8 C002       898            push AR2
09FA 7A0A       898            mov R2, #10
09FC 120079     898            lcall ?Wait_Milli_Seconds
09FF D002       898            pop AR2
0A01 120749     899       lcall forever1
0A04 12066E     900       lcall movtox
0A07 1201A3     901       lcall bcd2hex
0A0A 120898     902       lcall checkfreq1
0A0D 12011A     903       lcall hex2bcd
0A10 1205E7     904       lcall DisplayBCD_LCD
0A13 120795     905       lcall forever2
0A16 12066E     906       lcall movtox
0A19 1201A3     907       lcall bcd2hex
0A1C 1208BC     908       lcall checkfreq2
0A1F 12011A     909       lcall hex2bcd
0A22 1205E7     910       lcall DisplayBCD_LCD
0A25 C002       911            push AR2
0A27 7A0A       911            mov R2, #10
0A29 120079     911            lcall ?Wait_Milli_Seconds
0A2C D002       911            pop AR2
0A2E 120749     912       lcall forever1
0A31 12066E     913       lcall movtox
0A34 1201A3     914       lcall bcd2hex
0A37 120898     915       lcall checkfreq1
0A3A 12011A     916       lcall hex2bcd
0A3D 1205E7     917       lcall DisplayBCD_LCD
0A40 120795     918       lcall forever2
0A43 12066E     919       lcall movtox
0A46 1201A3     920       lcall bcd2hex
0A49 1208BC     921       lcall checkfreq2
0A4C 12011A     922       lcall hex2bcd
0A4F 1205E7     923       lcall DisplayBCD_LCD
0A52 C002       924            push AR2
0A54 7A0A       924            mov R2, #10
0A56 120079     924            lcall ?Wait_Milli_Seconds
0A59 D002       924            pop AR2
0A5B 120749     925       lcall forever1
0A5E 12066E     926       lcall movtox
0A61 1201A3     927       lcall bcd2hex
0A64 120898     928       lcall checkfreq1
0A67 12011A     929       lcall hex2bcd
0A6A 1205E7     930       lcall DisplayBCD_LCD
0A6D 120795     931       lcall forever2
0A70 12066E     932       lcall movtox
0A73 1201A3     933       lcall bcd2hex
0A76 1208BC     934       lcall checkfreq2
0A79 12011A     935       lcall hex2bcd
0A7C 1205E7     936       lcall DisplayBCD_LCD
0A7F C002       937            push AR2
0A81 7A0A       937            mov R2, #10
0A83 120079     937            lcall ?Wait_Milli_Seconds
0A86 D002       937            pop AR2
0A88 120749     938       lcall forever1
0A8B 12066E     939       lcall movtox
0A8E 1201A3     940       lcall bcd2hex
0A91 120898     941       lcall checkfreq1
0A94 12011A     942       lcall hex2bcd
0A97 1205E7     943       lcall DisplayBCD_LCD
0A9A 120795     944       lcall forever2
0A9D 12066E     945       lcall movtox
0AA0 1201A3     946       lcall bcd2hex
0AA3 1208BC     947       lcall checkfreq2
0AA6 12011A     948       lcall hex2bcd
0AA9 1205E7     949       lcall DisplayBCD_LCD
0AAC C002       950            push AR2
0AAE 7A0A       950            mov R2, #10
0AB0 120079     950            lcall ?Wait_Milli_Seconds
0AB3 D002       950            pop AR2
0AB5 120749     951       lcall forever1
0AB8 12066E     952       lcall movtox
0ABB 1201A3     953       lcall bcd2hex
0ABE 120898     954       lcall checkfreq1
0AC1 12011A     955       lcall hex2bcd
0AC4 1205E7     956       lcall DisplayBCD_LCD
0AC7 120795     957       lcall forever2
0ACA 12066E     958       lcall movtox
0ACD 1201A3     959       lcall bcd2hex
0AD0 1208BC     960       lcall checkfreq2
0AD3 12011A     961       lcall hex2bcd
0AD6 1205E7     962       lcall DisplayBCD_LCD
0AD9 C002       963            push AR2
0ADB 7A0A       963            mov R2, #10
0ADD 120079     963            lcall ?Wait_Milli_Seconds
0AE0 D002       963            pop AR2
0AE2 120749     964       lcall forever1
0AE5 12066E     965       lcall movtox
0AE8 1201A3     966       lcall bcd2hex
0AEB 120898     967       lcall checkfreq1
0AEE 12011A     968       lcall hex2bcd
0AF1 1205E7     969       lcall DisplayBCD_LCD
0AF4 120795     970       lcall forever2
0AF7 12066E     971       lcall movtox
0AFA 1201A3     972       lcall bcd2hex
0AFD 1208BC     973       lcall checkfreq2
0B00 12011A     974       lcall hex2bcd
0B03 1205E7     975       lcall DisplayBCD_LCD
0B06 C002       976            push AR2
0B08 7A0A       976            mov R2, #10
0B0A 120079     976            lcall ?Wait_Milli_Seconds
0B0D D002       976            pop AR2
0B0F 120749     977       lcall forever1
0B12 12066E     978       lcall movtox
0B15 1201A3     979       lcall bcd2hex
0B18 120898     980       lcall checkfreq1
0B1B 12011A     981       lcall hex2bcd
0B1E 1205E7     982       lcall DisplayBCD_LCD
0B21 120795     983       lcall forever2
0B24 12066E     984       lcall movtox
0B27 1201A3     985       lcall bcd2hex
0B2A 1208BC     986       lcall checkfreq2
0B2D 12011A     987       lcall hex2bcd
0B30 1205E7     988       lcall DisplayBCD_LCD
0B33 C002       989            push AR2
0B35 7A0A       989            mov R2, #10
0B37 120079     989            lcall ?Wait_Milli_Seconds
0B3A D002       989            pop AR2
0B3C 120749     990       lcall forever1
0B3F 12066E     991       lcall movtox
0B42 1201A3     992       lcall bcd2hex
0B45 120898     993       lcall checkfreq1
0B48 12011A     994       lcall hex2bcd
0B4B 1205E7     995       lcall DisplayBCD_LCD
0B4E 120795     996       lcall forever2
0B51 12066E     997       lcall movtox
0B54 1201A3     998       lcall bcd2hex
0B57 1208BC     999       lcall checkfreq2
0B5A 12011A    1000       lcall hex2bcd
0B5D 1205E7    1001       lcall DisplayBCD_LCD
0B60 C002      1002            push AR2
0B62 7A0A      1002            mov R2, #10
0B64 120079    1002            lcall ?Wait_Milli_Seconds
0B67 D002      1002            pop AR2
0B69 120749    1003       lcall forever1
0B6C 12066E    1004       lcall movtox
0B6F 1201A3    1005       lcall bcd2hex
0B72 120898    1006       lcall checkfreq1
0B75 12011A    1007       lcall hex2bcd
0B78 1205E7    1008       lcall DisplayBCD_LCD
0B7B 120795    1009       lcall forever2
0B7E 12066E    1010       lcall movtox
0B81 1201A3    1011       lcall bcd2hex
0B84 1208BC    1012       lcall checkfreq2
0B87 12011A    1013       lcall hex2bcd
0B8A 1205E7    1014       lcall DisplayBCD_LCD
0B8D C002      1015            push AR2
0B8F 7A0A      1015            mov R2, #10
0B91 120079    1015            lcall ?Wait_Milli_Seconds
0B94 D002      1015            pop AR2
0B96 120749    1016       lcall forever1
0B99 12066E    1017       lcall movtox
0B9C 1201A3    1018       lcall bcd2hex
0B9F 120898    1019       lcall checkfreq1
0BA2 12011A    1020       lcall hex2bcd
0BA5 1205E7    1021       lcall DisplayBCD_LCD
0BA8 120795    1022       lcall forever2
0BAB 12066E    1023       lcall movtox
0BAE 1201A3    1024       lcall bcd2hex
0BB1 1208BC    1025       lcall checkfreq2
0BB4 12011A    1026       lcall hex2bcd
0BB7 1205E7    1027       lcall DisplayBCD_LCD
0BBA C002      1028            push AR2
0BBC 7A0A      1028            mov R2, #10
0BBE 120079    1028            lcall ?Wait_Milli_Seconds
0BC1 D002      1028            pop AR2
0BC3 120749    1029       lcall forever1
0BC6 12066E    1030       lcall movtox
0BC9 1201A3    1031       lcall bcd2hex
0BCC 120898    1032       lcall checkfreq1
0BCF 12011A    1033       lcall hex2bcd
0BD2 1205E7    1034       lcall DisplayBCD_LCD
0BD5 120795    1035       lcall forever2
0BD8 12066E    1036       lcall movtox
0BDB 1201A3    1037       lcall bcd2hex
0BDE 1208BC    1038       lcall checkfreq2
0BE1 12011A    1039       lcall hex2bcd
0BE4 1205E7    1040       lcall DisplayBCD_LCD
0BE7 C002      1041            push AR2
0BE9 7A0A      1041            mov R2, #10
0BEB 120079    1041            lcall ?Wait_Milli_Seconds
0BEE D002      1041            pop AR2
0BF0 120749    1042       lcall forever1
0BF3 12066E    1043       lcall movtox
0BF6 1201A3    1044       lcall bcd2hex
0BF9 120898    1045       lcall checkfreq1
0BFC 12011A    1046       lcall hex2bcd
0BFF 1205E7    1047       lcall DisplayBCD_LCD
0C02 120795    1048       lcall forever2
0C05 12066E    1049       lcall movtox
0C08 1201A3    1050       lcall bcd2hex
0C0B 1208BC    1051       lcall checkfreq2
0C0E 12011A    1052       lcall hex2bcd
0C11 1205E7    1053       lcall DisplayBCD_LCD
0C14 C002      1054            push AR2
0C16 7A0A      1054            mov R2, #10
0C18 120079    1054            lcall ?Wait_Milli_Seconds
0C1B D002      1054            pop AR2
0C1D 120749    1055       lcall forever1
0C20 12066E    1056       lcall movtox
0C23 1201A3    1057       lcall bcd2hex
0C26 120898    1058       lcall checkfreq1
0C29 12011A    1059       lcall hex2bcd
0C2C 1205E7    1060       lcall DisplayBCD_LCD
0C2F 120795    1061       lcall forever2
0C32 12066E    1062       lcall movtox
0C35 1201A3    1063       lcall bcd2hex
0C38 1208BC    1064       lcall checkfreq2
0C3B 12011A    1065       lcall hex2bcd
0C3E 1205E7    1066       lcall DisplayBCD_LCD
0C41 C002      1067            push AR2
0C43 7A0A      1067            mov R2, #10
0C45 120079    1067            lcall ?Wait_Milli_Seconds
0C48 D002      1067            pop AR2
0C4A 120749    1068       lcall forever1
0C4D 12066E    1069       lcall movtox
0C50 1201A3    1070       lcall bcd2hex
0C53 120898    1071       lcall checkfreq1
0C56 12011A    1072       lcall hex2bcd
0C59 1205E7    1073       lcall DisplayBCD_LCD
0C5C 120795    1074       lcall forever2
0C5F 12066E    1075       lcall movtox
0C62 1201A3    1076       lcall bcd2hex
0C65 1208BC    1077       lcall checkfreq2
0C68 12011A    1078       lcall hex2bcd
0C6B 1205E7    1079       lcall DisplayBCD_LCD
0C6E C002      1080            push AR2
0C70 7A0A      1080            mov R2, #10
0C72 120079    1080            lcall ?Wait_Milli_Seconds
0C75 D002      1080            pop AR2
0C77 120749    1081       lcall forever1
0C7A 12066E    1082       lcall movtox
0C7D 1201A3    1083       lcall bcd2hex
0C80 120898    1084       lcall checkfreq1
0C83 12011A    1085       lcall hex2bcd
0C86 1205E7    1086       lcall DisplayBCD_LCD
0C89 120795    1087       lcall forever2
0C8C 12066E    1088       lcall movtox
0C8F 1201A3    1089       lcall bcd2hex
0C92 1208BC    1090       lcall checkfreq2
0C95 12011A    1091       lcall hex2bcd
0C98 1205E7    1092       lcall DisplayBCD_LCD
0C9B C002      1093            push AR2
0C9D 7A0A      1093            mov R2, #10
0C9F 120079    1093            lcall ?Wait_Milli_Seconds
0CA2 D002      1093            pop AR2
0CA4 120749    1094       lcall forever1
0CA7 12066E    1095       lcall movtox
0CAA 1201A3    1096       lcall bcd2hex
0CAD 120898    1097       lcall checkfreq1
0CB0 12011A    1098       lcall hex2bcd
0CB3 1205E7    1099       lcall DisplayBCD_LCD
0CB6 120795    1100       lcall forever2
0CB9 12066E    1101       lcall movtox
0CBC 1201A3    1102       lcall bcd2hex
0CBF 1208BC    1103       lcall checkfreq2
0CC2 12011A    1104       lcall hex2bcd
0CC5 1205E7    1105       lcall DisplayBCD_LCD
0CC8 C002      1106            push AR2
0CCA 7A0A      1106            mov R2, #10
0CCC 120079    1106            lcall ?Wait_Milli_Seconds
0CCF D002      1106            pop AR2
0CD1 120749    1107       lcall forever1
0CD4 12066E    1108       lcall movtox
0CD7 1201A3    1109       lcall bcd2hex
0CDA 120898    1110       lcall checkfreq1
0CDD 12011A    1111       lcall hex2bcd
0CE0 1205E7    1112       lcall DisplayBCD_LCD
0CE3 120795    1113       lcall forever2
0CE6 12066E    1114       lcall movtox
0CE9 1201A3    1115       lcall bcd2hex
0CEC 1208BC    1116       lcall checkfreq2
0CEF 12011A    1117       lcall hex2bcd
0CF2 1205E7    1118       lcall DisplayBCD_LCD
0CF5 100118    1119       jbc p1_press, check_p2
0CF8 10020C    1120       jbc p2_press, p1_pressed
0CFB           1121       
0CFB           1122   
0CFB E4        1123       clr a 
0CFC E544      1124       mov a, p1points
0CFE B40043    1125       cjne a, #0x00, start_jmpsub1
0D01 020D68    1126       ljmp start_jmpsub2
0D04           1127       
0D04           1128   check_p2_jmp:
0D04 020D10    1129            ljmp check_p2
0D07           1130   
0D07           1131   p1_pressed:
0D07 E4        1132       clr a 
0D08 E544      1133       mov a, p1points
0D0A B40009    1134       cjne a, #0x00, subplayer1
0D0D 0207E1    1135       ljmp start_game
0D10           1136   
0D10           1137   check_p2:
0D10 10022E    1138       jbc p2_press, start_game_jmp
0D13 020D38    1139       ljmp subplayer2
0D16           1140   
0D16           1141   subplayer1:
0D16 E4        1142       clr a
0D17 E544      1143       mov a, p1points
0D19 F530      1144       mov x, a
0D1B 753401    1145            mov y+0, #low (1 % 0x10000) 
0D1E 753500    1145            mov y+1, #high(1 % 0x10000) 
0D21 753600    1145            mov y+2, #low (1 / 0x10000) 
0D24 753700    1145            mov y+3, #high(1 / 0x10000) 
0D27 120200    1146       lcall sub32
0D2A E530      1147       mov a, x
0D2C D4        1148       da a
0D2D F544      1149       mov p1points, a
0D2F E4        1150       clr a
0D30 D201      1151       setb p1_press
0D32 D202      1152       setb p2_press
0D34 E4        1153       clr a 
0D35 0207E1    1154       ljmp start_game
0D38           1155   
0D38           1156   subplayer2:
0D38 E4        1157       clr a
0D39 E545      1158       mov a, p2points
0D3B B4002A    1159       cjne  a, #0x00, start_jmpsub2
0D3E 0207E1    1160       ljmp start_game
0D41           1161   
0D41           1162   start_game_jmp:
0D41 0207E1    1163       ljmp start_game
0D44           1164   
0D44           1165   start_jmpsub1:
0D44           1166       
0D44 F530      1167       mov x, a
0D46 753401    1168            mov y+0, #low (1 % 0x10000) 
0D49 753500    1168            mov y+1, #high(1 % 0x10000) 
0D4C 753600    1168            mov y+2, #low (1 / 0x10000) 
0D4F 753700    1168            mov y+3, #high(1 / 0x10000) 
0D52 120200    1169       lcall sub32
0D55 E530      1170       mov a, x
0D57 D4        1171       da a
0D58 F544      1172       mov p1points, a
0D5A E4        1173       clr a
0D5B D201      1174       setb p1_press
0D5D D202      1175       setb p2_press
0D5F E4        1176       clr a 
0D60 E545      1177       mov a, p2points
0D62 B40003    1178       cjne a, #0x00, start_jmpsub2
0D65 0207E1    1179       ljmp start_game
0D68           1180       
0D68           1181   start_jmpsub2:
0D68 F530      1182       mov x, a
0D6A 753401    1183            mov y+0, #low (1 % 0x10000) 
0D6D 753500    1183            mov y+1, #high(1 % 0x10000) 
0D70 753600    1183            mov y+2, #low (1 / 0x10000) 
0D73 753700    1183            mov y+3, #high(1 / 0x10000) 
0D76 120200    1184       lcall sub32
0D79 E530      1185       mov a, x
0D7B D4        1186       da a
0D7C F545      1187       mov p2points, a
0D7E E4        1188       clr a
0D7F C201      1189       clr p1_press
0D81 C202      1190       clr p2_press
0D83 020D86    1191       ljmp start_jmp
0D86           1192   
0D86           1193   start_jmp:
0D86 D201      1194       setb p1_press
0D88 D202      1195       setb p2_press
0D8A 0207E1    1196       ljmp start_game
0D8D           1197   p1win:
0D8D D201      1198       setb p1_press
0D8F D202      1199       setb p2_press
0D91 C0E0      1200            push acc
0D93 740B      1200            mov a, #11
0D95 14        1200            dec a
0D96 1200FF    1200            lcall ?Set_Cursor_1 ; Select column and row
0D99 D0E0      1200            pop acc
0D9B C0E0      1201            push acc
0D9D 7408      1201            mov a, #8
0D9F 14        1201            dec a
0DA0 1200FF    1201            lcall ?Set_Cursor_1 ; Select column and row
0DA3 D0E0      1201            pop acc
0DA5 C083      1202            push dph
0DA7 C082      1202            push dpl
0DA9 C0E0      1202            push acc
0DAB 900038    1202            mov dptr, #Winner1_message1
0DAE 1200F2    1202            lcall ?Send_Constant_String
0DB1 D0E0      1202            pop acc
0DB3 D082      1202            pop dpl
0DB5 D083      1202            pop dph
0DB7 C0E0      1203            push acc
0DB9 740B      1203            mov a, #11
0DBB 14        1203            dec a
0DBC 1200FD    1203            lcall ?Set_Cursor_2 ; Select column and row
0DBF D0E0      1203            pop acc
0DC1 C0E0      1204            push acc
0DC3 7408      1204            mov a, #8
0DC5 14        1204            dec a
0DC6 1200FD    1204            lcall ?Set_Cursor_2 ; Select column and row
0DC9 D0E0      1204            pop acc
0DCB C083      1205            push dph
0DCD C082      1205            push dpl
0DCF C0E0      1205            push acc
0DD1 900042    1205            mov dptr, #Winner1_message2
0DD4 1200F2    1205            lcall ?Send_Constant_String
0DD7 D0E0      1205            pop acc
0DD9 D082      1205            pop dpl
0DDB D083      1205            pop dph
0DDD C002      1206            push AR2
0DDF 7A05      1206            mov R2, #5
0DE1 120079    1206            lcall ?Wait_Milli_Seconds
0DE4 D002      1206            pop AR2
0DE6           1206   
0DE6 C0E0      1207            push acc
0DE8 7401      1207            mov a, #1
0DEA 14        1207            dec a
0DEB 1200FF    1207            lcall ?Set_Cursor_1 ; Select column and row
0DEE D0E0      1207            pop acc
0DF0 C083      1208            push dph
0DF2 C082      1208            push dpl
0DF4 C0E0      1208            push acc
0DF6 90005E    1208            mov dptr, #Playagain
0DF9 1200F2    1208            lcall ?Send_Constant_String
0DFC D0E0      1208            pop acc
0DFE D082      1208            pop dpl
0E00 D083      1208            pop dph
0E02 C0E0      1209            push acc
0E04 7401      1209            mov a, #1
0E06 14        1209            dec a
0E07 1200FD    1209            lcall ?Set_Cursor_2 ; Select column and row
0E0A D0E0      1209            pop acc
0E0C C083      1210            push dph
0E0E C082      1210            push dpl
0E10 C0E0      1210            push acc
0E12 900066    1210            mov dptr, #Clear_screen
0E15 1200F2    1210            lcall ?Send_Constant_String
0E18 D0E0      1210            pop acc
0E1A D082      1210            pop dpl
0E1C D083      1210            pop dph
0E1E C28C      1211       clr TR0;stops timer
0E20           1212       ;plays music 
0E20           1213       ;new music ideas?
0E20 120527    1214            lcall Timer0C2_Init
0E23 C002      1215            push AR2
0E25 7AFF      1215            mov R2, #255
0E27 120079    1215            lcall ?Wait_Milli_Seconds
0E2A D002      1215            pop AR2
0E2C C002      1216            push AR2
0E2E 7AFF      1216            mov R2, #255
0E30 120079    1216            lcall ?Wait_Milli_Seconds
0E33 D002      1216            pop AR2
0E35 1203E2    1217            lcall Timer0C_Init
0E38 C002      1218            push AR2
0E3A 7AFF      1218            mov R2, #255
0E3C 120079    1218            lcall ?Wait_Milli_Seconds
0E3F D002      1218            pop AR2
0E41 12042D    1219            lcall Timer0D1_Init
0E44 C002      1220            push AR2
0E46 7AFF      1220            mov R2, #255
0E48 120079    1220            lcall ?Wait_Milli_Seconds
0E4B D002      1220            pop AR2
0E4D 12045F    1221            lcall Timer0F_Init
0E50 C002      1222            push AR2
0E52 7AFF      1222            mov R2, #255
0E54 120079    1222            lcall ?Wait_Milli_Seconds
0E57 D002      1222            pop AR2
0E59 120478    1223            lcall Timer0F1_Init
0E5C C002      1224            push AR2
0E5E 7AFF      1224            mov R2, #255
0E60 120079    1224            lcall ?Wait_Milli_Seconds
0E63 D002      1224            pop AR2
0E65 12045F    1225            lcall Timer0F_Init
0E68 C002      1226            push AR2
0E6A 7AFF      1226            mov R2, #255
0E6C 120079    1226            lcall ?Wait_Milli_Seconds
0E6F D002      1226            pop AR2
0E71 12042D    1227            lcall Timer0D1_Init
0E74 C002      1228            push AR2
0E76 7AFF      1228            mov R2, #255
0E78 120079    1228            lcall ?Wait_Milli_Seconds
0E7B D002      1228            pop AR2
0E7D 1203E2    1229            lcall Timer0C_Init
0E80 C002      1230            push AR2
0E82 7AFF      1230            mov R2, #255
0E84 120079    1230            lcall ?Wait_Milli_Seconds
0E87 D002      1230            pop AR2
0E89 C002      1231            push AR2
0E8B 7AFF      1231            mov R2, #255
0E8D 120079    1231            lcall ?Wait_Milli_Seconds
0E90 D002      1231            pop AR2
0E92 C002      1232            push AR2
0E94 7AFF      1232            mov R2, #255
0E96 120079    1232            lcall ?Wait_Milli_Seconds
0E99 D002      1232            pop AR2
0E9B 12050E    1233            lcall Timer0A2_Init
0E9E C002      1234            push AR2
0EA0 7A96      1234            mov R2, #150
0EA2 120079    1234            lcall ?Wait_Milli_Seconds
0EA5 D002      1234            pop AR2
0EA7 120414    1235            lcall Timer0D_Init
0EAA C002      1236            push AR2
0EAC 7A96      1236            mov R2, #150
0EAE 120079    1236            lcall ?Wait_Milli_Seconds
0EB1 D002      1236            pop AR2
0EB3 1203E2    1237            lcall Timer0C_Init
0EB6 C002      1238            push AR2
0EB8 7A96      1238            mov R2, #150
0EBA 120079    1238            lcall ?Wait_Milli_Seconds
0EBD D002      1238            pop AR2
0EBF C002      1239            push AR2
0EC1 7AFF      1239            mov R2, #255
0EC3 120079    1239            lcall ?Wait_Milli_Seconds
0EC6 D002      1239            pop AR2
0EC8 C002      1240            push AR2
0ECA 7AFF      1240            mov R2, #255
0ECC 120079    1240            lcall ?Wait_Milli_Seconds
0ECF D002      1240            pop AR2
0ED1 C002      1241            push AR2
0ED3 7AFF      1241            mov R2, #255
0ED5 120079    1241            lcall ?Wait_Milli_Seconds
0ED8 D002      1241            pop AR2
0EDA C28C      1242            clr TR0
0EDC C002      1243            push AR2
0EDE 7AFF      1243            mov R2, #255
0EE0 120079    1243            lcall ?Wait_Milli_Seconds
0EE3 D002      1243            pop AR2
0EE5 C002      1244            push AR2
0EE7 7AFF      1244            mov R2, #255
0EE9 120079    1244            lcall ?Wait_Milli_Seconds
0EEC D002      1244            pop AR2
0EEE C002      1245            push AR2
0EF0 7AFF      1245            mov R2, #255
0EF2 120079    1245            lcall ?Wait_Milli_Seconds
0EF5 D002      1245            pop AR2
0EF7           1246                    
0EF7 20C51B    1247       jb START_BUTTON, p1win_jmp2
0EFA C002      1248            push AR2
0EFC 7A05      1248            mov R2, #5
0EFE 120079    1248            lcall ?Wait_Milli_Seconds
0F01 D002      1248            pop AR2
0F03 C002      1249            push AR2
0F05 7A32      1249            mov R2, #50
0F07 120079    1249            lcall ?Wait_Milli_Seconds
0F0A D002      1249            pop AR2
0F0C 20C506    1250       jb START_BUTTON, p1win_jmp2
0F0F 30C5FD    1251       jnb START_BUTTON, $
0F12 02109D    1252       ljmp restart_jmp
0F15           1253            
0F15           1254   p1win_jmp2:
0F15 020D8D    1255       ljmp p1win
0F18           1256            
0F18           1257   p2win: 
0F18 D201      1258       setb p1_press
0F1A D202      1259       setb p2_press
0F1C C0E0      1260            push acc
0F1E 740B      1260            mov a, #11
0F20 14        1260            dec a
0F21 1200FF    1260            lcall ?Set_Cursor_1 ; Select column and row
0F24 D0E0      1260            pop acc
0F26           1260   
0F26 C0E0      1261            push acc
0F28 7408      1261            mov a, #8
0F2A 14        1261            dec a
0F2B 1200FF    1261            lcall ?Set_Cursor_1 ; Select column and row
0F2E D0E0      1261            pop acc
0F30           1261   
0F30 C083      1262            push dph
0F32 C082      1262            push dpl
0F34 C0E0      1262            push acc
0F36 900042    1262            mov dptr, #Winner1_message2
0F39 1200F2    1262            lcall ?Send_Constant_String
0F3C D0E0      1262            pop acc
0F3E D082      1262            pop dpl
0F40 D083      1262            pop dph
0F42 C0E0      1263            push acc
0F44 740B      1263            mov a, #11
0F46 14        1263            dec a
0F47 1200FD    1263            lcall ?Set_Cursor_2 ; Select column and row
0F4A D0E0      1263            pop acc
0F4C C0E0      1264            push acc
0F4E 7408      1264            mov a, #8
0F50 14        1264            dec a
0F51 1200FD    1264            lcall ?Set_Cursor_2 ; Select column and row
0F54 D0E0      1264            pop acc
0F56 C083      1265            push dph
0F58 C082      1265            push dpl
0F5A C0E0      1265            push acc
0F5C 900038    1265            mov dptr, #Winner1_message1
0F5F 1200F2    1265            lcall ?Send_Constant_String
0F62 D0E0      1265            pop acc
0F64 D082      1265            pop dpl
0F66 D083      1265            pop dph
0F68 C002      1266            push AR2
0F6A 7A32      1266            mov R2, #50
0F6C 120079    1266            lcall ?Wait_Milli_Seconds
0F6F D002      1266            pop AR2
0F71 C0E0      1267            push acc
0F73 7401      1267            mov a, #1
0F75 14        1267            dec a
0F76 1200FF    1267            lcall ?Set_Cursor_1 ; Select column and row
0F79 D0E0      1267            pop acc
0F7B C083      1268            push dph
0F7D C082      1268            push dpl
0F7F C0E0      1268            push acc
0F81 90005E    1268            mov dptr, #Playagain
0F84 1200F2    1268            lcall ?Send_Constant_String
0F87 D0E0      1268            pop acc
0F89 D082      1268            pop dpl
0F8B D083      1268            pop dph
0F8D C0E0      1269            push acc
0F8F 7401      1269            mov a, #1
0F91 14        1269            dec a
0F92 1200FD    1269            lcall ?Set_Cursor_2 ; Select column and row
0F95 D0E0      1269            pop acc
0F97 C083      1270            push dph
0F99 C082      1270            push dpl
0F9B C0E0      1270            push acc
0F9D 900066    1270            mov dptr, #Clear_screen
0FA0 1200F2    1270            lcall ?Send_Constant_String
0FA3 D0E0      1270            pop acc
0FA5 D082      1270            pop dpl
0FA7 D083      1270            pop dph
0FA9 C28C      1271       clr TR0;stops timer
0FAB           1272            ;plays music
0FAB           1273            
0FAB 120527    1274                    lcall Timer0C2_Init
0FAE C002      1275            push AR2
0FB0 7AFF      1275            mov R2, #255
0FB2 120079    1275            lcall ?Wait_Milli_Seconds
0FB5 D002      1275            pop AR2
0FB7 C002      1276            push AR2
0FB9 7AFF      1276            mov R2, #255
0FBB 120079    1276            lcall ?Wait_Milli_Seconds
0FBE D002      1276            pop AR2
0FC0 1203E2    1277            lcall Timer0C_Init
0FC3 C002      1278            push AR2
0FC5 7AFF      1278            mov R2, #255
0FC7 120079    1278            lcall ?Wait_Milli_Seconds
0FCA D002      1278            pop AR2
0FCC 12042D    1279            lcall Timer0D1_Init
0FCF C002      1280            push AR2
0FD1 7AFF      1280            mov R2, #255
0FD3 120079    1280            lcall ?Wait_Milli_Seconds
0FD6 D002      1280            pop AR2
0FD8 12045F    1281            lcall Timer0F_Init
0FDB C002      1282            push AR2
0FDD 7AFF      1282            mov R2, #255
0FDF 120079    1282            lcall ?Wait_Milli_Seconds
0FE2 D002      1282            pop AR2
0FE4 120478    1283            lcall Timer0F1_Init
0FE7 C002      1284            push AR2
0FE9 7AFF      1284            mov R2, #255
0FEB 120079    1284            lcall ?Wait_Milli_Seconds
0FEE D002      1284            pop AR2
0FF0 12045F    1285            lcall Timer0F_Init
0FF3 C002      1286            push AR2
0FF5 7AFF      1286            mov R2, #255
0FF7 120079    1286            lcall ?Wait_Milli_Seconds
0FFA D002      1286            pop AR2
0FFC 12042D    1287            lcall Timer0D1_Init
0FFF C002      1288            push AR2
1001 7AFF      1288            mov R2, #255
1003 120079    1288            lcall ?Wait_Milli_Seconds
1006 D002      1288            pop AR2
1008 1203E2    1289            lcall Timer0C_Init
100B C002      1290            push AR2
100D 7AFF      1290            mov R2, #255
100F 120079    1290            lcall ?Wait_Milli_Seconds
1012 D002      1290            pop AR2
1014 C002      1291            push AR2
1016 7AFF      1291            mov R2, #255
1018 120079    1291            lcall ?Wait_Milli_Seconds
101B D002      1291            pop AR2
101D C002      1292            push AR2
101F 7AFF      1292            mov R2, #255
1021 120079    1292            lcall ?Wait_Milli_Seconds
1024 D002      1292            pop AR2
1026 12050E    1293            lcall Timer0A2_Init
1029 C002      1294            push AR2
102B 7A96      1294            mov R2, #150
102D 120079    1294            lcall ?Wait_Milli_Seconds
1030 D002      1294            pop AR2
1032 120414    1295            lcall Timer0D_Init
1035 C002      1296            push AR2
1037 7A96      1296            mov R2, #150
1039 120079    1296            lcall ?Wait_Milli_Seconds
103C D002      1296            pop AR2
103E 1203E2    1297            lcall Timer0C_Init
1041 C002      1298            push AR2
1043 7A96      1298            mov R2, #150
1045 120079    1298            lcall ?Wait_Milli_Seconds
1048 D002      1298            pop AR2
104A C002      1299            push AR2
104C 7AFF      1299            mov R2, #255
104E 120079    1299            lcall ?Wait_Milli_Seconds
1051 D002      1299            pop AR2
1053 C002      1300            push AR2
1055 7AFF      1300            mov R2, #255
1057 120079    1300            lcall ?Wait_Milli_Seconds
105A D002      1300            pop AR2
105C C002      1301            push AR2
105E 7AFF      1301            mov R2, #255
1060 120079    1301            lcall ?Wait_Milli_Seconds
1063 D002      1301            pop AR2
1065 C28C      1302            clr TR0
1067 C002      1303            push AR2
1069 7AFF      1303            mov R2, #255
106B 120079    1303            lcall ?Wait_Milli_Seconds
106E D002      1303            pop AR2
1070 C002      1304            push AR2
1072 7AFF      1304            mov R2, #255
1074 120079    1304            lcall ?Wait_Milli_Seconds
1077 D002      1304            pop AR2
1079 C002      1305            push AR2
107B 7AFF      1305            mov R2, #255
107D 120079    1305            lcall ?Wait_Milli_Seconds
1080 D002      1305            pop AR2
1082           1306                    
1082 20C515    1307       jb START_BUTTON, p2win_jmp1
1085 C002      1308            push AR2
1087 7A32      1308            mov R2, #50
1089 120079    1308            lcall ?Wait_Milli_Seconds
108C D002      1308            pop AR2
108E 20C509    1309       jb START_BUTTON, p2win_jmp1
1091 30C5FD    1310       jnb START_BUTTON, $
1094 02109D    1311       ljmp restart_jmp
1097           1312     
1097           1313     
1097           1314   
1097           1315            
1097           1316   p1win_jmp1:
1097 020D8D    1317       ljmp p1win
109A           1318   
109A           1319   p2win_jmp1:
109A 020F18    1320       ljmp p2win
109D           1321   
109D           1322   restart_jmp:
109D 0210A0    1323       ljmp restart_game
10A0           1324   
10A0           1325   restart_game:
10A0 754400    1326       mov p1points, #0x00
10A3 754500    1327       mov p2points, #0x00
10A6 020696    1328       ljmp MyProgram       ;goes back to MyProgram instead of start_game                   
10A9           1329       ;ljmp start_game     ;goes back to MyProgram instead of start_game                           
10A9           1330   en
