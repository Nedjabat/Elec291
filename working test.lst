                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P4.5
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   UPDOWN           equ P0.1
0000             10   
0000             11   CLK           EQU 22118400
0000             12   TIMER1_RATE   EQU 100     ; 1000Hz, for a timer tick of 1ms
0000             13   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))     ; 2100Hz Win Tone
0000             14   TIMER00_RATE   EQU 6000     ; 2100Hz Win Tone, made very high freq to check
0000             15   TIMER00_RELOAD EQU ((65536-(CLK/TIMER00_RATE))) 
0000             16   TIMER01_RATE   EQU 2000  ;2000Hz Lose Tone, made very low freq to check
0000             17   TIMER01_RELOAD EQU ((65536-(CLK/TIMER01_RATE))) ;2000Hz frequency lose frequency
0000             18   TIMER2_RATE   EQU 4200                 ;2100Hz frequency win frequency
0000             19   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             20   
0000             21   ;Music player
0000             22   ;Normal notes Octave6
0000             23   TIMER0C_RATE EQU 2093
0000             24   TIMER0C_RELOAD EQU ((65536-(CLK/TIMER0C_RATE)))
0000             25   TIMER0D_RATE EQU 2349
0000             26   TIMER0D_RELOAD EQU ((65536-(CLK/TIMER0D_RATE)))
0000             27   TIMER0E_RATE EQU 2637
0000             28   TIMER0E_RELOAD EQU ((65536-(CLK/TIMER0E_RATE)))
0000             29   TIMER0F_RATE EQU 2794
0000             30   TIMER0F_RELOAD EQU ((65536-(CLK/TIMER0F_RATE)))
0000             31   TIMER0G_RATE EQU 3136
0000             32   TIMER0G_RELOAD EQU ((65536-(CLK/TIMER0G_RATE)))
0000             33   TIMER0A_RATE EQU 3520
0000             34   TIMER0A_RELOAD EQU ((65536-(CLK/TIMER0A_RATE)))
0000             35   TIMER0B_RATE EQU 3951
0000             36   TIMER0B_RELOAD EQU ((65536-(CLK/TIMER0B_RATE)))
0000             37   ;Sharps Octave 6
0000             38   TIMER0C1_RATE EQU 2217
0000             39   TIMER0C1_RELOAD EQU ((65536-(CLK/TIMER0C1_RATE)))
0000             40   TIMER0D1_RATE EQU 2489
0000             41   TIMER0D1_RELOAD EQU ((65536-(CLK/TIMER0D1_RATE)))
0000             42   TIMER0F1_RATE EQU 2960
0000             43   TIMER0F1_RELOAD EQU ((65536-(CLK/TIMER0F1_RATE)))
0000             44   TIMER0G1_RATE EQU 3322
0000             45   TIMER0G1_RELOAD EQU ((65536-(CLK/TIMER0G1_RATE)))
0000             46   TIMER0A1_RATE EQU 3729
0000             47   TIMER0A1_RELOAD EQU ((65536-(CLK/TIMER0A1_RATE)))
0000             48   ;other Octaves
0000             49   TIMER0A2_RATE EQU 1865 ;Octave 5 A#
0000             50   TIMER0A2_RELOAD EQU ((65536-(CLK/TIMER0A2_RATE)))
0000             51   TIMER0C2_RATE EQU 262 ;Octave 3 C
0000             52   TIMER0C2_RELOAD EQU ((65536-(CLK/TIMER0C2_RATE)))
0000             53   
0000             54   
0000             55   org 0000H
0000 020696      56      ljmp MyProgram
0003             57   
000B             58   org 0x000B
000B 020540      59            ljmp Timer0_ISR
000E             60   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             61   org 0x001B
001B 02056E      62            ljmp Timer1_ISR
001E             63   
001E             64   
0030             65   DSEG at 0x30
0030             66   x:   ds 4
0034             67   y:   ds 4
0038             68   seed: ds 4  
003C             69   bcd: ds 5
0041             70   Count1ms:     ds 2 
0043             71   seconds:  ds 1 ;
0044             72   p1points: ds 1
0045             73   p2points: ds 1
0046             74   freq1: ds 4
004A             75   freq2: ds 4
004E             76   counter: ds 4
0052             77   Period_A: ds 2
0054             78   Period_B: ds 2
0056             79   bcd1: ds 5
005B             80   bcd2: ds 5
0060             81   
0000             82   BSEG
0000             83   mf: dbit 1
0001             84   p1_press: dbit 1
0002             85   p2_press: dbit 1
0003             86   second_high: dbit 1
0004             87   half_seconds_flag: dbit 1
0005             88   
001E             89   cseg
001E             90   ; These 'equ' must match the hardware wiring
001E             91   LCD_RS equ P3.2
001E             92   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             93   LCD_E  equ P3.3
001E             94   LCD_D4 equ P3.4
001E             95   LCD_D5 equ P3.5
001E             96   LCD_D6 equ P3.6
001E             97   LCD_D7 equ P3.7
001E             98   SOUND_OUT equ P1.1
001E             99   
001E            100   
001E 506C6179   101   Initial_Message:  db 'Player1:    ', 0
     6572313A
     20202020
     00
002B 506C6179   102   Initial_Message2: db 'Player2:    ', 0
     6572323A
     20202020
     00
0038            103   
0038 50313A57   104   Winner1_message1: db 'P1:Win!:D', 0
     696E213A
     4400
0042 50323A4C   105   Winner1_message2: db 'P2:Lose:P', 0
     6F73653A
     5000
004C            106   
004C 4C6F7365   107   Winner2_message1: db 'Loser:P', 0
     723A5000
0054 57696E6E   108   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
005E            109   
005E 506C6179   110   Playagain       : db 'Play   ', 0;changed for aesthetic
     20202000
0066 41676169   111   Clear_screen    : db 'Again ?', 0
     6E203F00
006E            112   
                570   $LIST
                115   $LIST
03B0            117   
03B0            118   
03B0            119   Timer00_Init:
03B0 E589       120            mov a, TMOD
03B2 54F0       121            anl a, #0xf0 ; Clear the bits for timer 0
03B4 4401       122            orl a, #0x01 ; Configure timer 0 as 16-timer
03B6 F589       123            mov TMOD, a
03B8 758CF1     124            mov TH0, #high(TIMER00_RELOAD)
03BB 758A9A     125            mov TL0, #low(TIMER00_RELOAD)
03BE            126            ; Set autoreload value
03BE 75F4F1     127            mov RH0, #high(TIMER00_RELOAD)
03C1 75F29A     128            mov RL0, #low(TIMER00_RELOAD)
03C4            129            ; Enable the timer and interrupts
03C4 D2A9       130       setb ET0  ; Enable timer 0 interrupt
03C6 D28C       131       setb TR0  ; Start timer 0
03C8 22         132            ret
03C9            133   
03C9            134   ;---------------------------------;
03C9            135   ; ISR for timer 0.  Set to execute;
03C9            136   ; every 1/4096Hz to generate a    ;
03C9            137   ; 2048 Hz square wave at pin P1.1 ;
03C9            138   ;---------------------------------;
03C9            139   
03C9            140   
03C9            141   Timer01_Init:
03C9 E589       142            mov a, TMOD
03CB 54F0       143            anl a, #0xf0 ; Clear the bits for timer 0
03CD 4401       144            orl a, #0x01 ; Configure timer 0 as 16-timer
03CF F589       145            mov TMOD, a
03D1 758CD4     146            mov TH0, #high(TIMER01_RELOAD)
03D4 758ACD     147            mov TL0, #low(TIMER01_RELOAD)
03D7            148            ; Set autoreload value
03D7 75F4D4     149            mov RH0, #high(TIMER01_RELOAD)
03DA 75F2CD     150            mov RL0, #low(TIMER01_RELOAD)
03DD            151            ; Enable the timer and interrupts
03DD D2A9       152       setb ET0  ; Enable timer 0 interrupt
03DF D28C       153       setb TR0  ; Start timer 0
03E1 22         154            ret
03E2            155            
03E2            156   
03E2            157   Timer0C_Init:
03E2 E589       158   mov a, TMOD
03E4 54F0       159   anl a, #0xf0 ; Clear the bits for timer 0
03E6 4401       160   orl a, #0x01 ; Configure timer 0 as 16-timer
03E8 F589       161   mov TMOD, a
03EA 758CD6     162   mov TH0, #high(TIMER0C_RELOAD)
03ED 758AB9     163   mov TL0, #low(TIMER0C_RELOAD)
03F0            164   ; Set autoreload value
03F0 75F4D6     165   mov RH0, #high(TIMER0C_RELOAD)
03F3 75F2B9     166   mov RL0, #low(TIMER0C_RELOAD)
03F6            167   ; Enable the timer and interrupts
03F6 D2A9       168       setb ET0  ; Enable timer 0 interrupt
03F8 D28C       169       setb TR0  ; Start timer 0
03FA 22         170   ret
03FB            171   
03FB            172   Timer0C1_Init:
03FB E589       173   mov a, TMOD
03FD 54F0       174   anl a, #0xf0 ; Clear the bits for timer 0
03FF 4401       175   orl a, #0x01 ; Configure timer 0 as 16-timer
0401 F589       176   mov TMOD, a
0403 758CD9     177   mov TH0, #high(TIMER0C1_RELOAD)
0406 758A08     178   mov TL0, #low(TIMER0C1_RELOAD)
0409            179   ; Set autoreload value
0409 75F4D9     180   mov RH0, #high(TIMER0C1_RELOAD)
040C 75F208     181   mov RL0, #low(TIMER0C1_RELOAD)
040F            182   ; Enable the timer and interrupts
040F D2A9       183       setb ET0  ; Enable timer 0 interrupt
0411 D28C       184       setb TR0  ; Start timer 0
0413 22         185   ret
0414            186   
0414            187   Timer0D_Init:
0414 E589       188   mov a, TMOD
0416 54F0       189   anl a, #0xf0 ; Clear the bits for timer 0
0418 4401       190   orl a, #0x01 ; Configure timer 0 as 16-timer
041A F589       191   mov TMOD, a
041C 758CDB     192   mov TH0, #high(TIMER0D_RELOAD)
041F 758A38     193   mov TL0, #low(TIMER0D_RELOAD)
0422            194   ; Set autoreload value
0422 75F4DB     195   mov RH0, #high(TIMER0D_RELOAD)
0425 75F238     196   mov RL0, #low(TIMER0D_RELOAD)
0428            197   ; Enable the timer and interrupts
0428 D2A9       198       setb ET0  ; Enable timer 0 interrupt
042A D28C       199       setb TR0  ; Start timer 0
042C 22         200   ret
042D            201   
042D            202   
042D            203   Timer0D1_Init:
042D E589       204   mov a, TMOD
042F 54F0       205   anl a, #0xf0 ; Clear the bits for timer 0
0431 4401       206   orl a, #0x01 ; Configure timer 0 as 16-timer
0433 F589       207   mov TMOD, a
0435 758CDD     208   mov TH0, #high(TIMER0D1_RELOAD)
0438 758A4A     209   mov TL0, #low(TIMER0D1_RELOAD)
043B            210   ; Set autoreload value
043B 75F4DD     211   mov RH0, #high(TIMER0D1_RELOAD)
043E 75F24A     212   mov RL0, #low(TIMER0D1_RELOAD)
0441            213   ; Enable the timer and interrupts
0441 D2A9       214       setb ET0  ; Enable timer 0 interrupt
0443 D28C       215       setb TR0  ; Start timer 0
0445 22         216   ret
0446            217   Timer0E_Init:
0446 E589       218   mov a, TMOD
0448 54F0       219   anl a, #0xf0 ; Clear the bits for timer 0
044A 4401       220   orl a, #0x01 ; Configure timer 0 as 16-timer
044C F589       221   mov TMOD, a
044E 758CDF     222   mov TH0, #high(TIMER0E_RELOAD)
0451 758A3D     223   mov TL0, #low(TIMER0E_RELOAD)
0454            224   ; Set autoreload value
0454 75F4DF     225   mov RH0, #high(TIMER0E_RELOAD)
0457 75F23D     226   mov RL0, #low(TIMER0E_RELOAD)
045A            227   ; Enable the timer and interrupts
045A D2A9       228       setb ET0  ; Enable timer 0 interrupt
045C D28C       229       setb TR0  ; Start timer 0
045E 22         230   ret
045F            231   
045F            232   Timer0F_Init:
045F E589       233   mov a, TMOD
0461 54F0       234   anl a, #0xf0 ; Clear the bits for timer 0
0463 4401       235   orl a, #0x01 ; Configure timer 0 as 16-timer
0465 F589       236   mov TMOD, a
0467 758CE1     237   mov TH0, #high(TIMER0F_RELOAD)
046A 758A14     238   mov TL0, #low(TIMER0F_RELOAD)
046D            239   ; Set autoreload value
046D 75F4E1     240   mov RH0, #high(TIMER0F_RELOAD)
0470 75F214     241   mov RL0, #low(TIMER0F_RELOAD)
0473            242   ; Enable the timer and interrupts
0473 D2A9       243       setb ET0  ; Enable timer 0 interrupt
0475 D28C       244       setb TR0  ; Start timer 0
0477 22         245   ret
0478            246   
0478            247   Timer0F1_Init:
0478 E589       248   mov a, TMOD
047A 54F0       249   anl a, #0xf0 ; Clear the bits for timer 0
047C 4401       250   orl a, #0x01 ; Configure timer 0 as 16-timer
047E F589       251   mov TMOD, a
0480 758CE2     252   mov TH0, #high(TIMER0F1_RELOAD)
0483 758AD0     253   mov TL0, #low(TIMER0F1_RELOAD)
0486            254   ; Set autoreload value
0486 75F4E2     255   mov RH0, #high(TIMER0F1_RELOAD)
0489 75F2D0     256   mov RL0, #low(TIMER0F1_RELOAD)
048C            257   ; Enable the timer and interrupts
048C D2A9       258       setb ET0  ; Enable timer 0 interrupt
048E D28C       259       setb TR0  ; Start timer 0
0490 22         260   ret
0491            261   
0491            262   Timer0G_Init:
0491 E589       263   mov a, TMOD
0493 54F0       264   anl a, #0xf0 ; Clear the bits for timer 0
0495 4401       265   orl a, #0x01 ; Configure timer 0 as 16-timer
0497 F589       266   mov TMOD, a
0499 758CE4     267   mov TH0, #high(TIMER0G_RELOAD)
049C 758A73     268   mov TL0, #low(TIMER0G_RELOAD)
049F            269   ; Set autoreload value
049F 75F4E4     270   mov RH0, #high(TIMER0G_RELOAD)
04A2 75F273     271   mov RL0, #low(TIMER0G_RELOAD)
04A5            272   ; Enable the timer and interrupts
04A5 D2A9       273       setb ET0  ; Enable timer 0 interrupt
04A7 D28C       274       setb TR0  ; Start timer 0
04A9 22         275   ret
04AA            276   
04AA            277   Timer0G1_Init:
04AA E589       278   mov a, TMOD
04AC 54F0       279   anl a, #0xf0 ; Clear the bits for timer 0
04AE 4401       280   orl a, #0x01 ; Configure timer 0 as 16-timer
04B0 F589       281   mov TMOD, a
04B2 758CE5     282   mov TH0, #high(TIMER0G1_RELOAD)
04B5 758AFE     283   mov TL0, #low(TIMER0G1_RELOAD)
04B8            284   ; Set autoreload value
04B8 75F4E5     285   mov RH0, #high(TIMER0G1_RELOAD)
04BB 75F2FE     286   mov RL0, #low(TIMER0G1_RELOAD)
04BE            287   ; Enable the timer and interrupts
04BE D2A9       288       setb ET0  ; Enable timer 0 interrupt
04C0 D28C       289       setb TR0  ; Start timer 0
04C2 22         290   ret
04C3            291   
04C3            292   Timer0A_Init:
04C3 E589       293   mov a, TMOD
04C5 54F0       294   anl a, #0xf0 ; Clear the bits for timer 0
04C7 4401       295   orl a, #0x01 ; Configure timer 0 as 16-timer
04C9 F589       296   mov TMOD, a
04CB 758CE7     297   mov TH0, #high(TIMER0A_RELOAD)
04CE 758A75     298   mov TL0, #low(TIMER0A_RELOAD)
04D1            299   ; Set autoreload value
04D1 75F4E7     300   mov RH0, #high(TIMER0A_RELOAD)
04D4 75F275     301   mov RL0, #low(TIMER0A_RELOAD)
04D7            302   ; Enable the timer and interrupts
04D7 D2A9       303       setb ET0  ; Enable timer 0 interrupt
04D9 D28C       304       setb TR0  ; Start timer 0
04DB 22         305   ret
04DC            306   
04DC            307   Timer0A1_Init:
04DC E589       308   mov a, TMOD
04DE 54F0       309   anl a, #0xf0 ; Clear the bits for timer 0
04E0 4401       310   orl a, #0x01 ; Configure timer 0 as 16-timer
04E2 F589       311   mov TMOD, a
04E4 758CE8     312   mov TH0, #high(TIMER0A1_RELOAD)
04E7 758AD5     313   mov TL0, #low(TIMER0A1_RELOAD)
04EA            314   ; Set autoreload value
04EA 75F4E8     315   mov RH0, #high(TIMER0A1_RELOAD)
04ED 75F2D5     316   mov RL0, #low(TIMER0A1_RELOAD)
04F0            317   ; Enable the timer and interrupts
04F0 D2A9       318       setb ET0  ; Enable timer 0 interrupt
04F2 D28C       319       setb TR0  ; Start timer 0
04F4 22         320   ret
04F5            321   
04F5            322   Timer0B_Init:
04F5 E589       323   mov a, TMOD
04F7 54F0       324   anl a, #0xf0 ; Clear the bits for timer 0
04F9 4401       325   orl a, #0x01 ; Configure timer 0 as 16-timer
04FB F589       326   mov TMOD, a
04FD 758CEA     327   mov TH0, #high(TIMER0B_RELOAD)
0500 758A22     328   mov TL0, #low(TIMER0B_RELOAD)
0503            329   ; Set autoreload value
0503 75F4EA     330   mov RH0, #high(TIMER0B_RELOAD)
0506 75F222     331   mov RL0, #low(TIMER0B_RELOAD)
0509            332   ; Enable the timer and interrupts
0509 D2A9       333       setb ET0  ; Enable timer 0 interrupt
050B D28C       334       setb TR0  ; Start timer 0
050D 22         335   ret
050E            336   
050E            337   Timer0A2_Init:
050E E589       338   mov a, TMOD
0510 54F0       339   anl a, #0xf0 ; Clear the bits for timer 0
0512 4401       340   orl a, #0x01 ; Configure timer 0 as 16-timer
0514 F589       341   mov TMOD, a
0516 758CD1     342   mov TH0, #high(TIMER0A2_RELOAD)
0519 758AAD     343   mov TL0, #low(TIMER0A2_RELOAD)
051C            344   ; Set autoreload value
051C 75F4D1     345   mov RH0, #high(TIMER0A2_RELOAD)
051F 75F2AD     346   mov RL0, #low(TIMER0A2_RELOAD)
0522            347   ; Enable the timer and interrupts
0522 D2A9       348       setb ET0  ; Enable timer 0 interrupt
0524 D28C       349       setb TR0  ; Start timer 0
0526 22         350   ret
0527            351   
0527            352   Timer0C2_Init:
0527 E589       353   mov a, TMOD
0529 54F0       354   anl a, #0xf0 ; Clear the bits for timer 0
052B 4401       355   orl a, #0x01 ; Configure timer 0 as 16-timer
052D F589       356   mov TMOD, a
052F 758CB7     357   mov TH0, #high(TIMER0C2_RELOAD)
0532 758A3B     358   mov TL0, #low(TIMER0C2_RELOAD)
0535            359   ; Set autoreload value
0535 75F4B7     360   mov RH0, #high(TIMER0C2_RELOAD)
0538 75F23B     361   mov RL0, #low(TIMER0C2_RELOAD)
053B            362   ; Enable the timer and interrupts
053B D2A9       363       setb ET0  ; Enable timer 0 interrupt
053D D28C       364       setb TR0  ; Start timer 0
053F 22         365   ret
0540            366   
0540            367   
0540            368   
0540            369   Timer0_ISR:
0540 C28D       370            clr TF0  ; According to the data sheet this is done for us already.
0542 B291       371            cpl SOUND_OUT ; Connect speaker to P1.1!
0544 32         372            reti
0545            373            
0545            374   Timer2_Init:
0545            375   
0545 75C800     376            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0548 75CDEB     377            mov TH2, #high(TIMER2_RELOAD)
054B 75CC6E     378            mov TL2, #low(TIMER2_RELOAD)
054E            379            ; Set the reload value
054E 75CBEB     380            mov RCAP2H, #high(TIMER2_RELOAD)
0551 75CA6E     381            mov RCAP2L, #low(TIMER2_RELOAD)
0554            382            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0554 E4         383            clr a
0555 F541       384            mov Count1ms+0, a
0557 F542       385            mov Count1ms+1, a
0559            386            ; Enable the timer and interrupts
0559 D2AD       387       setb ET2  ; Enable timer 2 interrupt
055B D2CA       388       setb TR2  ; Enable timer 2
055D 22         389            ret
055E            390   
055E            391   
055E            392   ;---------------------------------;
055E            393   ; ISR for timer 2                 ;
055E            394   ;---------------------------------;
055E            395   Timer1_Init:
055E            396   
055E 758DA0     397            mov TH1, #high(TIMER1_RELOAD)
0561 758B00     398            mov TL1, #low(TIMER1_RELOAD)
0564            399            ; Set the reload value
0564            400            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0564 E4         401            clr a
0565 F541       402            mov Count1ms+0, a
0567 F542       403            mov Count1ms+1, a
0569            404            ; Enable the timer and interrupts
0569 D2AB       405       setb ET1  ; Enable timer 2 interrupt
056B D28E       406       setb TR1  ; Enable timer 2
056D 22         407            ret
056E            408   
056E            409   ;---------------------------------;
056E            410   ; ISR for timer 2                 ;
056E            411   ;---------------------------------;
056E            412   Timer1_ISR:
056E C28F       413            clr TF1  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0570            414            
0570            415            ; The two registers used in the ISR must be saved in the stack
0570 C0E0       416            push acc
0572 C0D0       417            push psw
0574            418            
0574            419            ; Increment the 16-bit one mili second counter
0574 0541       420            inc Count1ms+0    ; Increment the low 8-bits first
0576 E541       421            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0578 7002       422            jnz Inc_Done
057A 0542       423            inc Count1ms+1
057C            424   Inc_Done:
057C            425            ; Check if half second has passed
057C E541       426            mov a, Count1ms+0
057E B4E824     427            cjne a, #low(1000), Timer1_ISR_done ; Warning: this instruction changes the carry flag!
0581 E542       428            mov a, Count1ms+1
0583 B4031F     429            cjne a, #high(1000), Timer1_ISR_done
0586            430            
0586            431            ; 500 milliseconds have passed.  Set a flag so the main program knows
0586 D204       432            setb half_seconds_flag ; Let the main program know half second had passed
0588 B28C       433            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
058A            434            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
058A E4         435            clr a
058B F541       436            mov Count1ms+0, a
058D F542       437            mov Count1ms+1, a
058F            438            ; Increment the BCD counter
058F E543       439            mov a, seconds
0591 308104     440            jnb UPDOWN, Timer1_ISR_decrement
0594 2401       441            add a, #0x01
0596 8002       442            sjmp Timer1_ISR_da
0598            443   Timer1_ISR_decrement:
0598 2499       444            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
059A            445   Timer1_ISR_da:
059A D4         446            da a ; Decimal adjust instruction.  Check datasheet for more details!
059B F543       447            mov seconds, a
059D B46005     448       cjne a, #0x60, Timer1_ISR_done
05A0 D203       449       setb second_high
05A2 E4         450       clr a
05A3 F543       451       mov seconds, a
05A5            452   Timer1_ISR_done:
05A5 D0D0       453            pop psw
05A7 D0E0       454            pop acc
05A9 32         455            reti
05AA            456   ;---------------------------------;
05AA            457   ; ISR for timer 0.  Set to execute;
05AA            458   ; every 1/4096Hz to generate a    ;
05AA            459   ; 2048 Hz square wave at pin P1.1 ;
05AA            460   ;---------------------------------;
05AA            461   ; When using a 22.1184MHz crystal in fast mode
05AA            462   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
05AA            463   ; (tuned manually to get as close to 1s as possible)
05AA            464   Wait1s:
05AA 7AB0       465       mov R2, #176
05AC 79FA       466   X3: mov R1, #250
05AE 78A6       467   X2: mov R0, #166
05B0 D8FE       468   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
05B2 D9FA       469       djnz R1, X2 ; 22.51519us*250=5.629ms
05B4 DAF6       470       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
05B6 22         471       ret
05B7            472   
05B7            473   ;Initializes timer/counter 2 as a 16-bit counter
05B7            474   InitTimer2:
05B7 75C800     475            mov T2CON, #0b_0000_0000 ; Stop timer/counter.  Set as counter (clock input is pin T2).
05BA            476            ; Set the reload value on overflow to zero (just in case is not zero)
05BA 75CB00     477            mov RCAP2H, #0
05BD 75CA00     478            mov RCAP2L, #0
05C0 D2A0       479       setb P2.0 ; Pin is used as input
05C2 D2A1       480       setb P2.1  ; P1.0 is connected to T2.  Make sure it can be used as input.
05C4 22         481       ret
05C5            482   
05C5            483   
05C5            484   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
05C5            485   
05C5            486   hex2bcd1:
05C5 E4         487            clr a
05C6 7800       488       mov R0, #0  ;Set BCD result to 00000000 
05C8 7900       489       mov R1, #0
05CA 7A00       490       mov R2, #0
05CC 7B10       491       mov R3, #16 ;Loop counter.
05CE            492   
05CE            493   hex2bcd_loop1:
05CE E5CC       494       mov a, TL2 ;Shift TH0-TL0 left through carry
05D0 33         495       rlc a
05D1 F5CC       496       mov TL2, a
05D3            497       
05D3 E5CD       498       mov a, TH2
05D5 33         499       rlc a
05D6 F5CD       500       mov TH2, a
05D8            501         
05D8            502            ; Perform bcd + bcd + carry
05D8            503            ; using BCD numbers
05D8 E8         504            mov a, R0
05D9 38         505            addc a, R0
05DA D4         506            da a
05DB F8         507            mov R0, a
05DC            508            
05DC E9         509            mov a, R1
05DD 39         510            addc a, R1
05DE D4         511            da a
05DF F9         512            mov R1, a
05E0            513            
05E0 EA         514            mov a, R2
05E1 3A         515            addc a, R2
05E2 D4         516            da a
05E3 FA         517            mov R2, a
05E4            518            
05E4 DBE8       519            djnz R3, hex2bcd_loop1
05E6 22         520            ret
05E7            521   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
05E7            522   DisplayBCD_LCD:
05E7            523            ; 5th digit:
05E7 EA         524       mov a, R2
05E8 540F       525       anl a, #0FH
05EA 4430       526       orl a, #'0' ; convert to ASCII
05EC 1200BE     527            lcall ?WriteData
05EF            528            ; 4th digit:
05EF E9         529       mov a, R1
05F0 C4         530       swap a
05F1 540F       531       anl a, #0FH
05F3 4430       532       orl a, #'0' ; convert to ASCII
05F5 1200BE     533            lcall ?WriteData
05F8            534            ; 3rd digit:
05F8 E9         535       mov a, R1
05F9 540F       536       anl a, #0FH
05FB 4430       537       orl a, #'0' ; convert to ASCII
05FD 1200BE     538            lcall ?WriteData
0600            539            ; 2nd digit:
0600 E8         540       mov a, R0
0601 C4         541       swap a
0602 540F       542       anl a, #0FH
0604 4430       543       orl a, #'0' ; convert to ASCII
0606 1200BE     544            lcall ?WriteData
0609            545            ; 1st digit:
0609 E8         546       mov a, R0
060A 540F       547       anl a, #0FH
060C 4430       548       orl a, #'0' ; convert to ASCII
060E 1200BE     549            lcall ?WriteData
0611            550       
0611 22         551       ret
0612            552   
0612            553   random:
0612 853830     554       mov x+0, seed+0
0615 853931     555       mov x+1, seed+1
0618 853A32     556       mov x+2, seed+2
061B 853B33     557       mov x+3, seed+3
061E 7534FD     558            mov y+0, #low (214013 % 0x10000) 
0621 753543     558            mov y+1, #high(214013 % 0x10000) 
0624 753603     558            mov y+2, #low (214013 / 0x10000) 
0627 753700     558            mov y+3, #high(214013 / 0x10000) 
062A 120294     559       lcall mul32
062D 753443     560            mov y+0, #low (2451011 % 0x10000) 
0630 753566     560            mov y+1, #high(2451011 % 0x10000) 
0633 753625     560            mov y+2, #low (2451011 / 0x10000) 
0636 753700     560            mov y+3, #high(2451011 / 0x10000) 
0639 1201DF     561       lcall add32
063C 853038     562       mov seed+0, x+0
063F 853139     563       mov seed+1, x+1
0642 85323A     564       mov seed+2, x+2
0645 85333B     565       mov seed+3, x+3
0648 22         566       ret
0649            567   
0649            568   wait_random:
0649 C002       569            push AR2
064B AA38       569            mov R2, seed+0
064D 120079     569            lcall ?Wait_Milli_Seconds
0650 D002       569            pop AR2
0652 C002       570            push AR2
0654 AA39       570            mov R2, seed+1
0656 120079     570            lcall ?Wait_Milli_Seconds
0659 D002       570            pop AR2
065B C002       571            push AR2
065D AA3A       571            mov R2, seed+2
065F 120079     571            lcall ?Wait_Milli_Seconds
0662 D002       571            pop AR2
0664 C002       572            push AR2
0666 AA3B       572            mov R2, seed+3
0668 120079     572            lcall ?Wait_Milli_Seconds
066B D002       572            pop AR2
066D 22         573       ret
066E            574   
066E            575   movtox:
066E            576            ; 5th digit:
066E EA         577       mov a, R2
066F 540F       578       anl a, #0FH
0671 4430       579       orl a, #'0' ; convert to ASCII
0673 754000     580       mov bcd+4, #0
0676 753F00     581       mov bcd+3, #0
0679 8A3E       582       mov bcd+2, R2
067B            583            ;lcall ?WriteData
067B            584            ; 4th digit:
067B E9         585       mov a, R1
067C C4         586       swap a
067D 540F       587       anl a, #0FH
067F 4430       588       orl a, #'0' ; convert to ASCII
0681            589            ;lcall ?WriteData
0681            590            ; 3rd digit:
0681 E9         591       mov a, R1
0682 540F       592       anl a, #0FH
0684 4430       593       orl a, #'0' ; convert to ASCII
0686 893D       594       mov bcd+1, R1
0688            595            ;lcall ?WriteData
0688            596            ; 2nd digit:
0688 E8         597       mov a, R0
0689 C4         598       swap a
068A 540F       599       anl a, #0FH
068C 4430       600       orl a, #'0' ; convert to ASCII
068E            601       
068E            602            ;lcall ?WriteData
068E            603            ; 1st digit:
068E E8         604       mov a, R0
068F 540F       605       anl a, #0FH
0691 4430       606       orl a, #'0' ; convert to ASCII
0693 883C       607       mov bcd+0, R0
0695            608            ;lcall ?WriteData
0695            609       
0695 22         610       ret
0696            611   ;---------------------------------;
0696            612   ; Hardware initialization         ;
0696            613   ;---------------------------------;
0696            614   
0696            615   ;---------------------------------;
0696            616   ; Main program loop               ;
0696            617   ;---------------------------------;
0696            618   MyProgram:
0696            619       ; Initialize the hardware:
0696 75817F     620       mov SP, #7FH
0699 1205B7     621       lcall InitTimer2
069C 1200C8     622       lcall LCD_4BIT
069F 12055E     623       lcall Timer1_Init
06A2 C0E0       624            push acc
06A4 7401       624            mov a, #1
06A6 14         624            dec a
06A7 1200FF     624            lcall ?Set_Cursor_1 ; Select column and row
06AA D0E0       624            pop acc
06AC C083       625            push dph
06AE C082       625            push dpl
06B0 C0E0       625            push acc
06B2 90001E     625            mov dptr, #Initial_Message
06B5 1200F2     625            lcall ?Send_Constant_String
06B8 D0E0       625            pop acc
06BA D082       625            pop dpl
06BC D083       625            pop dph
06BE C0E0       626            push acc
06C0 7401       626            mov a, #1
06C2 14         626            dec a
06C3 1200FD     626            lcall ?Set_Cursor_2 ; Select column and row
06C6 D0E0       626            pop acc
06C8 C083       627            push dph
06CA C082       627            push dpl
06CC C0E0       627            push acc
06CE 90002B     627            mov dptr, #Initial_Message2
06D1 1200F2     627            lcall ?Send_Constant_String
06D4 D0E0       627            pop acc
06D6 D082       627            pop dpl
06D8 D083       627            pop dph
06DA D2AF       628       setb EA
06DC D28C       629       setb TR0
06DE D2CA       630       setb TR2;random number
06E0 D204       631       setb half_seconds_flag
06E2 20C5FD     632       jb P4.5, $
06E5 85CD38     633       mov seed+0, TH2
06E8 753901     634       mov seed+1, #0x01
06EB 753A87     635       mov seed+2, #0x87
06EE 85CC3B     636       mov seed+3, TL2
06F1 C2CA       637       clr TR2
06F3 754400     638       mov p1points, #0x00
06F6 754500     639       mov p2points, #0x00
06F9            640       
06F9            641   forever:
06F9            642       ; Measure the frequency applied to pin T2
06F9            643       ; Measure the period applied to pin P2.0
06F9 C2CA       644       clr TR2 ; Stop counter 2
06FB 75CC00     645       mov TL2, #0
06FE 75CD00     646       mov TH2, #0
0701 20A0FD     647       jb P2.0, $
0704 30A0FD     648       jnb P2.0, $
0707 D2CA       649       setb TR2 ; Start counter 0
0709 20A0FD     650       jb P2.0, $
070C 30A0FD     651       jnb P2.0, $
070F C2CA       652       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0711            653       ; save the period of P2.0 for later use
0711            654            ; Convert the result to BCD and display on LCD
0711 C0E0       655            push acc
0713 740C       655            mov a, #12
0715 14         655            dec a
0716 1200FF     655            lcall ?Set_Cursor_1 ; Select column and row
0719 D0E0       655            pop acc
071B 1205C5     656            lcall hex2bcd1
071E            657       ;lcall DisplayBCD_LCD
071E            658       
071E            659       ; Measure the period applied to pin P2.1
071E C2CA       660       clr TR2 ; Stop counter 2
0720 75CC00     661       mov TL2, #0
0723 75CD00     662       mov TH2, #0
0726 20A1FD     663       jb P2.1, $
0729 30A1FD     664       jnb P2.1, $
072C D2CA       665       setb TR2 ; Start counter 0
072E 20A1FD     666       jb P2.1, $
0731 30A1FD     667       jnb P2.1, $
0734 C2CA       668       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0736            669       ; save the period of P2.1 for later use
0736            670            ; Convert the result to BCD and display on LCD
0736 C0E0       671            push acc
0738 740C       671            mov a, #12
073A 14         671            dec a
073B 1200FD     671            lcall ?Set_Cursor_2 ; Select column and row
073E D0E0       671            pop acc
0740 1205C5     672            lcall hex2bcd1
0743            673      ; lcall DisplayBCD_LCD
0743            674            ; Convert the result to BCD and display on LCD
0743 0207E1     675            ljmp start_game
0746 0206F9     676       ljmp forever ;  Repeat! 
0749            677   
0749            678   forever1:
0749 C0E0       679            push acc
074B 7409       679            mov a, #9
074D 14         679            dec a
074E 1200FF     679            lcall ?Set_Cursor_1 ; Select column and row
0751 D0E0       679            pop acc
0753 C000       680            push ar0
0755 A844       680            mov r0, p1points
0757 120104     680            lcall ?Display_BCD
075A D000       680            pop ar0
075C C0E0       681            push acc
075E 7409       681            mov a, #9
0760 14         681            dec a
0761 1200FD     681            lcall ?Set_Cursor_2 ; Select column and row
0764 D0E0       681            pop acc
0766 C000       682            push ar0
0768 A845       682            mov r0, p2points
076A 120104     682            lcall ?Display_BCD
076D D000       682            pop ar0
076F            683       ; Measure the period applied to pin P2.0
076F C2CA       684       clr TR2 ; Stop counter 2
0771 75CC00     685       mov TL2, #0
0774 75CD00     686       mov TH2, #0
0777 20A0FD     687       jb P2.0, $
077A 30A0FD     688       jnb P2.0, $
077D D2CA       689       setb TR2 ; Start counter 0
077F 20A0FD     690       jb P2.0, $
0782 30A0FD     691       jnb P2.0, $
0785 C2CA       692       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0787            693       ; save the period of P2.0 for later use
0787            694            ; Convert the result to BCD and display on LCD
0787 C0E0       695            push acc
0789 740C       695            mov a, #12
078B 14         695            dec a
078C 1200FF     695            lcall ?Set_Cursor_1 ; Select column and row
078F D0E0       695            pop acc
0791 1205C5     696            lcall hex2bcd1
0794            697       ;lcall DisplayBCD_LCD
0794 22         698       ret
0795            699   forever2:
0795 C0E0       700            push acc
0797 7409       700            mov a, #9
0799 14         700            dec a
079A 1200FF     700            lcall ?Set_Cursor_1 ; Select column and row
079D D0E0       700            pop acc
079F C000       701            push ar0
07A1 A844       701            mov r0, p1points
07A3 120104     701            lcall ?Display_BCD
07A6 D000       701            pop ar0
07A8 C0E0       702            push acc
07AA 7409       702            mov a, #9
07AC 14         702            dec a
07AD 1200FD     702            lcall ?Set_Cursor_2 ; Select column and row
07B0 D0E0       702            pop acc
07B2 C000       703            push ar0
07B4 A845       703            mov r0, p2points
07B6 120104     703            lcall ?Display_BCD
07B9 D000       703            pop ar0
07BB            704       ; Measure the period applied to pin P2.1
07BB C2CA       705       clr TR2 ; Stop counter 2
07BD 75CC00     706       mov TL2, #0
07C0 75CD00     707       mov TH2, #0
07C3 20A1FD     708       jb P2.1, $
07C6 30A1FD     709       jnb P2.1, $
07C9 D2CA       710       setb TR2 ; Start counter 0
07CB 20A1FD     711       jb P2.1, $
07CE 30A1FD     712       jnb P2.1, $
07D1 C2CA       713       clr TR2 ; Stop counter 2, TH2-TL2 has the period
07D3            714       ; save the period of P2.1 for later use
07D3            715            ; Convert the result to BCD and display on LCD
07D3 C0E0       716            push acc
07D5 740C       716            mov a, #12
07D7 14         716            dec a
07D8 1200FD     716            lcall ?Set_Cursor_2 ; Select column and row
07DB D0E0       716            pop acc
07DD 1205C5     717            lcall hex2bcd1
07E0            718       ;lcall DisplayBCD_LCD
07E0 22         719       ret
07E1            720   start_game:
07E1 D201       721       setb p1_press
07E3 D202       722       setb p2_press 
07E5            723       ;Set_Cursor(1, 1)
07E5            724       ;Send_Constant_String(#Initial_Message);put initial message here too
07E5            725       ;Set_Cursor(2, 1)
07E5            726       ;Send_Constant_String(#Initial_Message2)     
07E5 C0E0       727            push acc
07E7 7401       727            mov a, #1
07E9 14         727            dec a
07EA 1200FF     727            lcall ?Set_Cursor_1 ; Select column and row
07ED D0E0       727            pop acc
07EF C083       728            push dph
07F1 C082       728            push dpl
07F3 C0E0       728            push acc
07F5 90001E     728            mov dptr, #Initial_Message
07F8 1200F2     728            lcall ?Send_Constant_String
07FB D0E0       728            pop acc
07FD D082       728            pop dpl
07FF D083       728            pop dph;put initial message here too
0801 C0E0       729            push acc
0803 7401       729            mov a, #1
0805 14         729            dec a
0806 1200FD     729            lcall ?Set_Cursor_2 ; Select column and row
0809 D0E0       729            pop acc
080B C083       730            push dph
080D C082       730            push dpl
080F C0E0       730            push acc
0811 90002B     730            mov dptr, #Initial_Message2
0814 1200F2     730            lcall ?Send_Constant_String
0817 D0E0       730            pop acc
0819 D082       730            pop dpl
081B D083       730            pop dph         
081D C0E0       731            push acc
081F 7409       731            mov a, #9
0821 14         731            dec a
0822 1200FF     731            lcall ?Set_Cursor_1 ; Select column and row
0825 D0E0       731            pop acc
0827 C000       732            push ar0
0829 A844       732            mov r0, p1points
082B 120104     732            lcall ?Display_BCD
082E D000       732            pop ar0
0830 C0E0       733            push acc
0832 7409       733            mov a, #9
0834 14         733            dec a
0835 1200FD     733            lcall ?Set_Cursor_2 ; Select column and row
0838 D0E0       733            pop acc
083A C000       734            push ar0
083C A845       734            mov r0, p2points
083E 120104     734            lcall ?Display_BCD
0841 D000       734            pop ar0  
0843            735            ;Set_Cursor(1, 12) ;period? for visibility
0843            736            ;lcall hex2bcd1
0843            737            ;Set_Cursor(2, 12)
0843            738            ;lcall hex2bcd1
0843 C28C       739            clr TR0
0845 C28E       740            clr TR1
0847 120612     741       lcall random
084A 120649     742       lcall wait_random
084D E539       743       mov a, seed+1
084F A2E3       744       mov c, acc.3
0851            745       ;mov HLbit, c
0851 4024       746       jc win_tone
0853 020856     747       ljmp lose_tone
0856            748   
0856            749   ;figure out how to make it wait few seconds and then skip if none of the players pushes
0856            750   
0856            751   lose_tone:
0856 1203C9     752       lcall Timer01_Init
0859 C002       753            push AR2
085B 7AFF       753            mov R2, #255
085D 120079     753            lcall ?Wait_Milli_Seconds
0860 D002       753            pop AR2
0862 C002       754            push AR2
0864 7AFF       754            mov R2, #255
0866 120079     754            lcall ?Wait_Milli_Seconds
0869 D002       754            pop AR2
086B C002       755            push AR2
086D 7AFF       755            mov R2, #255
086F 120079     755            lcall ?Wait_Milli_Seconds
0872 D002       755            pop AR2
0874 020949     756       ljmp start_game_nohit1
0877            757   win_tone: 
0877 1203B0     758       lcall Timer00_Init
087A C002       759            push AR2
087C 7AFF       759            mov R2, #255
087E 120079     759            lcall ?Wait_Milli_Seconds
0881 D002       759            pop AR2
0883 C002       760            push AR2
0885 7AFF       760            mov R2, #255
0887 120079     760            lcall ?Wait_Milli_Seconds
088A D002       760            pop AR2
088C C002       761            push AR2
088E 7AFF       761            mov R2, #255
0890 120079     761            lcall ?Wait_Milli_Seconds
0893 D002       761            pop AR2
0895 0208E0     762       ljmp start_game_hit1
0898            763       
0898            764   checkfreq1:
0898 753425     765            mov y+0, #low (4645 % 0x10000) 
089B 753512     765            mov y+1, #high(4645 % 0x10000) 
089E 753600     765            mov y+2, #low (4645 / 0x10000) 
08A1 753700     765            mov y+3, #high(4645 / 0x10000) 
08A4 753464     766            mov y+0, #low (100 % 0x10000) 
08A7 753500     766            mov y+1, #high(100 % 0x10000) 
08AA 753600     766            mov y+2, #low (100 / 0x10000) 
08AD 753700     766            mov y+3, #high(100 / 0x10000) ;change made for my sensor
08B0 120280     767       lcall x_gteq_y
08B3 100003     768       jbc mf, freq1_nopress
08B6 D201       769       setb p1_press
08B8 22         770       ret
08B9            771   
08B9            772   freq1_nopress:
08B9 C201       773       clr p1_press
08BB 22         774       ret
08BC            775   
08BC            776   checkfreq2:
08BC 75342A     777            mov y+0, #low (4650 % 0x10000) 
08BF 753512     777            mov y+1, #high(4650 % 0x10000) 
08C2 753600     777            mov y+2, #low (4650 / 0x10000) 
08C5 753700     777            mov y+3, #high(4650 / 0x10000) 
08C8 753464     778            mov y+0, #low (100 % 0x10000) 
08CB 753500     778            mov y+1, #high(100 % 0x10000) 
08CE 753600     778            mov y+2, #low (100 / 0x10000) 
08D1 753700     778            mov y+3, #high(100 / 0x10000) ;change made for my sensor
08D4 120280     779       lcall x_gteq_y
08D7 100003     780       jbc mf, freq2_press
08DA D202       781       setb p2_press
08DC 22         782       ret
08DD            783   
08DD            784   freq2_press:
08DD C202       785       clr p2_press
08DF 22         786       ret
08E0            787   
08E0            788   start_game_hit1:
08E0 120749     789       lcall forever1
08E3 12066E     790       lcall movtox
08E6 1201A3     791       lcall bcd2hex
08E9 120898     792       lcall checkfreq1
08EC 12011A     793       lcall hex2bcd
08EF 1205E7     794       lcall DisplayBCD_LCD
08F2 10011E     795       jbc p1_press, start_game_hit2
08F5 C28E       796       clr TR1
08F7 E4         797       clr a 
08F8 E544       798       mov a, p1points
08FA 2401       799       add a, #0x01
08FC F544       800       mov p1points, a
08FE B4053E     801       cjne a, #0x05, start_jmp1
0901 E4         802       clr a
0902 D201       803       setb p1_press
0904 D202       804       setb p2_press
0906 020909     805       ljmp p1win_jmp
0909            806   
0909            807   p1win_jmp:
0909 D201       808       setb p1_press
090B D202       809       setb p2_press
090D 020BB9     810       ljmp p1win
0910            811   checkfreq1_jmp:
0910 020898     812       ljmp checkfreq1
0913            813   start_game_hit2:
0913 120795     814       lcall forever2
0916 12066E     815       lcall movtox
0919 1201A3     816       lcall bcd2hex
091C 1208BC     817       lcall checkfreq2
091F 12011A     818       lcall hex2bcd
0922 1205E7     819       lcall DisplayBCD_LCD
0925 1002B8     820       jbc p2_press, start_game_hit1
0928 C28E       821       clr TR1
092A E4         822       clr a 
092B E545       823       mov a, p2points
092D 2401       824       add a, #0x01
092F F545       825       mov p2points, a
0931 B4050B     826       cjne a, #0x05, start_jmp1
0934 D201       827       setb p1_press
0936 D202       828       setb p2_press
0938 E4         829       clr a
0939 020942     830       ljmp p2win_jmp
093C            831   start_game_hit1_jmp:
093C 0208E0     832            ljmp start_game_hit1
093F            833            
093F            834   start_jmp1:
093F 0207E1     835       ljmp start_game
0942            836   
0942            837   p2win_jmp:
0942 D201       838       setb p1_press
0944 D202       839       setb p2_press
0946 020D44     840       ljmp p2win
0949            841   
0949            842   start_game_nohit1:
0949 120749     843       lcall forever1
094C 12066E     844       lcall movtox
094F 1201A3     845       lcall bcd2hex
0952 120898     846       lcall checkfreq1
0955 12011A     847       lcall hex2bcd
0958 1205E7     848       lcall DisplayBCD_LCD
095B D28C       849       setb TR0
095D            850       ;jbc p1_press, start_game_nohit2
095D            851    ;   jbc half_seconds_flag, start_game_jmp
095D C002       852            push AR2
095F 7A0A       852            mov R2, #10
0961 120079     852            lcall ?Wait_Milli_Seconds
0964 D002       852            pop AR2
0966 120749     853       lcall forever1
0969 12066E     854       lcall movtox
096C 1201A3     855       lcall bcd2hex
096F 120898     856       lcall checkfreq1
0972 12011A     857       lcall hex2bcd
0975 1205E7     858       lcall DisplayBCD_LCD
0978 120795     859       lcall forever2
097B 12066E     860       lcall movtox
097E 1201A3     861       lcall bcd2hex
0981 1208BC     862       lcall checkfreq2
0984 12011A     863       lcall hex2bcd
0987 1205E7     864       lcall DisplayBCD_LCD
098A C002       865            push AR2
098C 7A0A       865            mov R2, #10
098E 120079     865            lcall ?Wait_Milli_Seconds
0991 D002       865            pop AR2
0993 120749     866       lcall forever1
0996 12066E     867       lcall movtox
0999 1201A3     868       lcall bcd2hex
099C 120898     869       lcall checkfreq1
099F 12011A     870       lcall hex2bcd
09A2 1205E7     871       lcall DisplayBCD_LCD
09A5 120795     872       lcall forever2
09A8 12066E     873       lcall movtox
09AB 1201A3     874       lcall bcd2hex
09AE 1208BC     875       lcall checkfreq2
09B1 12011A     876       lcall hex2bcd
09B4 1205E7     877       lcall DisplayBCD_LCD
09B7 C002       878            push AR2
09B9 7A0A       878            mov R2, #10
09BB 120079     878            lcall ?Wait_Milli_Seconds
09BE D002       878            pop AR2
09C0 120749     879       lcall forever1
09C3 12066E     880       lcall movtox
09C6 1201A3     881       lcall bcd2hex
09C9 120898     882       lcall checkfreq1
09CC 12011A     883       lcall hex2bcd
09CF 1205E7     884       lcall DisplayBCD_LCD
09D2 120795     885       lcall forever2
09D5 12066E     886       lcall movtox
09D8 1201A3     887       lcall bcd2hex
09DB 1208BC     888       lcall checkfreq2
09DE 12011A     889       lcall hex2bcd
09E1 1205E7     890       lcall DisplayBCD_LCD
09E4 C002       891            push AR2
09E6 7A0A       891            mov R2, #10
09E8 120079     891            lcall ?Wait_Milli_Seconds
09EB D002       891            pop AR2
09ED 120749     892       lcall forever1
09F0 12066E     893       lcall movtox
09F3 1201A3     894       lcall bcd2hex
09F6 120898     895       lcall checkfreq1
09F9 12011A     896       lcall hex2bcd
09FC 1205E7     897       lcall DisplayBCD_LCD
09FF 120795     898       lcall forever2
0A02 12066E     899       lcall movtox
0A05 1201A3     900       lcall bcd2hex
0A08 1208BC     901       lcall checkfreq2
0A0B 12011A     902       lcall hex2bcd
0A0E 1205E7     903       lcall DisplayBCD_LCD
0A11 C002       904            push AR2
0A13 7A0A       904            mov R2, #10
0A15 120079     904            lcall ?Wait_Milli_Seconds
0A18 D002       904            pop AR2
0A1A 120749     905       lcall forever1
0A1D 12066E     906       lcall movtox
0A20 1201A3     907       lcall bcd2hex
0A23 120898     908       lcall checkfreq1
0A26 12011A     909       lcall hex2bcd
0A29 1205E7     910       lcall DisplayBCD_LCD
0A2C 120795     911       lcall forever2
0A2F 12066E     912       lcall movtox
0A32 1201A3     913       lcall bcd2hex
0A35 1208BC     914       lcall checkfreq2
0A38 12011A     915       lcall hex2bcd
0A3B 1205E7     916       lcall DisplayBCD_LCD
0A3E C002       917            push AR2
0A40 7A0A       917            mov R2, #10
0A42 120079     917            lcall ?Wait_Milli_Seconds
0A45 D002       917            pop AR2
0A47 120749     918       lcall forever1
0A4A 12066E     919       lcall movtox
0A4D 1201A3     920       lcall bcd2hex
0A50 120898     921       lcall checkfreq1
0A53 12011A     922       lcall hex2bcd
0A56 1205E7     923       lcall DisplayBCD_LCD
0A59 120795     924       lcall forever2
0A5C 12066E     925       lcall movtox
0A5F 1201A3     926       lcall bcd2hex
0A62 1208BC     927       lcall checkfreq2
0A65 12011A     928       lcall hex2bcd
0A68 1205E7     929       lcall DisplayBCD_LCD
0A6B C002       930            push AR2
0A6D 7A0A       930            mov R2, #10
0A6F 120079     930            lcall ?Wait_Milli_Seconds
0A72 D002       930            pop AR2
0A74 120749     931       lcall forever1
0A77 12066E     932       lcall movtox
0A7A 1201A3     933       lcall bcd2hex
0A7D 120898     934       lcall checkfreq1
0A80 12011A     935       lcall hex2bcd
0A83 1205E7     936       lcall DisplayBCD_LCD
0A86 120795     937       lcall forever2
0A89 12066E     938       lcall movtox
0A8C 1201A3     939       lcall bcd2hex
0A8F 1208BC     940       lcall checkfreq2
0A92 12011A     941       lcall hex2bcd
0A95 1205E7     942       lcall DisplayBCD_LCD
0A98 C002       943            push AR2
0A9A 7A0A       943            mov R2, #10
0A9C 120079     943            lcall ?Wait_Milli_Seconds
0A9F D002       943            pop AR2
0AA1 120749     944       lcall forever1
0AA4 12066E     945       lcall movtox
0AA7 1201A3     946       lcall bcd2hex
0AAA 120898     947       lcall checkfreq1
0AAD 12011A     948       lcall hex2bcd
0AB0 1205E7     949       lcall DisplayBCD_LCD
0AB3 120795     950       lcall forever2
0AB6 12066E     951       lcall movtox
0AB9 1201A3     952       lcall bcd2hex
0ABC 1208BC     953       lcall checkfreq2
0ABF 12011A     954       lcall hex2bcd
0AC2 1205E7     955       lcall DisplayBCD_LCD
0AC5 C002       956            push AR2
0AC7 7A0A       956            mov R2, #10
0AC9 120079     956            lcall ?Wait_Milli_Seconds
0ACC D002       956            pop AR2
0ACE 120749     957       lcall forever1
0AD1 12066E     958       lcall movtox
0AD4 1201A3     959       lcall bcd2hex
0AD7 120898     960       lcall checkfreq1
0ADA 12011A     961       lcall hex2bcd
0ADD 1205E7     962       lcall DisplayBCD_LCD
0AE0 120795     963       lcall forever2
0AE3 12066E     964       lcall movtox
0AE6 1201A3     965       lcall bcd2hex
0AE9 1208BC     966       lcall checkfreq2
0AEC 12011A     967       lcall hex2bcd
0AEF 1205E7     968       lcall DisplayBCD_LCD
0AF2 C002       969            push AR2
0AF4 7A0A       969            mov R2, #10
0AF6 120079     969            lcall ?Wait_Milli_Seconds
0AF9 D002       969            pop AR2
0AFB 120749     970       lcall forever1
0AFE 12066E     971       lcall movtox
0B01 1201A3     972       lcall bcd2hex
0B04 120898     973       lcall checkfreq1
0B07 12011A     974       lcall hex2bcd
0B0A 1205E7     975       lcall DisplayBCD_LCD
0B0D 120795     976       lcall forever2
0B10 12066E     977       lcall movtox
0B13 1201A3     978       lcall bcd2hex
0B16 1208BC     979       lcall checkfreq2
0B19 12011A     980       lcall hex2bcd
0B1C 1205E7     981       lcall DisplayBCD_LCD
0B1F 100115     982       jbc p1_press, check_p2
0B22 100209     983       jbc p2_press, p1_pressed
0B25            984   
0B25 E4         985       clr a 
0B26 E544       986       mov a, p1points
0B28 B40042     987       cjne a, #0x00, start_jmpsub1
0B2B 020B91     988       ljmp start_jmpsub2
0B2E            989   
0B2E            990   p1_pressed:
0B2E E4         991       clr a 
0B2F E544       992       mov a, p1points
0B31 B40009     993       cjne a, #0x00, subplayer1
0B34 0207E1     994       ljmp start_game
0B37            995   
0B37            996   check_p2:
0B37 10022E     997       jbc p2_press, start_game_jmp
0B3A 020B5F     998       ljmp subplayer2
0B3D            999   
0B3D           1000   subplayer1:
0B3D E4        1001       clr a
0B3E E544      1002       mov a, p1points
0B40 F530      1003       mov x, a
0B42 753401    1004            mov y+0, #low (1 % 0x10000) 
0B45 753500    1004            mov y+1, #high(1 % 0x10000) 
0B48 753600    1004            mov y+2, #low (1 / 0x10000) 
0B4B 753700    1004            mov y+3, #high(1 / 0x10000) 
0B4E 120200    1005       lcall sub32
0B51 E530      1006       mov a, x
0B53 D4        1007       da a
0B54 F544      1008       mov p1points, a
0B56 E4        1009       clr a
0B57 D201      1010       setb p1_press
0B59 D202      1011       setb p2_press
0B5B E4        1012       clr a 
0B5C 0207E1    1013       ljmp start_game
0B5F           1014   
0B5F           1015   subplayer2:
0B5F E4        1016       clr a
0B60 E545      1017       mov a, p2points
0B62 B4002C    1018       cjne  a, #0x00, start_jmpsub2
0B65 0207E1    1019       ljmp start_game
0B68           1020   
0B68           1021   start_game_jmp:
0B68 C28C      1022       clr TR0
0B6A 0207E1    1023       ljmp start_game
0B6D           1024   
0B6D           1025   start_jmpsub1:
0B6D           1026       
0B6D F530      1027       mov x, a
0B6F 753401    1028            mov y+0, #low (1 % 0x10000) 
0B72 753500    1028            mov y+1, #high(1 % 0x10000) 
0B75 753600    1028            mov y+2, #low (1 / 0x10000) 
0B78 753700    1028            mov y+3, #high(1 / 0x10000) 
0B7B 120200    1029       lcall sub32
0B7E E530      1030       mov a, x
0B80 D4        1031       da a
0B81 F544      1032       mov p1points, a
0B83 E4        1033       clr a
0B84 D201      1034       setb p1_press
0B86 D202      1035       setb p2_press
0B88 E4        1036       clr a 
0B89 E545      1037       mov a, p2points
0B8B B40003    1038       cjne a, #0x00, start_jmpsub2
0B8E 0207E1    1039       ljmp start_game
0B91           1040       
0B91           1041   start_jmpsub2:
0B91 F530      1042       mov x, a
0B93 753401    1043            mov y+0, #low (1 % 0x10000) 
0B96 753500    1043            mov y+1, #high(1 % 0x10000) 
0B99 753600    1043            mov y+2, #low (1 / 0x10000) 
0B9C 753700    1043            mov y+3, #high(1 / 0x10000) 
0B9F 120200    1044       lcall sub32
0BA2 E530      1045       mov a, x
0BA4 D4        1046       da a
0BA5 F545      1047       mov p2points, a
0BA7 E4        1048       clr a
0BA8 C201      1049       clr p1_press
0BAA C202      1050       clr p2_press
0BAC 020BB2    1051       ljmp start_jmp
0BAF           1052       
0BAF           1053   start_game_nohit1_jmp:
0BAF 020949    1054            ljmp start_game_nohit1
0BB2           1055   
0BB2           1056   start_jmp:
0BB2 D201      1057       setb p1_press
0BB4 D202      1058       setb p2_press
0BB6 0207E1    1059       ljmp start_game
0BB9           1060   p1win:
0BB9 D201      1061       setb p1_press
0BBB D202      1062       setb p2_press
0BBD C0E0      1063            push acc
0BBF 740B      1063            mov a, #11
0BC1 14        1063            dec a
0BC2 1200FF    1063            lcall ?Set_Cursor_1 ; Select column and row
0BC5 D0E0      1063            pop acc
0BC7 C0E0      1064            push acc
0BC9 7408      1064            mov a, #8
0BCB 14        1064            dec a
0BCC 1200FF    1064            lcall ?Set_Cursor_1 ; Select column and row
0BCF D0E0      1064            pop acc
0BD1 C083      1065            push dph
0BD3 C082      1065            push dpl
0BD5 C0E0      1065            push acc
0BD7 900038    1065            mov dptr, #Winner1_message1
0BDA 1200F2    1065            lcall ?Send_Constant_String
0BDD D0E0      1065            pop acc
0BDF D082      1065            pop dpl
0BE1 D083      1065            pop dph
0BE3 C0E0      1066            push acc
0BE5 740B      1066            mov a, #11
0BE7 14        1066            dec a
0BE8 1200FD    1066            lcall ?Set_Cursor_2 ; Select column and row
0BEB D0E0      1066            pop acc
0BED C0E0      1067            push acc
0BEF 7408      1067            mov a, #8
0BF1 14        1067            dec a
0BF2 1200FD    1067            lcall ?Set_Cursor_2 ; Select column and row
0BF5 D0E0      1067            pop acc
0BF7 C083      1068            push dph
0BF9 C082      1068            push dpl
0BFB C0E0      1068            push acc
0BFD 900042    1068            mov dptr, #Winner1_message2
0C00 1200F2    1068            lcall ?Send_Constant_String
0C03 D0E0      1068            pop acc
0C05 D082      1068            pop dpl
0C07 D083      1068            pop dph
0C09 C002      1069            push AR2
0C0B 7A05      1069            mov R2, #5
0C0D 120079    1069            lcall ?Wait_Milli_Seconds
0C10 D002      1069            pop AR2
0C12           1069   
0C12 C0E0      1070            push acc
0C14 7401      1070            mov a, #1
0C16 14        1070            dec a
0C17 1200FF    1070            lcall ?Set_Cursor_1 ; Select column and row
0C1A D0E0      1070            pop acc
0C1C C083      1071            push dph
0C1E C082      1071            push dpl
0C20 C0E0      1071            push acc
0C22 90005E    1071            mov dptr, #Playagain
0C25 1200F2    1071            lcall ?Send_Constant_String
0C28 D0E0      1071            pop acc
0C2A D082      1071            pop dpl
0C2C D083      1071            pop dph
0C2E C0E0      1072            push acc
0C30 7401      1072            mov a, #1
0C32 14        1072            dec a
0C33 1200FD    1072            lcall ?Set_Cursor_2 ; Select column and row
0C36 D0E0      1072            pop acc
0C38 C083      1073            push dph
0C3A C082      1073            push dpl
0C3C C0E0      1073            push acc
0C3E 900066    1073            mov dptr, #Clear_screen
0C41 1200F2    1073            lcall ?Send_Constant_String
0C44 D0E0      1073            pop acc
0C46 D082      1073            pop dpl
0C48 D083      1073            pop dph
0C4A C28C      1074       clr TR0;stops timer
0C4C           1075       ;plays music 
0C4C           1076       ;new music ideas?
0C4C 120527    1077            lcall Timer0C2_Init
0C4F C002      1078            push AR2
0C51 7AFF      1078            mov R2, #255
0C53 120079    1078            lcall ?Wait_Milli_Seconds
0C56 D002      1078            pop AR2
0C58 C002      1079            push AR2
0C5A 7AFF      1079            mov R2, #255
0C5C 120079    1079            lcall ?Wait_Milli_Seconds
0C5F D002      1079            pop AR2
0C61 1203E2    1080            lcall Timer0C_Init
0C64 C002      1081            push AR2
0C66 7AFF      1081            mov R2, #255
0C68 120079    1081            lcall ?Wait_Milli_Seconds
0C6B D002      1081            pop AR2
0C6D 12042D    1082            lcall Timer0D1_Init
0C70 C002      1083            push AR2
0C72 7AFF      1083            mov R2, #255
0C74 120079    1083            lcall ?Wait_Milli_Seconds
0C77 D002      1083            pop AR2
0C79 12045F    1084            lcall Timer0F_Init
0C7C C002      1085            push AR2
0C7E 7AFF      1085            mov R2, #255
0C80 120079    1085            lcall ?Wait_Milli_Seconds
0C83 D002      1085            pop AR2
0C85 120478    1086            lcall Timer0F1_Init
0C88 C002      1087            push AR2
0C8A 7AFF      1087            mov R2, #255
0C8C 120079    1087            lcall ?Wait_Milli_Seconds
0C8F D002      1087            pop AR2
0C91 12045F    1088            lcall Timer0F_Init
0C94 C002      1089            push AR2
0C96 7AFF      1089            mov R2, #255
0C98 120079    1089            lcall ?Wait_Milli_Seconds
0C9B D002      1089            pop AR2
0C9D 12042D    1090            lcall Timer0D1_Init
0CA0 C002      1091            push AR2
0CA2 7AFF      1091            mov R2, #255
0CA4 120079    1091            lcall ?Wait_Milli_Seconds
0CA7 D002      1091            pop AR2
0CA9 1203E2    1092            lcall Timer0C_Init
0CAC C002      1093            push AR2
0CAE 7AFF      1093            mov R2, #255
0CB0 120079    1093            lcall ?Wait_Milli_Seconds
0CB3 D002      1093            pop AR2
0CB5 C002      1094            push AR2
0CB7 7AFF      1094            mov R2, #255
0CB9 120079    1094            lcall ?Wait_Milli_Seconds
0CBC D002      1094            pop AR2
0CBE C002      1095            push AR2
0CC0 7AFF      1095            mov R2, #255
0CC2 120079    1095            lcall ?Wait_Milli_Seconds
0CC5 D002      1095            pop AR2
0CC7 12050E    1096            lcall Timer0A2_Init
0CCA C002      1097            push AR2
0CCC 7A96      1097            mov R2, #150
0CCE 120079    1097            lcall ?Wait_Milli_Seconds
0CD1 D002      1097            pop AR2
0CD3 120414    1098            lcall Timer0D_Init
0CD6 C002      1099            push AR2
0CD8 7A96      1099            mov R2, #150
0CDA 120079    1099            lcall ?Wait_Milli_Seconds
0CDD D002      1099            pop AR2
0CDF 1203E2    1100            lcall Timer0C_Init
0CE2 C002      1101            push AR2
0CE4 7A96      1101            mov R2, #150
0CE6 120079    1101            lcall ?Wait_Milli_Seconds
0CE9 D002      1101            pop AR2
0CEB C002      1102            push AR2
0CED 7AFF      1102            mov R2, #255
0CEF 120079    1102            lcall ?Wait_Milli_Seconds
0CF2 D002      1102            pop AR2
0CF4 C002      1103            push AR2
0CF6 7AFF      1103            mov R2, #255
0CF8 120079    1103            lcall ?Wait_Milli_Seconds
0CFB D002      1103            pop AR2
0CFD C002      1104            push AR2
0CFF 7AFF      1104            mov R2, #255
0D01 120079    1104            lcall ?Wait_Milli_Seconds
0D04 D002      1104            pop AR2
0D06 C28C      1105            clr TR0
0D08 C002      1106            push AR2
0D0A 7AFF      1106            mov R2, #255
0D0C 120079    1106            lcall ?Wait_Milli_Seconds
0D0F D002      1106            pop AR2
0D11 C002      1107            push AR2
0D13 7AFF      1107            mov R2, #255
0D15 120079    1107            lcall ?Wait_Milli_Seconds
0D18 D002      1107            pop AR2
0D1A C002      1108            push AR2
0D1C 7AFF      1108            mov R2, #255
0D1E 120079    1108            lcall ?Wait_Milli_Seconds
0D21 D002      1108            pop AR2
0D23           1109                    
0D23 20C51B    1110       jb START_BUTTON, p1win_jmp2
0D26 C002      1111            push AR2
0D28 7A05      1111            mov R2, #5
0D2A 120079    1111            lcall ?Wait_Milli_Seconds
0D2D D002      1111            pop AR2
0D2F C002      1112            push AR2
0D31 7A32      1112            mov R2, #50
0D33 120079    1112            lcall ?Wait_Milli_Seconds
0D36 D002      1112            pop AR2
0D38 20C506    1113       jb START_BUTTON, p1win_jmp2
0D3B 30C5FD    1114       jnb START_BUTTON, $
0D3E 020EC9    1115       ljmp restart_jmp
0D41           1116            
0D41           1117   p1win_jmp2:
0D41 020BB9    1118       ljmp p1win
0D44           1119            
0D44           1120   p2win: 
0D44 D201      1121       setb p1_press
0D46 D202      1122       setb p2_press
0D48 C0E0      1123            push acc
0D4A 740B      1123            mov a, #11
0D4C 14        1123            dec a
0D4D 1200FF    1123            lcall ?Set_Cursor_1 ; Select column and row
0D50 D0E0      1123            pop acc
0D52           1123   
0D52 C0E0      1124            push acc
0D54 7408      1124            mov a, #8
0D56 14        1124            dec a
0D57 1200FF    1124            lcall ?Set_Cursor_1 ; Select column and row
0D5A D0E0      1124            pop acc
0D5C           1124   
0D5C C083      1125            push dph
0D5E C082      1125            push dpl
0D60 C0E0      1125            push acc
0D62 900042    1125            mov dptr, #Winner1_message2
0D65 1200F2    1125            lcall ?Send_Constant_String
0D68 D0E0      1125            pop acc
0D6A D082      1125            pop dpl
0D6C D083      1125            pop dph
0D6E C0E0      1126            push acc
0D70 740B      1126            mov a, #11
0D72 14        1126            dec a
0D73 1200FD    1126            lcall ?Set_Cursor_2 ; Select column and row
0D76 D0E0      1126            pop acc
0D78 C0E0      1127            push acc
0D7A 7408      1127            mov a, #8
0D7C 14        1127            dec a
0D7D 1200FD    1127            lcall ?Set_Cursor_2 ; Select column and row
0D80 D0E0      1127            pop acc
0D82 C083      1128            push dph
0D84 C082      1128            push dpl
0D86 C0E0      1128            push acc
0D88 900038    1128            mov dptr, #Winner1_message1
0D8B 1200F2    1128            lcall ?Send_Constant_String
0D8E D0E0      1128            pop acc
0D90 D082      1128            pop dpl
0D92 D083      1128            pop dph
0D94 C002      1129            push AR2
0D96 7A32      1129            mov R2, #50
0D98 120079    1129            lcall ?Wait_Milli_Seconds
0D9B D002      1129            pop AR2
0D9D C0E0      1130            push acc
0D9F 7401      1130            mov a, #1
0DA1 14        1130            dec a
0DA2 1200FF    1130            lcall ?Set_Cursor_1 ; Select column and row
0DA5 D0E0      1130            pop acc
0DA7 C083      1131            push dph
0DA9 C082      1131            push dpl
0DAB C0E0      1131            push acc
0DAD 90005E    1131            mov dptr, #Playagain
0DB0 1200F2    1131            lcall ?Send_Constant_String
0DB3 D0E0      1131            pop acc
0DB5 D082      1131            pop dpl
0DB7 D083      1131            pop dph
0DB9 C0E0      1132            push acc
0DBB 7401      1132            mov a, #1
0DBD 14        1132            dec a
0DBE 1200FD    1132            lcall ?Set_Cursor_2 ; Select column and row
0DC1 D0E0      1132            pop acc
0DC3 C083      1133            push dph
0DC5 C082      1133            push dpl
0DC7 C0E0      1133            push acc
0DC9 900066    1133            mov dptr, #Clear_screen
0DCC 1200F2    1133            lcall ?Send_Constant_String
0DCF D0E0      1133            pop acc
0DD1 D082      1133            pop dpl
0DD3 D083      1133            pop dph
0DD5 C28C      1134       clr TR0;stops timer
0DD7           1135            ;plays music
0DD7           1136            
0DD7 120527    1137                    lcall Timer0C2_Init
0DDA C002      1138            push AR2
0DDC 7AFF      1138            mov R2, #255
0DDE 120079    1138            lcall ?Wait_Milli_Seconds
0DE1 D002      1138            pop AR2
0DE3 C002      1139            push AR2
0DE5 7AFF      1139            mov R2, #255
0DE7 120079    1139            lcall ?Wait_Milli_Seconds
0DEA D002      1139            pop AR2
0DEC 1203E2    1140            lcall Timer0C_Init
0DEF C002      1141            push AR2
0DF1 7AFF      1141            mov R2, #255
0DF3 120079    1141            lcall ?Wait_Milli_Seconds
0DF6 D002      1141            pop AR2
0DF8 12042D    1142            lcall Timer0D1_Init
0DFB C002      1143            push AR2
0DFD 7AFF      1143            mov R2, #255
0DFF 120079    1143            lcall ?Wait_Milli_Seconds
0E02 D002      1143            pop AR2
0E04 12045F    1144            lcall Timer0F_Init
0E07 C002      1145            push AR2
0E09 7AFF      1145            mov R2, #255
0E0B 120079    1145            lcall ?Wait_Milli_Seconds
0E0E D002      1145            pop AR2
0E10 120478    1146            lcall Timer0F1_Init
0E13 C002      1147            push AR2
0E15 7AFF      1147            mov R2, #255
0E17 120079    1147            lcall ?Wait_Milli_Seconds
0E1A D002      1147            pop AR2
0E1C 12045F    1148            lcall Timer0F_Init
0E1F C002      1149            push AR2
0E21 7AFF      1149            mov R2, #255
0E23 120079    1149            lcall ?Wait_Milli_Seconds
0E26 D002      1149            pop AR2
0E28 12042D    1150            lcall Timer0D1_Init
0E2B C002      1151            push AR2
0E2D 7AFF      1151            mov R2, #255
0E2F 120079    1151            lcall ?Wait_Milli_Seconds
0E32 D002      1151            pop AR2
0E34 1203E2    1152            lcall Timer0C_Init
0E37 C002      1153            push AR2
0E39 7AFF      1153            mov R2, #255
0E3B 120079    1153            lcall ?Wait_Milli_Seconds
0E3E D002      1153            pop AR2
0E40 C002      1154            push AR2
0E42 7AFF      1154            mov R2, #255
0E44 120079    1154            lcall ?Wait_Milli_Seconds
0E47 D002      1154            pop AR2
0E49 C002      1155            push AR2
0E4B 7AFF      1155            mov R2, #255
0E4D 120079    1155            lcall ?Wait_Milli_Seconds
0E50 D002      1155            pop AR2
0E52 12050E    1156            lcall Timer0A2_Init
0E55 C002      1157            push AR2
0E57 7A96      1157            mov R2, #150
0E59 120079    1157            lcall ?Wait_Milli_Seconds
0E5C D002      1157            pop AR2
0E5E 120414    1158            lcall Timer0D_Init
0E61 C002      1159            push AR2
0E63 7A96      1159            mov R2, #150
0E65 120079    1159            lcall ?Wait_Milli_Seconds
0E68 D002      1159            pop AR2
0E6A 1203E2    1160            lcall Timer0C_Init
0E6D C002      1161            push AR2
0E6F 7A96      1161            mov R2, #150
0E71 120079    1161            lcall ?Wait_Milli_Seconds
0E74 D002      1161            pop AR2
0E76 C002      1162            push AR2
0E78 7AFF      1162            mov R2, #255
0E7A 120079    1162            lcall ?Wait_Milli_Seconds
0E7D D002      1162            pop AR2
0E7F C002      1163            push AR2
0E81 7AFF      1163            mov R2, #255
0E83 120079    1163            lcall ?Wait_Milli_Seconds
0E86 D002      1163            pop AR2
0E88 C002      1164            push AR2
0E8A 7AFF      1164            mov R2, #255
0E8C 120079    1164            lcall ?Wait_Milli_Seconds
0E8F D002      1164            pop AR2
0E91 C28C      1165            clr TR0
0E93 C002      1166            push AR2
0E95 7AFF      1166            mov R2, #255
0E97 120079    1166            lcall ?Wait_Milli_Seconds
0E9A D002      1166            pop AR2
0E9C C002      1167            push AR2
0E9E 7AFF      1167            mov R2, #255
0EA0 120079    1167            lcall ?Wait_Milli_Seconds
0EA3 D002      1167            pop AR2
0EA5 C002      1168            push AR2
0EA7 7AFF      1168            mov R2, #255
0EA9 120079    1168            lcall ?Wait_Milli_Seconds
0EAC D002      1168            pop AR2
0EAE           1169                    
0EAE 20C515    1170       jb START_BUTTON, p2win_jmp1
0EB1 C002      1171            push AR2
0EB3 7A32      1171            mov R2, #50
0EB5 120079    1171            lcall ?Wait_Milli_Seconds
0EB8 D002      1171            pop AR2
0EBA 20C509    1172       jb START_BUTTON, p2win_jmp1
0EBD 30C5FD    1173       jnb START_BUTTON, $
0EC0 020EC9    1174       ljmp restart_jmp
0EC3           1175     
0EC3           1176     
0EC3           1177   
0EC3           1178            
0EC3           1179   p1win_jmp1:
0EC3 020BB9    1180       ljmp p1win
0EC6           1181   
0EC6           1182   p2win_jmp1:
0EC6 020D44    1183       ljmp p2win
0EC9           1184   
0EC9           1185   restart_jmp:
0EC9 020ECC    1186       ljmp restart_game
0ECC           1187   
0ECC           1188   restart_game:
0ECC 754400    1189       mov p1points, #0x00
0ECF 754500    1190       mov p2points, #0x00
0ED2 020696    1191       ljmp MyProgram       ;goes back to MyProgram instead of start_game                   
0ED5           1192       ;ljmp start_game     ;goes back to MyProgram instead of start_game                           
0ED5           1193   en
