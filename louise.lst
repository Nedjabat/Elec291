                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P4.5
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   UPDOWN           equ P0.1
0000             10   
0000             11   CLK           EQU 22118400
0000             12   TIMER0_RATE   EQU 100     ; 1000Hz, for a timer tick of 1ms
0000             13   TIMER0_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             14   TIMER1_RATE   EQU 2000     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             15   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))
0000             16   TIMER1_RATE1   EQU 6000  
0000             17   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1)))               ;2000Hz frequency lose frequency
0000             18   TIMER2_RATE   EQU 4200                 ;2100Hz frequency win frequency
0000             19   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             20   
0000             21   org 0000H
0000 020547      22      ljmp MyProgram
0003             23   
000B             24   org 0x000B
000B 02041F      25            ljmp Timer0_ISR
000E             26   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             27   org 0x001B
001B 0203D7      28            ljmp Timer1_ISR
001E             29   
001E             30   
0030             31   DSEG at 0x30
0030             32   x:   ds 4
0034             33   y:   ds 4
0038             34   seed: ds 4  
003C             35   bcd: ds 5
0041             36   Count1ms:     ds 2 
0043             37   seconds:  ds 1 ;
0044             38   p1points: ds 1
0045             39   p2points: ds 1
0046             40   freq1: ds 4
004A             41   freq2: ds 4
004E             42   counter: ds 4
0052             43   Period_A: ds 2
0054             44   Period_B: ds 2
0056             45   bcd1: ds 5
005B             46   bcd2: ds 5
0060             47   
0000             48   BSEG
0000             49   mf: dbit 1
0001             50   p1_press: dbit 1
0002             51   p2_press: dbit 1
0003             52   second_high: dbit 1
0004             53   half_seconds_flag: dbit 1
0005             54   
001E             55   cseg
001E             56   ; These 'equ' must match the hardware wiring
001E             57   LCD_RS equ P3.2
001E             58   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             59   LCD_E  equ P3.3
001E             60   LCD_D4 equ P3.4
001E             61   LCD_D5 equ P3.5
001E             62   LCD_D6 equ P3.6
001E             63   LCD_D7 equ P3.7
001E             64   SOUND_OUT equ P1.1
001E             65   
001E 506C6179    66   Initial_Message:  db 'Player1:          ', 0
     6572313A
     20202020
     20202020
     202000
0031 506C6179    67   Initial_Message2: db 'Player2:          ', 0
     6572323A
     20202020
     20202020
     202000
0044             68   
0044 57696E21    69   Winner1_message1: db 'Win!:D', 0
     3A4400
004B 4C6F7365    70   Winner1_message2: db 'Lose:P', 0
     3A5000
0052             71   
0052 4C6F7365    72   Winner2_message1: db 'Loser:P', 0
     723A5000
005A 57696E6E    73   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
0064             74   
0064 506C6179    75   Playagain       : db 'Play again ?', 0
     20616761
     696E203F
     00
0071 20202020    76   Clear_screen    : db '          ', 0
     20202020
     202000
007C             77   
                570   $LIST
                 80   $LIST
03BE             82   
03BE             83   
03BE             84   Timer1_Init:
03BE E589        85            mov a, TMOD
03C0 54F0        86            anl a, #0xf0 ; Clear the bits for timer 0
03C2 4401        87            orl a, #0x01 ; Configure timer 0 as 16-timer
03C4 F589        88            mov TMOD, a
03C6 758DD4      89            mov TH1, #high(TIMER1_RELOAD)
03C9 758BCD      90            mov TL1, #low(TIMER1_RELOAD)
03CC             91            ; Set autoreload value
03CC 75F5D4      92            mov RH1, #high(TIMER1_RELOAD)
03CF 75F3CD      93            mov RL1, #low(TIMER1_RELOAD)
03D2             94            ; Enable the timer and interrupts
03D2 D2AB        95       setb ET1  ; Enable timer 0 interrupt
03D4 D28E        96       setb TR1  ; Start timer 0
03D6 22          97            ret
03D7             98   
03D7             99   ;---------------------------------;
03D7            100   ; ISR for timer 0.  Set to execute;
03D7            101   ; every 1/4096Hz to generate a    ;
03D7            102   ; 2048 Hz square wave at pin P1.1 ;
03D7            103   ;---------------------------------;
03D7            104   Timer1_ISR:
03D7            105            ;clr TF0  ; According to the data sheet this is done for us already.
03D7 B291       106            cpl SOUND_OUT ; Connect speaker to P1.1!
03D9 32         107            reti
03DA            108   
03DA            109   Timer1_Init1:
03DA E589       110            mov a, TMOD
03DC 54F0       111            anl a, #0xf0 ; Clear the bits for timer 0
03DE 4401       112            orl a, #0x01 ; Configure timer 0 as 16-timer
03E0 F589       113            mov TMOD, a
03E2 758DF1     114            mov TH1, #high(TIMER1_RELOAD1)
03E5 758B9A     115            mov TL1, #low(TIMER1_RELOAD1)
03E8            116            ; Set autoreload value
03E8 75F5F1     117            mov RH1, #high(TIMER1_RELOAD1)
03EB 75F39A     118            mov RL1, #low(TIMER1_RELOAD1)
03EE            119            ; Enable the timer and interrupts
03EE D2AB       120       setb ET1  ; Enable timer 0 interrupt
03F0 D28E       121       setb TR1  ; Start timer 0
03F2 22         122            ret
03F3            123   Timer2_Init:
03F3            124   
03F3 75C800     125            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
03F6 75CDEB     126            mov TH2, #high(TIMER2_RELOAD)
03F9 75CC6E     127            mov TL2, #low(TIMER2_RELOAD)
03FC            128            ; Set the reload value
03FC 75CBEB     129            mov RCAP2H, #high(TIMER2_RELOAD)
03FF 75CA6E     130            mov RCAP2L, #low(TIMER2_RELOAD)
0402            131            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0402 E4         132            clr a
0403 F541       133            mov Count1ms+0, a
0405 F542       134            mov Count1ms+1, a
0407            135            ; Enable the timer and interrupts
0407 D2AD       136       setb ET2  ; Enable timer 2 interrupt
0409 D2CA       137       setb TR2  ; Enable timer 2
040B 22         138            ret
040C            139   
040C            140   
040C            141   ;---------------------------------;
040C            142   ; ISR for timer 2                 ;
040C            143   ;---------------------------------;
040C            144   Timer0_Init:
040C            145   
040C 758800     146            mov TCON, #0 ; Stop timer/counter.  Autoreload mode.
040F 758CEB     147            mov TH0, #high(TIMER0_RELOAD)
0412 758A6E     148            mov TL0, #low(TIMER0_RELOAD)
0415            149            ; Set the reload value
0415            150            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0415 E4         151            clr a
0416 F541       152            mov Count1ms+0, a
0418 F542       153            mov Count1ms+1, a
041A            154            ; Enable the timer and interrupts
041A D2A9       155       setb ET0  ; Enable timer 2 interrupt
041C D28C       156       setb TR0  ; Enable timer 2
041E 22         157            ret
041F            158   
041F            159   ;---------------------------------;
041F            160   ; ISR for timer 2                 ;
041F            161   ;---------------------------------;
041F            162   Timer0_ISR:
041F C28D       163            clr TF0  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0421            164            
0421            165            ; The two registers used in the ISR must be saved in the stack
0421 C0E0       166            push acc
0423 C0D0       167            push psw
0425            168            
0425            169            ; Increment the 16-bit one mili second counter
0425 0541       170            inc Count1ms+0    ; Increment the low 8-bits first
0427 E541       171            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0429 7002       172            jnz Inc_Done
042B 0542       173            inc Count1ms+1
042D            174   Inc_Done:
042D            175            ; Check if half second has passed
042D E541       176            mov a, Count1ms+0
042F B4E824     177            cjne a, #low(1000), Timer0_ISR_done ; Warning: this instruction changes the carry flag!
0432 E542       178            mov a, Count1ms+1
0434 B4031F     179            cjne a, #high(1000), Timer0_ISR_done
0437            180            
0437            181            ; 500 milliseconds have passed.  Set a flag so the main program knows
0437 D204       182            setb half_seconds_flag ; Let the main program know half second had passed
0439 B28C       183            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
043B            184            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
043B E4         185            clr a
043C F541       186            mov Count1ms+0, a
043E F542       187            mov Count1ms+1, a
0440            188            ; Increment the BCD counter
0440 E543       189            mov a, seconds
0442 308104     190            jnb UPDOWN, Timer0_ISR_decrement
0445 2401       191            add a, #0x01
0447 8002       192            sjmp Timer0_ISR_da
0449            193   Timer0_ISR_decrement:
0449 2499       194            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
044B            195   Timer0_ISR_da:
044B D4         196            da a ; Decimal adjust instruction.  Check datasheet for more details!
044C F543       197            mov seconds, a
044E B46005     198       cjne a, #0x60, Timer0_ISR_done
0451 D203       199       setb second_high
0453 E4         200       clr a
0454 F543       201       mov seconds, a
0456            202   Timer0_ISR_done:
0456 D0D0       203            pop psw
0458 D0E0       204            pop acc
045A 32         205            reti
045B            206   ;---------------------------------;
045B            207   ; ISR for timer 0.  Set to execute;
045B            208   ; every 1/4096Hz to generate a    ;
045B            209   ; 2048 Hz square wave at pin P1.1 ;
045B            210   ;---------------------------------;
045B            211   ; When using a 22.1184MHz crystal in fast mode
045B            212   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
045B            213   ; (tuned manually to get as close to 1s as possible)
045B            214   Wait1s:
045B 7AB0       215       mov R2, #176
045D 79FA       216   X3: mov R1, #250
045F 78A6       217   X2: mov R0, #166
0461 D8FE       218   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
0463 D9FA       219       djnz R1, X2 ; 22.51519us*250=5.629ms
0465 DAF6       220       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
0467 22         221       ret
0468            222   
0468            223   ;Initializes timer/counter 2 as a 16-bit counter
0468            224   InitTimer2:
0468 75C800     225            mov T2CON, #0b_0000_0000 ; Stop timer/counter.  Set as counter (clock input is pin T2).
046B            226            ; Set the reload value on overflow to zero (just in case is not zero)
046B 75CB00     227            mov RCAP2H, #0
046E 75CA00     228            mov RCAP2L, #0
0471 D2A0       229       setb P2.0 ; Pin is used as input
0473 D2A1       230       setb P2.1  ; P1.0 is connected to T2.  Make sure it can be used as input.
0475 22         231       ret
0476            232   
0476            233   
0476            234   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
0476            235   
0476            236   hex2bcd1:
0476 E4         237            clr a
0477 7800       238       mov R0, #0  ;Set BCD result to 00000000 
0479 7900       239       mov R1, #0
047B 7A00       240       mov R2, #0
047D 7B10       241       mov R3, #16 ;Loop counter.
047F            242   
047F            243   hex2bcd_loop1:
047F E5CC       244       mov a, TL2 ;Shift TH0-TL0 left through carry
0481 33         245       rlc a
0482 F5CC       246       mov TL2, a
0484            247       
0484 E5CD       248       mov a, TH2
0486 33         249       rlc a
0487 F5CD       250       mov TH2, a
0489            251         
0489            252            ; Perform bcd + bcd + carry
0489            253            ; using BCD numbers
0489 E8         254            mov a, R0
048A 38         255            addc a, R0
048B D4         256            da a
048C F8         257            mov R0, a
048D            258            
048D E9         259            mov a, R1
048E 39         260            addc a, R1
048F D4         261            da a
0490 F9         262            mov R1, a
0491            263            
0491 EA         264            mov a, R2
0492 3A         265            addc a, R2
0493 D4         266            da a
0494 FA         267            mov R2, a
0495            268            
0495 DBE8       269            djnz R3, hex2bcd_loop1
0497 22         270            ret
0498            271   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
0498            272   DisplayBCD_LCD:
0498            273            ; 5th digit:
0498 EA         274       mov a, R2
0499 540F       275       anl a, #0FH
049B 4430       276       orl a, #'0' ; convert to ASCII
049D 1200CC     277            lcall ?WriteData
04A0            278            ; 4th digit:
04A0 E9         279       mov a, R1
04A1 C4         280       swap a
04A2 540F       281       anl a, #0FH
04A4 4430       282       orl a, #'0' ; convert to ASCII
04A6 1200CC     283            lcall ?WriteData
04A9            284            ; 3rd digit:
04A9 E9         285       mov a, R1
04AA 540F       286       anl a, #0FH
04AC 4430       287       orl a, #'0' ; convert to ASCII
04AE 1200CC     288            lcall ?WriteData
04B1            289            ; 2nd digit:
04B1 E8         290       mov a, R0
04B2 C4         291       swap a
04B3 540F       292       anl a, #0FH
04B5 4430       293       orl a, #'0' ; convert to ASCII
04B7 1200CC     294            lcall ?WriteData
04BA            295            ; 1st digit:
04BA E8         296       mov a, R0
04BB 540F       297       anl a, #0FH
04BD 4430       298       orl a, #'0' ; convert to ASCII
04BF 1200CC     299            lcall ?WriteData
04C2            300       
04C2 22         301       ret
04C3            302   
04C3            303   random:
04C3            304    ;   mov mf, #0
04C3            305   
04C3 853830     306       mov x+0, seed+0
04C6 853931     307       mov x+1, seed+1
04C9 853A32     308       mov x+2, seed+2
04CC 853B33     309       mov x+3, seed+3
04CF 7534FD     310            mov y+0, #low (214013 % 0x10000) 
04D2 753543     310            mov y+1, #high(214013 % 0x10000) 
04D5 753603     310            mov y+2, #low (214013 / 0x10000) 
04D8 753700     310            mov y+3, #high(214013 / 0x10000) 
04DB 1202A2     311       lcall mul32
04DE 753443     312            mov y+0, #low (2451011 % 0x10000) 
04E1 753566     312            mov y+1, #high(2451011 % 0x10000) 
04E4 753625     312            mov y+2, #low (2451011 / 0x10000) 
04E7 753700     312            mov y+3, #high(2451011 / 0x10000) 
04EA 1201ED     313       lcall add32
04ED 853038     314       mov seed+0, x+0
04F0 853139     315       mov seed+1, x+1
04F3 85323A     316       mov seed+2, x+2
04F6 85333B     317       mov seed+3, x+3
04F9            318   
04F9            319    ;   mov y, #50
04F9            320     ;  lcall x_gt_y
04F9 22         321       ret
04FA            322   
04FA            323   wait_random:
04FA C002       324            push AR2
04FC AA38       324            mov R2, seed+0
04FE 120087     324            lcall ?Wait_Milli_Seconds
0501 D002       324            pop AR2
0503 C002       325            push AR2
0505 AA39       325            mov R2, seed+1
0507 120087     325            lcall ?Wait_Milli_Seconds
050A D002       325            pop AR2
050C C002       326            push AR2
050E AA3A       326            mov R2, seed+2
0510 120087     326            lcall ?Wait_Milli_Seconds
0513 D002       326            pop AR2
0515 C002       327            push AR2
0517 AA3B       327            mov R2, seed+3
0519 120087     327            lcall ?Wait_Milli_Seconds
051C D002       327            pop AR2
051E 22         328       ret
051F            329   
051F            330   movtox:
051F            331            ; 5th digit:
051F EA         332       mov a, R2
0520 540F       333       anl a, #0FH
0522 4430       334       orl a, #'0' ; convert to ASCII
0524 754000     335       mov bcd+4, #0
0527 753F00     336       mov bcd+3, #0
052A 8A3E       337       mov bcd+2, R2
052C            338            ;lcall ?WriteData
052C            339            ; 4th digit:
052C E9         340       mov a, R1
052D C4         341       swap a
052E 540F       342       anl a, #0FH
0530 4430       343       orl a, #'0' ; convert to ASCII
0532            344            ;lcall ?WriteData
0532            345            ; 3rd digit:
0532 E9         346       mov a, R1
0533 540F       347       anl a, #0FH
0535 4430       348       orl a, #'0' ; convert to ASCII
0537 893D       349       mov bcd+1, R1
0539            350            ;lcall ?WriteData
0539            351            ; 2nd digit:
0539 E8         352       mov a, R0
053A C4         353       swap a
053B 540F       354       anl a, #0FH
053D 4430       355       orl a, #'0' ; convert to ASCII
053F            356       
053F            357            ;lcall ?WriteData
053F            358            ; 1st digit:
053F E8         359       mov a, R0
0540 540F       360       anl a, #0FH
0542 4430       361       orl a, #'0' ; convert to ASCII
0544 883C       362       mov bcd+0, R0
0546            363            ;lcall ?WriteData
0546            364       
0546 22         365       ret
0547            366   ;---------------------------------;
0547            367   ; Hardware initialization         ;
0547            368   ;---------------------------------;
0547            369   
0547            370   ;---------------------------------;
0547            371   ; Main program loop               ;
0547            372   ;---------------------------------;
0547            373   MyProgram:
0547            374       ; Initialize the hardware:
0547 75817F     375       mov SP, #7FH
054A 120468     376       lcall InitTimer2
054D 1200D6     377       lcall LCD_4BIT
0550 12040C     378       lcall Timer0_Init
0553 C0E0       379            push acc
0555 7401       379            mov a, #1
0557 14         379            dec a
0558 12010D     379            lcall ?Set_Cursor_1 ; Select column and row
055B D0E0       379            pop acc
055D C083       380            push dph
055F C082       380            push dpl
0561 C0E0       380            push acc
0563 90001E     380            mov dptr, #Initial_Message
0566 120100     380            lcall ?Send_Constant_String
0569 D0E0       380            pop acc
056B D082       380            pop dpl
056D D083       380            pop dph
056F C0E0       381            push acc
0571 7401       381            mov a, #1
0573 14         381            dec a
0574 12010B     381            lcall ?Set_Cursor_2 ; Select column and row
0577 D0E0       381            pop acc
0579 C083       382            push dph
057B C082       382            push dpl
057D C0E0       382            push acc
057F 900031     382            mov dptr, #Initial_Message2
0582 120100     382            lcall ?Send_Constant_String
0585 D0E0       382            pop acc
0587 D082       382            pop dpl
0589 D083       382            pop dph
058B D2AF       383       setb EA
058D D28C       384       setb TR0
058F D204       385       setb half_seconds_flag
0591 20C5FD     386       jb P4.5, $
0594 85CD38     387       mov seed+0, TH2
0597 753901     388       mov seed+1, #0x01
059A 753A87     389       mov seed+2, #0x87
059D 85CC3B     390       mov seed+3, TL2
05A0 754400     391       mov p1points, #0x00
05A3 754500     392       mov p2points, #0x00
05A6            393       
05A6            394   forever:
05A6            395       ; Measure the frequency applied to pin T2
05A6            396       ; Measure the period applied to pin P2.0
05A6 C2CA       397       clr TR2 ; Stop counter 2
05A8 75CC00     398       mov TL2, #0
05AB 75CD00     399       mov TH2, #0
05AE 20A0FD     400       jb P2.0, $
05B1 30A0FD     401       jnb P2.0, $
05B4 D2CA       402       setb TR2 ; Start counter 0
05B6 20A0FD     403       jb P2.0, $
05B9 30A0FD     404       jnb P2.0, $
05BC C2CA       405       clr TR2 ; Stop counter 2, TH2-TL2 has the period
05BE            406       ; save the period of P2.0 for later use
05BE            407            ; Convert the result to BCD and display on LCD
05BE C0E0       408            push acc
05C0 740C       408            mov a, #12
05C2 14         408            dec a
05C3 12010D     408            lcall ?Set_Cursor_1 ; Select column and row
05C6 D0E0       408            pop acc
05C8 120476     409            lcall hex2bcd1
05CB            410       ;lcall DisplayBCD_LCD
05CB            411       
05CB            412       ; Measure the period applied to pin P2.1
05CB C2CA       413       clr TR2 ; Stop counter 2
05CD 75CC00     414       mov TL2, #0
05D0 75CD00     415       mov TH2, #0
05D3 20A1FD     416       jb P2.1, $
05D6 30A1FD     417       jnb P2.1, $
05D9 D2CA       418       setb TR2 ; Start counter 0
05DB 20A1FD     419       jb P2.1, $
05DE 30A1FD     420       jnb P2.1, $
05E1 C2CA       421       clr TR2 ; Stop counter 2, TH2-TL2 has the period
05E3            422       ; save the period of P2.1 for later use
05E3            423            ; Convert the result to BCD and display on LCD
05E3 C0E0       424            push acc
05E5 740C       424            mov a, #12
05E7 14         424            dec a
05E8 12010B     424            lcall ?Set_Cursor_2 ; Select column and row
05EB D0E0       424            pop acc
05ED 120476     425            lcall hex2bcd1
05F0            426      ; lcall DisplayBCD_LCD
05F0            427            ; Convert the result to BCD and display on LCD
05F0 02068E     428            ljmp start_game
05F3 0205A6     429       ljmp forever ;  Repeat! 
05F6            430   
05F6            431   forever1:
05F6 C0E0       432            push acc
05F8 7409       432            mov a, #9
05FA 14         432            dec a
05FB 12010D     432            lcall ?Set_Cursor_1 ; Select column and row
05FE D0E0       432            pop acc
0600 C000       433            push ar0
0602 A844       433            mov r0, p1points
0604 120112     433            lcall ?Display_BCD
0607 D000       433            pop ar0
0609 C0E0       434            push acc
060B 7409       434            mov a, #9
060D 14         434            dec a
060E 12010B     434            lcall ?Set_Cursor_2 ; Select column and row
0611 D0E0       434            pop acc
0613 C000       435            push ar0
0615 A845       435            mov r0, p2points
0617 120112     435            lcall ?Display_BCD
061A D000       435            pop ar0
061C            436       ; Measure the period applied to pin P2.0
061C C2CA       437       clr TR2 ; Stop counter 2
061E 75CC00     438       mov TL2, #0
0621 75CD00     439       mov TH2, #0
0624 20A0FD     440       jb P2.0, $
0627 30A0FD     441       jnb P2.0, $
062A D2CA       442       setb TR2 ; Start counter 0
062C 20A0FD     443       jb P2.0, $
062F 30A0FD     444       jnb P2.0, $
0632 C2CA       445       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0634            446       ; save the period of P2.0 for later use
0634            447            ; Convert the result to BCD and display on LCD
0634 C0E0       448            push acc
0636 740C       448            mov a, #12
0638 14         448            dec a
0639 12010D     448            lcall ?Set_Cursor_1 ; Select column and row
063C D0E0       448            pop acc
063E 120476     449            lcall hex2bcd1
0641            450       ;lcall DisplayBCD_LCD
0641 22         451       ret
0642            452   forever2:
0642 C0E0       453            push acc
0644 7409       453            mov a, #9
0646 14         453            dec a
0647 12010D     453            lcall ?Set_Cursor_1 ; Select column and row
064A D0E0       453            pop acc
064C C000       454            push ar0
064E A844       454            mov r0, p1points
0650 120112     454            lcall ?Display_BCD
0653 D000       454            pop ar0
0655 C0E0       455            push acc
0657 7409       455            mov a, #9
0659 14         455            dec a
065A 12010B     455            lcall ?Set_Cursor_2 ; Select column and row
065D D0E0       455            pop acc
065F C000       456            push ar0
0661 A845       456            mov r0, p2points
0663 120112     456            lcall ?Display_BCD
0666 D000       456            pop ar0
0668            457       ; Measure the period applied to pin P2.1
0668 C2CA       458       clr TR2 ; Stop counter 2
066A 75CC00     459       mov TL2, #0
066D 75CD00     460       mov TH2, #0
0670 20A1FD     461       jb P2.1, $
0673 30A1FD     462       jnb P2.1, $
0676 D2CA       463       setb TR2 ; Start counter 0
0678 20A1FD     464       jb P2.1, $
067B 30A1FD     465       jnb P2.1, $
067E C2CA       466       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0680            467       ; save the period of P2.1 for later use
0680            468            ; Convert the result to BCD and display on LCD
0680 C0E0       469            push acc
0682 740C       469            mov a, #12
0684 14         469            dec a
0685 12010B     469            lcall ?Set_Cursor_2 ; Select column and row
0688 D0E0       469            pop acc
068A 120476     470            lcall hex2bcd1
068D            471       ;lcall DisplayBCD_LCD
068D 22         472       ret
068E            473   start_game:
068E D201       474       setb p1_press
0690 D202       475       setb p2_press 
0692 C0E0       476            push acc
0694 7409       476            mov a, #9
0696 14         476            dec a
0697 12010D     476            lcall ?Set_Cursor_1 ; Select column and row
069A D0E0       476            pop acc
069C C000       477            push ar0
069E A844       477            mov r0, p1points
06A0 120112     477            lcall ?Display_BCD
06A3 D000       477            pop ar0
06A5 C0E0       478            push acc
06A7 7409       478            mov a, #9
06A9 14         478            dec a
06AA 12010B     478            lcall ?Set_Cursor_2 ; Select column and row
06AD D0E0       478            pop acc
06AF C000       479            push ar0
06B1 A845       479            mov r0, p2points
06B3 120112     479            lcall ?Display_BCD
06B6 D000       479            pop ar0  
06B8 C28C       480       clr TR0
06BA C28E       481       clr TR1
06BC 1204C3     482       lcall random
06BF 1204FA     483       lcall wait_random
06C2 E539       484       mov a, seed+1
06C4 A2E3       485       mov c, acc.3
06C6            486       ;mov HLbit, 
06C6            487      ; jb mf, lose_tone ;jumps depending on mf 
06C6            488      ; jc win_tone
06C6 4009       489       jc win_tone
06C8 0206CB     490       ljmp lose_tone
06CB            491   
06CB            492   lose_tone:
06CB 1203BE     493       lcall Timer1_Init
06CE 020770     494       ljmp start_game_nohit1
06D1            495   win_tone: 
06D1 1203DA     496       lcall Timer1_Init1
06D4 020707     497       ljmp start_game_hit1
06D7            498       
06D7            499   checkfreq1:
06D7 753425     500            mov y+0, #low (4645 % 0x10000) 
06DA 753512     500            mov y+1, #high(4645 % 0x10000) 
06DD 753600     500            mov y+2, #low (4645 / 0x10000) 
06E0 753700     500            mov y+3, #high(4645 / 0x10000) 
06E3 12028E     501       lcall x_gteq_y
06E6 100003     502       jbc mf, freq1_nopress
06E9 D201       503       setb p1_press
06EB 22         504       ret
06EC            505   
06EC            506   freq1_nopress:
06EC C201       507       clr p1_press
06EE 22         508       ret
06EF            509   
06EF            510   checkfreq2:
06EF 75342A     511            mov y+0, #low (4650 % 0x10000) 
06F2 753512     511            mov y+1, #high(4650 % 0x10000) 
06F5 753600     511            mov y+2, #low (4650 / 0x10000) 
06F8 753700     511            mov y+3, #high(4650 / 0x10000) 
06FB 12028E     512       lcall x_gteq_y
06FE 100003     513       jbc mf, freq2_press
0701 D202       514       setb p2_press
0703 22         515       ret
0704            516   
0704            517   freq2_press:
0704 C202       518       clr p2_press
0706 22         519       ret
0707            520   
0707            521   start_game_hit1:
0707 1205F6     522       lcall forever1
070A 12051F     523       lcall movtox
070D 1201B1     524       lcall bcd2hex
0710 1206D7     525       lcall checkfreq1
0713 120128     526       lcall hex2bcd
0716 120498     527       lcall DisplayBCD_LCD
0719 10011E     528       jbc p1_press, start_game_hit2
071C C28E       529       clr TR1
071E E4         530       clr a 
071F E544       531       mov a, p1points
0721 2401       532       add a, #0x01
0723 F544       533       mov p1points, a
0725 B4053E     534       cjne a, #0x05, start_jmp1
0728 E4         535       clr a
0729 D201       536       setb p1_press
072B D202       537       setb p2_press
072D 020730     538       ljmp p1win_jmp
0730            539   
0730            540   p1win_jmp:
0730 D201       541       setb p1_press
0732 D202       542       setb p2_press
0734 02080D     543       ljmp p1win
0737            544   checkfreq1_jmp:
0737 0206D7     545       ljmp checkfreq1
073A            546   start_game_hit2:
073A 120642     547       lcall forever2
073D 12051F     548       lcall movtox
0740 1201B1     549       lcall bcd2hex
0743 1206EF     550       lcall checkfreq2
0746 120128     551       lcall hex2bcd
0749 120498     552       lcall DisplayBCD_LCD
074C 1002B8     553       jbc p2_press, start_game_hit1
074F C28E       554       clr TR1
0751 E4         555       clr a 
0752 E545       556       mov a, p2points
0754 2401       557       add a, #0x01
0756 F545       558       mov p2points, a
0758 B4050B     559       cjne a, #0x05, start_jmp1
075B D201       560       setb p1_press
075D D202       561       setb p2_press
075F E4         562       clr a
0760 020769     563       ljmp p2win_jmp
0763            564   start_game_hit1_jmp:
0763 020707     565            ljmp start_game_hit1
0766            566            
0766            567   start_jmp1:
0766 02068E     568       ljmp start_game
0769            569   
0769            570   p2win_jmp:
0769 D201       571       setb p1_press
076B D202       572       setb p2_press
076D 0208A2     573       ljmp p2win
0770            574   
0770            575   start_game_nohit1:
0770 1205F6     576       lcall forever1
0773 12051F     577       lcall movtox
0776 1201B1     578       lcall bcd2hex
0779 1206D7     579       lcall checkfreq1
077C 120128     580       lcall hex2bcd
077F 120498     581       lcall DisplayBCD_LCD
0782 D28C       582       setb TR0
0784 100135     583       jbc p1_press, start_game_nohit2
0787 10040F     584       jbc half_seconds_flag, start_game_jmp
078A C28E       585       clr TR1
078C C28C       586       clr TR0
078E C204       587       clr half_seconds_flag
0790 E4         588       clr a 
0791 E544       589       mov a, p1points
0793 B40008     590       cjne a, #0x00, start_jmpsub1
0796 02068E     591       ljmp start_game
0799            592   
0799            593   start_game_jmp:
0799 C28C       594       clr TR0
079B 02068E     595       ljmp start_game
079E            596   
079E            597   start_jmpsub1:
079E            598       
079E F530       599       mov x, a
07A0 753401     600            mov y+0, #low (1 % 0x10000) 
07A3 753500     600            mov y+1, #high(1 % 0x10000) 
07A6 753600     600            mov y+2, #low (1 / 0x10000) 
07A9 753700     600            mov y+3, #high(1 / 0x10000) 
07AC 12020E     601       lcall sub32
07AF E530       602       mov a, x
07B1 D4         603       da a
07B2 F544       604       mov p1points, a
07B4 E4         605       clr a
07B5 D201       606       setb p1_press
07B7 D202       607       setb p2_press
07B9 02068E     608       ljmp start_game
07BC            609   
07BC            610   start_game_nohit2:
07BC 120642     611       lcall forever2
07BF 12051F     612       lcall movtox
07C2 1201B1     613       lcall bcd2hex
07C5 1206EF     614       lcall checkfreq2
07C8 120128     615       lcall hex2bcd
07CB 120498     616       lcall DisplayBCD_LCD
07CE D28C       617       setb TR0
07D0 10029D     618       jbc p2_press, start_game_nohit1
07D3 1004C3     619       jbc half_seconds_flag, start_game_jmp
07D6 C28E       620       clr TR1
07D8 C28C       621       clr TR0
07DA C204       622       clr half_seconds_flag
07DC E4         623       clr a 
07DD E545       624       mov a, p2points
07DF B40003     625       cjne a, #0x00, start_jmpsub2
07E2 020806     626       ljmp start_jmp
07E5            627       
07E5            628   start_jmpsub2:
07E5 F530       629       mov x, a
07E7 753401     630            mov y+0, #low (1 % 0x10000) 
07EA 753500     630            mov y+1, #high(1 % 0x10000) 
07ED 753600     630            mov y+2, #low (1 / 0x10000) 
07F0 753700     630            mov y+3, #high(1 / 0x10000) 
07F3 12020E     631       lcall sub32
07F6 E530       632       mov a, x
07F8 D4         633       da a
07F9 F545       634       mov p2points, a
07FB E4         635       clr a
07FC C201       636       clr p1_press
07FE C202       637       clr p2_press
0800 020806     638       ljmp start_jmp
0803            639       
0803            640   start_game_nohit1_jmp:
0803 020770     641            ljmp start_game_nohit1
0806            642   
0806            643   start_jmp:
0806 D201       644       setb p1_press
0808 D202       645       setb p2_press
080A 02068E     646       ljmp start_game
080D            647   p1win:
080D D201       648       setb p1_press
080F D202       649       setb p2_press
0811 C0E0       650            push acc
0813 740B       650            mov a, #11
0815 14         650            dec a
0816 12010D     650            lcall ?Set_Cursor_1 ; Select column and row
0819 D0E0       650            pop acc
081B C083       651            push dph
081D C082       651            push dpl
081F C0E0       651            push acc
0821 900044     651            mov dptr, #Winner1_message1
0824 120100     651            lcall ?Send_Constant_String
0827 D0E0       651            pop acc
0829 D082       651            pop dpl
082B D083       651            pop dph
082D C0E0       652            push acc
082F 740B       652            mov a, #11
0831 14         652            dec a
0832 12010B     652            lcall ?Set_Cursor_2 ; Select column and row
0835 D0E0       652            pop acc
0837 C083       653            push dph
0839 C082       653            push dpl
083B C0E0       653            push acc
083D 90004B     653            mov dptr, #Winner1_message2
0840 120100     653            lcall ?Send_Constant_String
0843 D0E0       653            pop acc
0845 D082       653            pop dpl
0847 D083       653            pop dph
0849 C002       654            push AR2
084B 7A05       654            mov R2, #5
084D 120087     654            lcall ?Wait_Milli_Seconds
0850 D002       654            pop AR2
0852            654   
0852 C0E0       655            push acc
0854 7401       655            mov a, #1
0856 14         655            dec a
0857 12010D     655            lcall ?Set_Cursor_1 ; Select column and row
085A D0E0       655            pop acc
085C C083       656            push dph
085E C082       656            push dpl
0860 C0E0       656            push acc
0862 900064     656            mov dptr, #Playagain
0865 120100     656            lcall ?Send_Constant_String
0868 D0E0       656            pop acc
086A D082       656            pop dpl
086C D083       656            pop dph
086E C0E0       657            push acc
0870 7401       657            mov a, #1
0872 14         657            dec a
0873 12010B     657            lcall ?Set_Cursor_2 ; Select column and row
0876 D0E0       657            pop acc
0878 C083       658            push dph
087A C082       658            push dpl
087C C0E0       658            push acc
087E 900071     658            mov dptr, #Clear_screen
0881 120100     658            lcall ?Send_Constant_String
0884 D0E0       658            pop acc
0886 D082       658            pop dpl
0888 D083       658            pop dph
088A 20C512     659       jb START_BUTTON, p1win_jmp2
088D C002       660            push AR2
088F 7A05       660            mov R2, #5
0891 120087     660            lcall ?Wait_Milli_Seconds
0894 D002       660            pop AR2
0896 20C506     661       jb START_BUTTON, p1win_jmp2
0899 30C5FD     662       jnb START_BUTTON, $
089C 02093A     663       ljmp restart_jmp
089F            664   p1win_jmp2:
089F 02080D     665       ljmp p1win
08A2            666   p2win: 
08A2 D201       667       setb p1_press
08A4 D202       668       setb p2_press
08A6 C0E0       669            push acc
08A8 740B       669            mov a, #11
08AA 14         669            dec a
08AB 12010D     669            lcall ?Set_Cursor_1 ; Select column and row
08AE D0E0       669            pop acc
08B0            669   
08B0 C083       670            push dph
08B2 C082       670            push dpl
08B4 C0E0       670            push acc
08B6 90004B     670            mov dptr, #Winner1_message2
08B9 120100     670            lcall ?Send_Constant_String
08BC D0E0       670            pop acc
08BE D082       670            pop dpl
08C0 D083       670            pop dph
08C2 C0E0       671            push acc
08C4 740B       671            mov a, #11
08C6 14         671            dec a
08C7 12010B     671            lcall ?Set_Cursor_2 ; Select column and row
08CA D0E0       671            pop acc
08CC C083       672            push dph
08CE C082       672            push dpl
08D0 C0E0       672            push acc
08D2 900044     672            mov dptr, #Winner1_message1
08D5 120100     672            lcall ?Send_Constant_String
08D8 D0E0       672            pop acc
08DA D082       672            pop dpl
08DC D083       672            pop dph
08DE C002       673            push AR2
08E0 7A32       673            mov R2, #50
08E2 120087     673            lcall ?Wait_Milli_Seconds
08E5 D002       673            pop AR2
08E7 C0E0       674            push acc
08E9 7401       674            mov a, #1
08EB 14         674            dec a
08EC 12010D     674            lcall ?Set_Cursor_1 ; Select column and row
08EF D0E0       674            pop acc
08F1 C083       675            push dph
08F3 C082       675            push dpl
08F5 C0E0       675            push acc
08F7 900064     675            mov dptr, #Playagain
08FA 120100     675            lcall ?Send_Constant_String
08FD D0E0       675            pop acc
08FF D082       675            pop dpl
0901 D083       675            pop dph
0903 C0E0       676            push acc
0905 7401       676            mov a, #1
0907 14         676            dec a
0908 12010B     676            lcall ?Set_Cursor_2 ; Select column and row
090B D0E0       676            pop acc
090D C083       677            push dph
090F C082       677            push dpl
0911 C0E0       677            push acc
0913 900071     677            mov dptr, #Clear_screen
0916 120100     677            lcall ?Send_Constant_String
0919 D0E0       677            pop acc
091B D082       677            pop dpl
091D D083       677            pop dph
091F 20C515     678       jb START_BUTTON, p2win_jmp1
0922 C002       679            push AR2
0924 7A32       679            mov R2, #50
0926 120087     679            lcall ?Wait_Milli_Seconds
0929 D002       679            pop AR2
092B 20C509     680       jb START_BUTTON, p2win_jmp1
092E 30C5FD     681       jnb START_BUTTON, $
0931 02093A     682       ljmp restart_jmp
0934            683   
0934            684   p1win_jmp1:
0934 02080D     685       ljmp p1win
0937            686   
0937            687   p2win_jmp1:
0937 0208A2     688       ljmp p2win
093A            689   
093A            690   restart_jmp:
093A 02093D     691       ljmp restart_game
093D            692   
093D            693   restart_game:
093D 754400     694       mov p1points, #0x00
0940 754500     695       mov p2points, #0x00
0943 C0E0       696            push acc
0945 7401       696            mov a, #1
0947 14         696            dec a
0948 12010D     696            lcall ?Set_Cursor_1 ; Select column and row
094B D0E0       696            pop acc
094D C083       697            push dph
094F C082       697            push dpl
0951 C0E0       697            push acc
0953 900071     697            mov dptr, #Clear_screen
0956 120100     697            lcall ?Send_Constant_String
0959 D0E0       697            pop acc
095B D082       697            pop dpl
095D D083       697            pop dph
095F C0E0       698            push acc
0961 7401       698            mov a, #1
0963 14         698            dec a
0964 12010B     698            lcall ?Set_Cursor_2 ; Select column and row
0967 D0E0       698            pop acc
0969 C083       699            push dph
096B C082       699            push dpl
096D C0E0       699            push acc
096F 900071     699            mov dptr, #Clear_screen
0972 120100     699            lcall ?Send_Constant_String
0975 D0E0       699            pop acc
0977 D082       699            pop dpl
0979 D083       699            pop dph
097B 02068E     700       ljmp start_game
097E            701   en
