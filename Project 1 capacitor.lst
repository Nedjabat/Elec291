                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P0.0
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   
0000             10   CLK           EQU 22118400
0000             11   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             12   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             13   TIMER1_RATE   EQU 4200     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             14   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))
0000             15   TIMER1_RATE1   EQU 4000  
0000             16   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1)))               ;2000Hz frequency lose frequency
0000             17   TIMER2_RATE   EQU 4200                 ;2100Hz frequency win frequency
0000             18   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             19   
0000             20   org 0000H
0000 0204A4      21      ljmp MyProgram
0003             22   
000B             23   org 0x000B
000B 02039E      24            ljmp Timer0_ISR
000E             25   
0013             26   org 0x0013
0013 32          27            reti
0014             28   
0014             29   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             30   org 0x001B
001B 0203C6      31            ljmp Timer1_ISR
001E             32   
001E             33   
0030             34   DSEG at 30H
0030             35   x:   ds 4
0034             36   y:   ds 4
0038             37   seed: ds 4  
003C             38   bcd: ds 5
0041             39   p1points: ds 1
0042             40   p2points: ds 1
0043             41   T0ov: ds 2
0045             42   T2ov: ds 2
0047             43   freq1: ds 4
004B             44   freq2: ds 4
004F             45   counter: ds 4
0053             46   
0000             47   BSEG
0000             48   mf: dbit 1
0001             49   p1_press: dbit 1
0002             50   p2_press: dbit 1
0003             51   
001E             52   cseg
001E             53   ; These 'equ' must match the hardware wiring
001E             54   LCD_RS equ P3.2
001E             55   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             56   LCD_E  equ P3.3
001E             57   LCD_D4 equ P3.4
001E             58   LCD_D5 equ P3.5
001E             59   LCD_D6 equ P3.6
001E             60   LCD_D7 equ P3.7
001E             61   SOUND_OUT equ P1.1
001E             62   
001E 506C6179    63   Initial_Message:  db 'Player1:          ', 0
     6572313A
     20202020
     20202020
     202000
0031 506C6179    64   Initial_Message2: db 'Player2:          ', 0
     6572323A
     20202020
     20202020
     202000
0044             65   
0044 57696E6E    66   Winner1_message1: db 'Winner!:D', 0
     6572213A
     4400
004E 4C6F7365    67   Winner1_message2: db 'Loser:P', 0
     723A5000
0056             68   
0056 4C6F7365    69   Winner2_message1: db 'Loser:P', 0
     723A5000
005E 57696E6E    70   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
0068             71   
0068 506C6179    72   Playagain       : db 'Play again ?', 0
     20616761
     696E203F
     00
0075 20202020    73   Clear_screen    : db '          ', 0
     20202020
     202000
0080             74   
                522   $LIST
                 77   $LIST
0385             79   
0385             80   Timer0_Init:
0385 E589        81            mov a, TMOD
0387 54F0        82            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
0389 4401        83            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
038B F589        84            mov TMOD, a
038D 758CEA      85            mov TH0, #high(TIMER0_RELOAD)
0390 758AE8      86            mov TL0, #low(TIMER0_RELOAD)
0393             87            ; Set autoreload value
0393 75F4EA      88            mov RH0, #high(TIMER0_RELOAD)
0396 75F2E8      89            mov RL0, #low(TIMER0_RELOAD)
0399             90            ; Enable the timer and interrupts
0399 D2A9        91       setb ET0  ; Enable timer 0 interrupt
039B D28C        92       setb TR0  ; Start timer 0
039D 22          93            ret
039E             94   
039E             95   Timer0_ISR:
039E C28D        96            clr TF0  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03A0 C0E0        97            push acc
03A2 0543        98            inc T0ov+0
03A4 E543        99            mov a, T0ov+0
03A6 7002       100            jnz Timer0_ISR_done
03A8 0544       101            inc T0ov+1
03AA            102   
03AA            103   Timer0_ISR_done:
03AA D0E0       104            pop acc
03AC 32         105            reti
03AD            106   
03AD            107   Timer1_Init:
03AD E589       108            mov a, TMOD
03AF 54F0       109            anl a, #0xf0 ; Clear the bits for timer 0
03B1 4401       110            orl a, #0x01 ; Configure timer 0 as 16-timer
03B3 F589       111            mov TMOD, a
03B5 758DEB     112            mov TH1, #high(TIMER1_RELOAD)
03B8 758B6E     113            mov TL1, #low(TIMER1_RELOAD)
03BB            114            ; Set autoreload value
03BB 75F5EB     115            mov RH1, #high(TIMER1_RELOAD)
03BE 75F36E     116            mov RL1, #low(TIMER1_RELOAD)
03C1            117            ; Enable the timer and interrupts
03C1 D2AB       118       setb ET1  ; Enable timer 0 interrupt
03C3 D28E       119       setb TR1  ; Start timer 0
03C5 22         120            ret
03C6            121   
03C6            122   ;---------------------------------;
03C6            123   ; ISR for timer 0.  Set to execute;
03C6            124   ; every 1/4096Hz to generate a    ;
03C6            125   ; 2048 Hz square wave at pin P1.1 ;
03C6            126   ;---------------------------------;
03C6            127   Timer1_ISR:
03C6            128            ;clr TF0  ; According to the data sheet this is done for us already.
03C6 B291       129            cpl SOUND_OUT ; Connect speaker to P1.1!
03C8 32         130            reti
03C9            131   
03C9            132   Timer1_Init1:
03C9 E589       133            mov a, TMOD
03CB 54F0       134            anl a, #0xf0 ; Clear the bits for timer 0
03CD 4401       135            orl a, #0x01 ; Configure timer 0 as 16-timer
03CF F589       136            mov TMOD, a
03D1 758DEA     137            mov TH1, #high(TIMER1_RELOAD1)
03D4 758B67     138            mov TL1, #low(TIMER1_RELOAD1)
03D7            139            ; Set autoreload value
03D7 75F5EA     140            mov RH1, #high(TIMER1_RELOAD1)
03DA 75F367     141            mov RL1, #low(TIMER1_RELOAD1)
03DD            142            ; Enable the timer and interrupts
03DD D2AB       143       setb ET1  ; Enable timer 0 interrupt
03DF D28E       144       setb TR1  ; Start timer 0
03E1 22         145            ret
03E2            146   
03E2            147   ;---------------------------------;
03E2            148   ; ISR for timer 0.  Set to execute;
03E2            149   ; every 1/4096Hz to generate a    ;
03E2            150   ; 2048 Hz square wave at pin P1.1 ;
03E2            151   ;---------------------------------;
03E2            152   ; When using a 22.1184MHz crystal in fast mode
03E2            153   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
03E2            154   ; (tuned manually to get as close to 1s as possible)
03E2            155   Wait1s:
03E2 7AB0       156       mov R2, #176
03E4 79FA       157   X3: mov R1, #250
03E6 78A6       158   X2: mov R0, #166
03E8 D8FE       159   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
03EA D9FA       160       djnz R1, X2 ; 22.51519us*250=5.629ms
03EC DAF6       161       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
03EE 22         162       ret
03EF            163   
03EF            164   ;Initializes timer/counter 2 as a 16-bit counter
03EF            165   InitTimer2:
03EF 75C802     166            mov T2CON, #0b_0000_0010 ; Stop timer/counter.  Set as counter (clock input is pin T2).
03F2            167            ; Set the reload value on overflow to zero (just in case is not zero)
03F2 75CB00     168            mov RCAP2H, #0
03F5 75CA00     169            mov RCAP2L, #0
03F8 D290       170       setb P1.0 ; P1.0 is connected to T2.  Make sure it can be used as input.
03FA 22         171       ret
03FB            172   
03FB            173   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
03FB            174   hex2bcd1:
03FB E4         175            clr a
03FC 7800       176       mov R0, #0  ;Set BCD result to 00000000 
03FE 7900       177       mov R1, #0
0400 7A00       178       mov R2, #0
0402 7B10       179       mov R3, #16 ;Loop counter.
0404            180   
0404            181   hex2bcd_loop:
0404 E5CC       182       mov a, TL2 ;Shift TH0-TL0 left through carry
0406 33         183       rlc a
0407 F5CC       184       mov TL2, a
0409            185       
0409 E5CD       186       mov a, TH2
040B 33         187       rlc a
040C F5CD       188       mov TH2, a
040E            189         
040E            190            ; Perform bcd + bcd + carry
040E            191            ; using BCD numbers
040E E8         192            mov a, R0
040F 38         193            addc a, R0
0410 D4         194            da a
0411 F8         195            mov R0, a
0412            196            
0412 E9         197            mov a, R1
0413 39         198            addc a, R1
0414 D4         199            da a
0415 F9         200            mov R1, a
0416            201            
0416 EA         202            mov a, R2
0417 3A         203            addc a, R2
0418 D4         204            da a
0419 FA         205            mov R2, a
041A            206            
041A DBE8       207            djnz R3, hex2bcd_loop
041C 22         208            ret
041D            209   
041D            210   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
041D            211   DisplayBCD_LCD:
041D            212            ; 5th digit:
041D EA         213       mov a, R2
041E 540F       214       anl a, #0FH
0420 4430       215       orl a, #'0' ; convert to ASCII
0422 1200D0     216            lcall ?WriteData
0425            217            ; 4th digit:
0425 E9         218       mov a, R1
0426 C4         219       swap a
0427 540F       220       anl a, #0FH
0429 4430       221       orl a, #'0' ; convert to ASCII
042B 1200D0     222            lcall ?WriteData
042E            223            ; 3rd digit:
042E E9         224       mov a, R1
042F 540F       225       anl a, #0FH
0431 4430       226       orl a, #'0' ; convert to ASCII
0433 1200D0     227            lcall ?WriteData
0436            228            ; 2nd digit:
0436 E8         229       mov a, R0
0437 C4         230       swap a
0438 540F       231       anl a, #0FH
043A 4430       232       orl a, #'0' ; convert to ASCII
043C 1200D0     233            lcall ?WriteData
043F            234            ; 1st digit:
043F E8         235       mov a, R0
0440 540F       236       anl a, #0FH
0442 4430       237       orl a, #'0' ; convert to ASCII
0444 1200D0     238            lcall ?WriteData
0447            239       
0447 22         240       ret
0448            241   random:
0448 853830     242       mov x+0, seed+0
044B 853931     243       mov x+1, seed+1
044E 853A32     244       mov x+2, seed+2
0451 853B33     245       mov x+3, seed+3
0454 7534FD     246            mov y+0, #low (214013 % 0x10000) 
0457 753543     246            mov y+1, #high(214013 % 0x10000) 
045A 753603     246            mov y+2, #low (214013 / 0x10000) 
045D 753700     246            mov y+3, #high(214013 / 0x10000) 
0460 120269     247       lcall mul32
0463 753443     248            mov y+0, #low (2451011 % 0x10000) 
0466 753566     248            mov y+1, #high(2451011 % 0x10000) 
0469 753625     248            mov y+2, #low (2451011 / 0x10000) 
046C 753700     248            mov y+3, #high(2451011 / 0x10000) 
046F 1201B4     249       lcall add32
0472 853038     250       mov seed+0, x+0
0475 853139     251       mov seed+1, x+1
0478 85323A     252       mov seed+2, x+2
047B 85333B     253       mov seed+3, x+3
047E 22         254       ret
047F            255   
047F            256   wait_random:
047F C002       257            push AR2
0481 AA38       257            mov R2, seed+0
0483 12008B     257            lcall ?Wait_Milli_Seconds
0486 D002       257            pop AR2
0488 C002       258            push AR2
048A AA39       258            mov R2, seed+1
048C 12008B     258            lcall ?Wait_Milli_Seconds
048F D002       258            pop AR2
0491 C002       259            push AR2
0493 AA3A       259            mov R2, seed+2
0495 12008B     259            lcall ?Wait_Milli_Seconds
0498 D002       259            pop AR2
049A C002       260            push AR2
049C AA3B       260            mov R2, seed+3
049E 12008B     260            lcall ?Wait_Milli_Seconds
04A1 D002       260            pop AR2
04A3 22         261       ret
04A4            262   ;---------------------------------;
04A4            263   ; Hardware initialization         ;
04A4            264   ;---------------------------------;
04A4            265   
04A4            266   ;---------------------------------;
04A4            267   ; Main program loop               ;
04A4            268   ;---------------------------------;
04A4            269   MyProgram:
04A4            270       ; Initialize the hardware:
04A4 75817F     271       mov SP, #7FH
04A7 C0E0       272            push acc
04A9 7401       272            mov a, #1
04AB 14         272            dec a
04AC 120111     272            lcall ?Set_Cursor_1 ; Select column and row
04AF D0E0       272            pop acc
04B1 C083       273            push dph
04B3 C082       273            push dpl
04B5 C0E0       273            push acc
04B7 90001E     273            mov dptr, #Initial_Message
04BA 120104     273            lcall ?Send_Constant_String
04BD D0E0       273            pop acc
04BF D082       273            pop dpl
04C1 D083       273            pop dph
04C3 C0E0       274            push acc
04C5 7401       274            mov a, #1
04C7 14         274            dec a
04C8 12010F     274            lcall ?Set_Cursor_2 ; Select column and row
04CB D0E0       274            pop acc
04CD C083       275            push dph
04CF C082       275            push dpl
04D1 C0E0       275            push acc
04D3 900031     275            mov dptr, #Initial_Message2
04D6 120104     275            lcall ?Send_Constant_String
04D9 D0E0       275            pop acc
04DB D082       275            pop dpl
04DD D083       275            pop dph
04DF 1203EF     276       lcall InitTimer2
04E2 D2AF       277       setb EA
04E4 20C5FD     278       jb P4.5, $
04E7 85CD38     279       mov seed+0, TH2
04EA 753901     280       mov seed+1, #0x01
04ED 753A87     281       mov seed+2, #0x87
04F0 85CC3B     282       mov seed+3, TL2
04F3 754100     283       mov p1points, #0x00
04F6 754200     284       mov p2points, #0x00
04F9            285       
04F9            286   forever:
04F9            287       ; Measure the frequency applied to pin T2
04F9 C2CA       288       clr TR2 ; Stop counter 2
04FB E4         289       clr a
04FC F5CC       290       mov TL2, a
04FE F5CD       291       mov TH2, a
0500 C2CF       292       clr TF2
0502 D2CA       293       setb TR2 ; Start counter 2
0504 1203E2     294       lcall Wait1s ; Wait one second
0507 C2CA       295       clr TR2 ; Stop counter 2, TH2-TL2 has the frequency
0509            296   
0509 C0E0       297            push acc
050B 740C       297            mov a, #12
050D 14         297            dec a
050E 12010F     297            lcall ?Set_Cursor_2 ; Select column and row
0511 D0E0       297            pop acc
0513 1203FB     298            lcall hex2bcd1
0516 12041D     299       lcall DisplayBCD_LCD
0519 02053F     300       ljmp start_game
051C            301            ; Convert the result to BCD and display on LCD
051C            302            
051C 80DB       303       sjmp forever ;  Repeat! 
051E            304   
051E            305   forever1:
051E C2CA       306       clr TR2 ; Stop counter 2
0520 E4         307       clr a
0521 F5CC       308       mov TL2, a
0523 F5CD       309       mov TH2, a
0525 C2CF       310       clr TF2
0527 D2CA       311       setb TR2 ; Start counter 2
0529 1203E2     312       lcall Wait1s ; Wait one second
052C C2CA       313       clr TR2 ; Stop counter 2, TH2-TL2 has the frequency
052E            314   
052E C0E0       315            push acc
0530 740C       315            mov a, #12
0532 14         315            dec a
0533 12010F     315            lcall ?Set_Cursor_2 ; Select column and row
0536 D0E0       315            pop acc
0538 1203FB     316            lcall hex2bcd1
053B 12041D     317       lcall DisplayBCD_LCD
053E 22         318       ret
053F            319   start_game:
053F C201       320       clr p1_press
0541 C202       321       clr p2_press
0543 C0E0       322            push acc
0545 7409       322            mov a, #9
0547 14         322            dec a
0548 120111     322            lcall ?Set_Cursor_1 ; Select column and row
054B D0E0       322            pop acc
054D C000       323            push ar0
054F A841       323            mov r0, p1points
0551 120116     323            lcall ?Display_BCD
0554 D000       323            pop ar0
0556 C0E0       324            push acc
0558 7409       324            mov a, #9
055A 14         324            dec a
055B 12010F     324            lcall ?Set_Cursor_2 ; Select column and row
055E D0E0       324            pop acc
0560 C000       325            push ar0
0562 A842       325            mov r0, p2points
0564 120116     325            lcall ?Display_BCD
0567 D000       325            pop ar0
0569 120448     326       lcall random
056C 12047F     327       lcall wait_random
056F E539       328       mov a, seed+1
0571 A2E3       329       mov c, acc.3
0573            330       ;mov HLbit, c
0573            331       ;jc lose_tone
0573 02058B     332       ljmp win_tone
0576            333   
0576            334   lose_tone:
0576 1203AD     335       lcall Timer1_Init
0579 753000     336            mov x+0, #low (0 % 0x10000) 
057C 753100     336            mov x+1, #high(0 % 0x10000) 
057F 753200     336            mov x+2, #low (0 / 0x10000) 
0582 753300     336            mov x+3, #high(0 / 0x10000) 
0585 85304F     337       mov counter, x
0588 02063A     338       ljmp start_game_nohit1
058B            339   win_tone: 
058B 1203C9     340       lcall Timer1_Init1
058E            341       
058E 020591     342       ljmp checkfreq1
0591            343       
0591            344   checkfreq1:
0591 12051E     345       lcall forever1
0594 753470     346            mov y+0, #low (4720 % 0x10000) 
0597 753512     346            mov y+1, #high(4720 % 0x10000) 
059A 753600     346            mov y+2, #low (4720 / 0x10000) 
059D 753700     346            mov y+3, #high(4720 / 0x10000) 
05A0 854730     347       mov x, freq1
05A3 12025F     348       lcall x_lteq_y
05A6 100003     349       jbc mf, freq1_press
05A9 0205D1     350       ljmp start_game_hit1
05AC            351   
05AC            352   freq1_press:
05AC D201       353       setb p1_press
05AE 0205D1     354       ljmp start_game_hit1
05B1            355   
05B1            356   checkfreq2:
05B1 12051E     357       lcall forever1
05B4 753470     358            mov y+0, #low (4720 % 0x10000) 
05B7 753512     358            mov y+1, #high(4720 % 0x10000) 
05BA 753600     358            mov y+2, #low (4720 / 0x10000) 
05BD 753700     358            mov y+3, #high(4720 / 0x10000) 
05C0 854B30     359       mov x, freq2
05C3 12025F     360       lcall x_lteq_y
05C6 100003     361       jbc mf, freq2_press
05C9 020604     362       ljmp start_game_hit2
05CC            363   
05CC            364   freq2_press:
05CC D202       365       setb p2_press
05CE 020604     366       ljmp start_game_hit2
05D1            367   
05D1            368   start_game_hit1:
05D1 12051E     369       lcall forever1
05D4 2001DA     370       jb p1_press, checkfreq2
05D7 C002       371            push AR2
05D9 7A32       371            mov R2, #50
05DB 12008B     371            lcall ?Wait_Milli_Seconds
05DE D002       371            pop AR2
05E0 2001CE     372       jb p1_press, checkfreq2
05E3 3001FD     373       jnb p1_press, $
05E6 C28E       374       clr TR1
05E8 E4         375       clr a 
05E9 E541       376       mov a, p1points
05EB 2401       377       add a, #0x01
05ED F541       378       mov p1points, a
05EF B4053E     379       cjne a, #0x05, start_jmp1
05F2 E4         380       clr a
05F3 C201       381       clr p1_press
05F5 C202       382       clr p2_press
05F7 0205FA     383       ljmp p1win_jmp
05FA            384   
05FA            385   p1win_jmp:
05FA C201       386       clr p1_press
05FC C202       387       clr p2_press
05FE 020734     388       ljmp p1win
0601            389   checkfreq1_jmp:
0601 020591     390       ljmp checkfreq1
0604            391   start_game_hit2:
0604 12051E     392       lcall forever1
0607 2002F7     393       jb p2_press, checkfreq1_jmp
060A C002       394            push AR2
060C 7A32       394            mov R2, #50
060E 12008B     394            lcall ?Wait_Milli_Seconds
0611 D002       394            pop AR2
0613 2002EB     395       jb p2_press, checkfreq1_jmp
0616 3002FD     396       jnb p2_press, $
0619 C28E       397       clr TR1
061B E4         398       clr a 
061C E542       399       mov a, p2points
061E 2401       400       add a, #0x01
0620 F542       401       mov p2points, a
0622 B4050B     402       cjne a, #0x05, start_jmp1
0625 C201       403       clr p1_press
0627 C202       404       clr p2_press
0629 E4         405       clr a
062A 020633     406       ljmp p2win_jmp
062D            407   start_game_hit1_jmp:
062D 0205D1     408            ljmp start_game_hit1
0630            409            
0630            410   start_jmp1:
0630 02053F     411       ljmp start_game
0633            412   
0633            413   p2win_jmp:
0633 C201       414       clr p1_press
0635 C202       415       clr p2_press
0637 0207BF     416       ljmp p2win
063A            417   
063A            418   start_game_nohit1:
063A 020591     419       ljmp checkfreq1
063D C0E0       420            push acc
063F 740F       420            mov a, #15
0641 14         420            dec a
0642 12010F     420            lcall ?Set_Cursor_2 ; Select column and row
0645 D0E0       420            pop acc
0647 C000       421            push ar0
0649 A84F       421            mov r0, counter
064B 120116     421            lcall ?Display_BCD
064E D000       421            pop ar0
0650 854F34     422       mov y, counter
0653 753001     423            mov x+0, #low (1 % 0x10000) 
0656 753100     423            mov x+1, #high(1 % 0x10000) 
0659 753200     423            mov x+2, #low (1 / 0x10000) 
065C 753300     423            mov x+3, #high(1 / 0x10000) 
065F 1201B4     424       lcall add32
0662 7534E8     425            mov y+0, #low (1000 % 0x10000) 
0665 753503     425            mov y+1, #high(1000 % 0x10000) 
0668 753600     425            mov y+2, #low (1000 / 0x10000) 
066B 753700     425            mov y+3, #high(1000 / 0x10000) 
066E 12022F     426       lcall x_eq_y
0671 200020     427       jb mf, start_game_jmp
0674 85304F     428       mov counter, X ; counter+
0677 200138     429       jb p1_press, start_game_nohit2
067A C002       430            push AR2
067C 7A32       430            mov R2, #50
067E 12008B     430            lcall ?Wait_Milli_Seconds
0681 D002       430            pop AR2
0683 20012C     431       jb p1_press, start_game_nohit2
0686 3001FD     432       jnb p1_press, $
0689 C28E       433       clr TR1
068B E4         434       clr a 
068C E541       435       mov a, p1points
068E B40006     436       cjne a, #0x00, start_jmpsub1
0691 02053F     437       ljmp start_game
0694            438   
0694            439   start_game_jmp:
0694 02053F     440       ljmp start_game
0697            441   
0697            442   start_jmpsub1:
0697 F530       443       mov x, a
0699 753401     444            mov y+0, #low (1 % 0x10000) 
069C 753500     444            mov y+1, #high(1 % 0x10000) 
069F 753600     444            mov y+2, #low (1 / 0x10000) 
06A2 753700     444            mov y+3, #high(1 / 0x10000) 
06A5 1201D5     445       lcall sub32
06A8 E530       446       mov a, x
06AA D4         447       da a
06AB F541       448       mov p1points, a
06AD E4         449       clr a
06AE C201       450       clr p1_press
06B0 C202       451       clr p2_press
06B2            452   
06B2            453   
06B2            454   start_game_nohit2:
06B2 0205B1     455       ljmp checkfreq2
06B5 C0E0       456            push acc
06B7 740F       456            mov a, #15
06B9 14         456            dec a
06BA 12010F     456            lcall ?Set_Cursor_2 ; Select column and row
06BD D0E0       456            pop acc
06BF C000       457            push ar0
06C1 A84F       457            mov r0, counter
06C3 120116     457            lcall ?Display_BCD
06C6 D000       457            pop ar0
06C8            458       
06C8 854F34     459       mov y, counter
06CB 753001     460            mov x+0, #low (1 % 0x10000) 
06CE 753100     460            mov x+1, #high(1 % 0x10000) 
06D1 753200     460            mov x+2, #low (1 / 0x10000) 
06D4 753300     460            mov x+3, #high(1 / 0x10000) 
06D7 1201B4     461       lcall add32
06DA 7534E8     462            mov y+0, #low (1000 % 0x10000) 
06DD 753503     462            mov y+1, #high(1000 % 0x10000) 
06E0 753600     462            mov y+2, #low (1000 / 0x10000) 
06E3 753700     462            mov y+3, #high(1000 / 0x10000) 
06E6 12022F     463       lcall x_eq_y
06E9 2000A8     464       jb mf, start_game_jmp
06EC 85304F     465       mov counter, X ; counter+
06EF            466   
06EF 200238     467       jb p2_press, start_game_nohit1_jmp
06F2 C002       468            push AR2
06F4 7A32       468            mov R2, #50
06F6 12008B     468            lcall ?Wait_Milli_Seconds
06F9 D002       468            pop AR2
06FB 20022C     469       jb p2_press, start_game_nohit1_jmp
06FE 3002FD     470       jnb p2_press, $
0701 C28E       471       clr TR1
0703 E4         472       clr a 
0704 E542       473       mov a, p2points
0706 B40003     474       cjne a, #0x00, start_jmpsub2
0709 02072D     475       ljmp start_jmp
070C            476       
070C            477   
070C            478   start_jmpsub2:
070C F530       479       mov x, a
070E 753401     480            mov y+0, #low (1 % 0x10000) 
0711 753500     480            mov y+1, #high(1 % 0x10000) 
0714 753600     480            mov y+2, #low (1 / 0x10000) 
0717 753700     480            mov y+3, #high(1 / 0x10000) 
071A 1201D5     481       lcall sub32
071D E530       482       mov a, x
071F D4         483       da a
0720 F542       484       mov p2points, a
0722 E4         485       clr a
0723 C201       486       clr p1_press
0725 C202       487       clr p2_press
0727 02072D     488       ljmp start_jmp
072A            489       
072A            490   start_game_nohit1_jmp:
072A 02063A     491            ljmp start_game_nohit1
072D            492   
072D            493   start_jmp:
072D C201       494       clr p1_press
072F C202       495       clr p2_press
0731 02053F     496       ljmp start_game
0734            497   p1win:
0734 C201       498       clr p1_press
0736 C202       499       clr p2_press
0738 C0E0       500            push acc
073A 7409       500            mov a, #9
073C 14         500            dec a
073D 120111     500            lcall ?Set_Cursor_1 ; Select column and row
0740 D0E0       500            pop acc
0742 C083       501            push dph
0744 C082       501            push dpl
0746 C0E0       501            push acc
0748 900044     501            mov dptr, #Winner1_message1
074B 120104     501            lcall ?Send_Constant_String
074E D0E0       501            pop acc
0750 D082       501            pop dpl
0752 D083       501            pop dph
0754 C083       502            push dph
0756 C082       502            push dpl
0758 C0E0       502            push acc
075A 90004E     502            mov dptr, #Winner1_message2
075D 120104     502            lcall ?Send_Constant_String
0760 D0E0       502            pop acc
0762 D082       502            pop dpl
0764 D083       502            pop dph
0766 C002       503            push AR2
0768 7A05       503            mov R2, #5
076A 12008B     503            lcall ?Wait_Milli_Seconds
076D D002       503            pop AR2
076F            503   
076F C0E0       504            push acc
0771 7401       504            mov a, #1
0773 14         504            dec a
0774 120111     504            lcall ?Set_Cursor_1 ; Select column and row
0777 D0E0       504            pop acc
0779 C083       505            push dph
077B C082       505            push dpl
077D C0E0       505            push acc
077F 900068     505            mov dptr, #Playagain
0782 120104     505            lcall ?Send_Constant_String
0785 D0E0       505            pop acc
0787 D082       505            pop dpl
0789 D083       505            pop dph
078B C0E0       506            push acc
078D 7401       506            mov a, #1
078F 14         506            dec a
0790 12010F     506            lcall ?Set_Cursor_2 ; Select column and row
0793 D0E0       506            pop acc
0795 C083       507            push dph
0797 C082       507            push dpl
0799 C0E0       507            push acc
079B 900075     507            mov dptr, #Clear_screen
079E 120104     507            lcall ?Send_Constant_String
07A1 D0E0       507            pop acc
07A3 D082       507            pop dpl
07A5 D083       507            pop dph
07A7 208012     508       jb START_BUTTON, p1win_jmp2
07AA C002       509            push AR2
07AC 7A05       509            mov R2, #5
07AE 12008B     509            lcall ?Wait_Milli_Seconds
07B1 D002       509            pop AR2
07B3 208006     510       jb START_BUTTON, p1win_jmp2
07B6 3080FD     511       jnb START_BUTTON, $
07B9 020857     512       ljmp restart_jmp
07BC            513   p1win_jmp2:
07BC 020734     514       ljmp p1win
07BF            515   p2win: 
07BF C201       516       clr p1_press
07C1 C202       517       clr p2_press
07C3 C0E0       518            push acc
07C5 7409       518            mov a, #9
07C7 14         518            dec a
07C8 120111     518            lcall ?Set_Cursor_1 ; Select column and row
07CB D0E0       518            pop acc
07CD C083       519            push dph
07CF C082       519            push dpl
07D1 C0E0       519            push acc
07D3 900056     519            mov dptr, #Winner2_message1
07D6 120104     519            lcall ?Send_Constant_String
07D9 D0E0       519            pop acc
07DB D082       519            pop dpl
07DD D083       519            pop dph
07DF C0E0       520            push acc
07E1 7409       520            mov a, #9
07E3 14         520            dec a
07E4 12010F     520            lcall ?Set_Cursor_2 ; Select column and row
07E7 D0E0       520            pop acc
07E9 C083       521            push dph
07EB C082       521            push dpl
07ED C0E0       521            push acc
07EF 90005E     521            mov dptr, #Winner2_message2
07F2 120104     521            lcall ?Send_Constant_String
07F5 D0E0       521            pop acc
07F7 D082       521            pop dpl
07F9 D083       521            pop dph
07FB C002       522            push AR2
07FD 7A32       522            mov R2, #50
07FF 12008B     522            lcall ?Wait_Milli_Seconds
0802 D002       522            pop AR2
0804 C0E0       523            push acc
0806 7401       523            mov a, #1
0808 14         523            dec a
0809 120111     523            lcall ?Set_Cursor_1 ; Select column and row
080C D0E0       523            pop acc
080E C083       524            push dph
0810 C082       524            push dpl
0812 C0E0       524            push acc
0814 900068     524            mov dptr, #Playagain
0817 120104     524            lcall ?Send_Constant_String
081A D0E0       524            pop acc
081C D082       524            pop dpl
081E D083       524            pop dph
0820 C0E0       525            push acc
0822 7401       525            mov a, #1
0824 14         525            dec a
0825 12010F     525            lcall ?Set_Cursor_2 ; Select column and row
0828 D0E0       525            pop acc
082A C083       526            push dph
082C C082       526            push dpl
082E C0E0       526            push acc
0830 900075     526            mov dptr, #Clear_screen
0833 120104     526            lcall ?Send_Constant_String
0836 D0E0       526            pop acc
0838 D082       526            pop dpl
083A D083       526            pop dph
083C 208015     527       jb START_BUTTON, p2win_jmp1
083F C002       528            push AR2
0841 7A32       528            mov R2, #50
0843 12008B     528            lcall ?Wait_Milli_Seconds
0846 D002       528            pop AR2
0848 208009     529       jb START_BUTTON, p2win_jmp1
084B 3080FD     530       jnb START_BUTTON, $
084E 020857     531       ljmp restart_jmp
0851            532   
0851            533   p1win_jmp1:
0851 020734     534       ljmp p1win
0854            535   
0854            536   p2win_jmp1:
0854 0207BF     537       ljmp p2win
0857            538   
0857            539   restart_jmp:
0857 02085A     540       ljmp restart_game
085A            541   
085A            542   restart_game:
085A 754100     543       mov p1points, #0x00
085D 754200     544       mov p2points, #0x00
0860 02053F     545       ljmp start_game
0863            546   end
