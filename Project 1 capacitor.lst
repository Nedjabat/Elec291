                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P0.0
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   
0000             10   CLK           EQU 22118400
0000             11   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             12   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             13   TIMER1_RATE   EQU 4200     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             14   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))
0000             15   TIMER1_RATE1   EQU 4000  
0000             16   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1)))               ;2000Hz frequency lose frequency
0000             17   TIMER2_RATE   EQU 4200                 ;2100Hz frequency win frequency
0000             18   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             19   
0000             20   org 0000H
0000 0204CC      21      ljmp MyProgram
0003             22   
000B             23   org 0x000B
000B 02039E      24            ljmp Timer0_ISR
000E             25   
0013             26   org 0x0013
0013 32          27            reti
0014             28   
0014             29   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             30   org 0x001B
001B 0203C6      31            ljmp Timer1_ISR
001E             32   
001E             33   
0030             34   DSEG at 30H
0030             35   x:   ds 4
0034             36   y:   ds 4
0038             37   seed: ds 4  
003C             38   bcd: ds 5
0041             39   p1points: ds 1
0042             40   p2points: ds 1
0043             41   T0ov: ds 2
0045             42   T2ov: ds 2
0047             43   freq1: ds 4
004B             44   freq2: ds 4
004F             45   counter: ds 4
0053             46   
0000             47   BSEG
0000             48   mf: dbit 1
0001             49   p1_press: dbit 1
0002             50   p2_press: dbit 1
0003             51   
001E             52   cseg
001E             53   ; These 'equ' must match the hardware wiring
001E             54   LCD_RS equ P3.2
001E             55   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             56   LCD_E  equ P3.3
001E             57   LCD_D4 equ P3.4
001E             58   LCD_D5 equ P3.5
001E             59   LCD_D6 equ P3.6
001E             60   LCD_D7 equ P3.7
001E             61   SOUND_OUT equ P1.1
001E             62   
001E 506C6179    63   Initial_Message:  db 'Player1:          ', 0
     6572313A
     20202020
     20202020
     202000
0031 506C6179    64   Initial_Message2: db 'Player2:          ', 0
     6572323A
     20202020
     20202020
     202000
0044             65   
0044 57696E6E    66   Winner1_message1: db 'Winner!:D', 0
     6572213A
     4400
004E 4C6F7365    67   Winner1_message2: db 'Loser:P', 0
     723A5000
0056             68   
0056 4C6F7365    69   Winner2_message1: db 'Loser:P', 0
     723A5000
005E 57696E6E    70   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
0068             71   
0068 506C6179    72   Playagain       : db 'Play again ?', 0
     20616761
     696E203F
     00
0075 20202020    73   Clear_screen    : db '          ', 0
     20202020
     202000
0080             74   
                522   $LIST
                 77   $LIST
0385             79   
0385             80   Timer0_Init:
0385 E589        81            mov a, TMOD
0387 54F0        82            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
0389 4401        83            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
038B F589        84            mov TMOD, a
038D 758CEA      85            mov TH0, #high(TIMER0_RELOAD)
0390 758AE8      86            mov TL0, #low(TIMER0_RELOAD)
0393             87            ; Set autoreload value
0393 75F4EA      88            mov RH0, #high(TIMER0_RELOAD)
0396 75F2E8      89            mov RL0, #low(TIMER0_RELOAD)
0399             90            ; Enable the timer and interrupts
0399 D2A9        91       setb ET0  ; Enable timer 0 interrupt
039B D28C        92       setb TR0  ; Start timer 0
039D 22          93            ret
039E             94   
039E             95   Timer0_ISR:
039E C28D        96            clr TF0  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03A0 C0E0        97            push acc
03A2 0543        98            inc T0ov+0
03A4 E543        99            mov a, T0ov+0
03A6 7002       100            jnz Timer0_ISR_done
03A8 0544       101            inc T0ov+1
03AA            102   
03AA            103   Timer0_ISR_done:
03AA D0E0       104            pop acc
03AC 32         105            reti
03AD            106   
03AD            107   Timer1_Init:
03AD E589       108            mov a, TMOD
03AF 54F0       109            anl a, #0xf0 ; Clear the bits for timer 0
03B1 4401       110            orl a, #0x01 ; Configure timer 0 as 16-timer
03B3 F589       111            mov TMOD, a
03B5 758DEB     112            mov TH1, #high(TIMER1_RELOAD)
03B8 758B6E     113            mov TL1, #low(TIMER1_RELOAD)
03BB            114            ; Set autoreload value
03BB 75F5EB     115            mov RH1, #high(TIMER1_RELOAD)
03BE 75F36E     116            mov RL1, #low(TIMER1_RELOAD)
03C1            117            ; Enable the timer and interrupts
03C1 D2AB       118       setb ET1  ; Enable timer 0 interrupt
03C3 D28E       119       setb TR1  ; Start timer 0
03C5 22         120            ret
03C6            121   
03C6            122   ;---------------------------------;
03C6            123   ; ISR for timer 0.  Set to execute;
03C6            124   ; every 1/4096Hz to generate a    ;
03C6            125   ; 2048 Hz square wave at pin P1.1 ;
03C6            126   ;---------------------------------;
03C6            127   Timer1_ISR:
03C6            128            ;clr TF0  ; According to the data sheet this is done for us already.
03C6 B291       129            cpl SOUND_OUT ; Connect speaker to P1.1!
03C8 32         130            reti
03C9            131   
03C9            132   Timer1_Init1:
03C9 E589       133            mov a, TMOD
03CB 54F0       134            anl a, #0xf0 ; Clear the bits for timer 0
03CD 4401       135            orl a, #0x01 ; Configure timer 0 as 16-timer
03CF F589       136            mov TMOD, a
03D1 758DEA     137            mov TH1, #high(TIMER1_RELOAD1)
03D4 758B67     138            mov TL1, #low(TIMER1_RELOAD1)
03D7            139            ; Set autoreload value
03D7 75F5EA     140            mov RH1, #high(TIMER1_RELOAD1)
03DA 75F367     141            mov RL1, #low(TIMER1_RELOAD1)
03DD            142            ; Enable the timer and interrupts
03DD D2AB       143       setb ET1  ; Enable timer 0 interrupt
03DF D28E       144       setb TR1  ; Start timer 0
03E1 22         145            ret
03E2            146   
03E2            147   ;---------------------------------;
03E2            148   ; ISR for timer 0.  Set to execute;
03E2            149   ; every 1/4096Hz to generate a    ;
03E2            150   ; 2048 Hz square wave at pin P1.1 ;
03E2            151   ;---------------------------------;
03E2            152   ; When using a 22.1184MHz crystal in fast mode
03E2            153   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
03E2            154   ; (tuned manually to get as close to 1s as possible)
03E2            155   Wait1s:
03E2 7AB0       156       mov R2, #176
03E4 79FA       157   X3: mov R1, #250
03E6 78A6       158   X2: mov R0, #166
03E8 D8FE       159   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
03EA D9FA       160       djnz R1, X2 ; 22.51519us*250=5.629ms
03EC DAF6       161       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
03EE 22         162       ret
03EF            163   
03EF            164   ;Initializes timer/counter 2 as a 16-bit counter
03EF            165   InitTimer2:
03EF 75C802     166            mov T2CON, #0b_0000_0010 ; Stop timer/counter.  Set as counter (clock input is pin T2).
03F2            167            ; Set the reload value on overflow to zero (just in case is not zero)
03F2 75CB00     168            mov RCAP2H, #0
03F5 75CA00     169            mov RCAP2L, #0
03F8 D290       170       setb P1.0 ; P1.0 is connected to T2.  Make sure it can be used as input.
03FA 22         171       ret
03FB            172   
03FB            173   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
03FB            174   hex2bcd1:
03FB E4         175            clr a
03FC 7800       176       mov R0, #0  ;Set BCD result to 00000000 
03FE 7900       177       mov R1, #0
0400 7A00       178       mov R2, #0
0402 7B10       179       mov R3, #16 ;Loop counter.
0404            180   
0404            181   hex2bcd_loop:
0404 E5CC       182       mov a, TL2 ;Shift TH0-TL0 left through carry
0406 33         183       rlc a
0407 F5CC       184       mov TL2, a
0409            185       
0409 E5CD       186       mov a, TH2
040B 33         187       rlc a
040C F5CD       188       mov TH2, a
040E            189         
040E            190            ; Perform bcd + bcd + carry
040E            191            ; using BCD numbers
040E E8         192            mov a, R0
040F 38         193            addc a, R0
0410 D4         194            da a
0411 F8         195            mov R0, a
0412            196            
0412 E9         197            mov a, R1
0413 39         198            addc a, R1
0414 D4         199            da a
0415 F9         200            mov R1, a
0416            201            
0416 EA         202            mov a, R2
0417 3A         203            addc a, R2
0418 D4         204            da a
0419 FA         205            mov R2, a
041A            206            
041A DBE8       207            djnz R3, hex2bcd_loop
041C 22         208            ret
041D            209   
041D            210   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
041D            211   DisplayBCD_LCD:
041D            212            ; 5th digit:
041D EA         213       mov a, R2
041E 540F       214       anl a, #0FH
0420 4430       215       orl a, #'0' ; convert to ASCII
0422 1200D0     216            lcall ?WriteData
0425            217            ; 4th digit:
0425 E9         218       mov a, R1
0426 C4         219       swap a
0427 540F       220       anl a, #0FH
0429 4430       221       orl a, #'0' ; convert to ASCII
042B 1200D0     222            lcall ?WriteData
042E            223            ; 3rd digit:
042E E9         224       mov a, R1
042F 540F       225       anl a, #0FH
0431 4430       226       orl a, #'0' ; convert to ASCII
0433 1200D0     227            lcall ?WriteData
0436            228            ; 2nd digit:
0436 E8         229       mov a, R0
0437 C4         230       swap a
0438 540F       231       anl a, #0FH
043A 4430       232       orl a, #'0' ; convert to ASCII
043C 1200D0     233            lcall ?WriteData
043F            234            ; 1st digit:
043F E8         235       mov a, R0
0440 540F       236       anl a, #0FH
0442 4430       237       orl a, #'0' ; convert to ASCII
0444 1200D0     238            lcall ?WriteData
0447            239       
0447 22         240       ret
0448            241   random:
0448 853830     242       mov x+0, seed+0
044B 853931     243       mov x+1, seed+1
044E 853A32     244       mov x+2, seed+2
0451 853B33     245       mov x+3, seed+3
0454 7534FD     246            mov y+0, #low (214013 % 0x10000) 
0457 753543     246            mov y+1, #high(214013 % 0x10000) 
045A 753603     246            mov y+2, #low (214013 / 0x10000) 
045D 753700     246            mov y+3, #high(214013 / 0x10000) 
0460 120269     247       lcall mul32
0463 753443     248            mov y+0, #low (2451011 % 0x10000) 
0466 753566     248            mov y+1, #high(2451011 % 0x10000) 
0469 753625     248            mov y+2, #low (2451011 / 0x10000) 
046C 753700     248            mov y+3, #high(2451011 / 0x10000) 
046F 1201B4     249       lcall add32
0472 853038     250       mov seed+0, x+0
0475 853139     251       mov seed+1, x+1
0478 85323A     252       mov seed+2, x+2
047B 85333B     253       mov seed+3, x+3
047E 22         254       ret
047F            255   
047F            256   wait_random:
047F C002       257            push AR2
0481 AA38       257            mov R2, seed+0
0483 12008B     257            lcall ?Wait_Milli_Seconds
0486 D002       257            pop AR2
0488 C002       258            push AR2
048A AA39       258            mov R2, seed+1
048C 12008B     258            lcall ?Wait_Milli_Seconds
048F D002       258            pop AR2
0491 C002       259            push AR2
0493 AA3A       259            mov R2, seed+2
0495 12008B     259            lcall ?Wait_Milli_Seconds
0498 D002       259            pop AR2
049A C002       260            push AR2
049C AA3B       260            mov R2, seed+3
049E 12008B     260            lcall ?Wait_Milli_Seconds
04A1 D002       260            pop AR2
04A3 22         261       ret
04A4            262   
04A4            263   movtox:
04A4            264            ; 5th digit:
04A4 EA         265       mov a, R2
04A5 540F       266       anl a, #0FH
04A7 4430       267       orl a, #'0' ; convert to ASCII
04A9 754000     268       mov bcd+4, #0
04AC 753F00     269       mov bcd+3, #0
04AF 8A3E       270       mov bcd+2, R2
04B1            271            ;lcall ?WriteData
04B1            272            ; 4th digit:
04B1 E9         273       mov a, R1
04B2 C4         274       swap a
04B3 540F       275       anl a, #0FH
04B5 4430       276       orl a, #'0' ; convert to ASCII
04B7            277            ;lcall ?WriteData
04B7            278            ; 3rd digit:
04B7 E9         279       mov a, R1
04B8 540F       280       anl a, #0FH
04BA 4430       281       orl a, #'0' ; convert to ASCII
04BC 893D       282       mov bcd+1, R1
04BE            283            ;lcall ?WriteData
04BE            284            ; 2nd digit:
04BE E8         285       mov a, R0
04BF C4         286       swap a
04C0 540F       287       anl a, #0FH
04C2 4430       288       orl a, #'0' ; convert to ASCII
04C4            289       
04C4            290            ;lcall ?WriteData
04C4            291            ; 1st digit:
04C4 E8         292       mov a, R0
04C5 540F       293       anl a, #0FH
04C7 4430       294       orl a, #'0' ; convert to ASCII
04C9 883C       295       mov bcd+0, R0
04CB            296            ;lcall ?WriteData
04CB            297       
04CB 22         298       ret
04CC            299   ;---------------------------------;
04CC            300   ; Hardware initialization         ;
04CC            301   ;---------------------------------;
04CC            302   
04CC            303   ;---------------------------------;
04CC            304   ; Main program loop               ;
04CC            305   ;---------------------------------;
04CC            306   MyProgram:
04CC            307       ; Initialize the hardware:
04CC 75817F     308       mov SP, #7FH
04CF C0E0       309            push acc
04D1 7401       309            mov a, #1
04D3 14         309            dec a
04D4 120111     309            lcall ?Set_Cursor_1 ; Select column and row
04D7 D0E0       309            pop acc
04D9 C083       310            push dph
04DB C082       310            push dpl
04DD C0E0       310            push acc
04DF 90001E     310            mov dptr, #Initial_Message
04E2 120104     310            lcall ?Send_Constant_String
04E5 D0E0       310            pop acc
04E7 D082       310            pop dpl
04E9 D083       310            pop dph
04EB C0E0       311            push acc
04ED 7401       311            mov a, #1
04EF 14         311            dec a
04F0 12010F     311            lcall ?Set_Cursor_2 ; Select column and row
04F3 D0E0       311            pop acc
04F5 C083       312            push dph
04F7 C082       312            push dpl
04F9 C0E0       312            push acc
04FB 900031     312            mov dptr, #Initial_Message2
04FE 120104     312            lcall ?Send_Constant_String
0501 D0E0       312            pop acc
0503 D082       312            pop dpl
0505 D083       312            pop dph
0507 1203EF     313       lcall InitTimer2
050A D2AF       314       setb EA
050C 20C5FD     315       jb P4.5, $
050F 85CD38     316       mov seed+0, TH2
0512 753901     317       mov seed+1, #0x01
0515 753A87     318       mov seed+2, #0x87
0518 85CC3B     319       mov seed+3, TL2
051B 754100     320       mov p1points, #0x00
051E 754200     321       mov p2points, #0x00
0521            322       
0521            323   forever:
0521            324       ; Measure the frequency applied to pin T2
0521 C2CA       325       clr TR2 ; Stop counter 2
0523 E4         326       clr a
0524 F5CC       327       mov TL2, a
0526 F5CD       328       mov TH2, a
0528 C2CF       329       clr TF2
052A D2CA       330       setb TR2 ; Start counter 2
052C 1203E2     331       lcall Wait1s ; Wait one second
052F C2CA       332       clr TR2 ; Stop counter 2, TH2-TL2 has the frequency
0531            333   
0531 C0E0       334            push acc
0533 740C       334            mov a, #12
0535 14         334            dec a
0536 12010F     334            lcall ?Set_Cursor_2 ; Select column and row
0539 D0E0       334            pop acc
053B 1203FB     335            lcall hex2bcd1
053E 12041D     336       lcall DisplayBCD_LCD
0541 020567     337       ljmp start_game
0544            338            ; Convert the result to BCD and display on LCD
0544            339            
0544 80DB       340       sjmp forever ;  Repeat! 
0546            341   
0546            342   forever1:
0546 C2CA       343       clr TR2 ; Stop counter 2
0548 E4         344       clr a
0549 F5CC       345       mov TL2, a
054B F5CD       346       mov TH2, a
054D C2CF       347       clr TF2
054F D2CA       348       setb TR2 ; Start counter 2
0551 1203E2     349       lcall Wait1s ; Wait one second
0554 C2CA       350       clr TR2 ; Stop counter 2, TH2-TL2 has the frequency
0556            351   
0556 C0E0       352            push acc
0558 740C       352            mov a, #12
055A 14         352            dec a
055B 12010F     352            lcall ?Set_Cursor_2 ; Select column and row
055E D0E0       352            pop acc
0560 1203FB     353            lcall hex2bcd1
0563 12041D     354       lcall DisplayBCD_LCD
0566 22         355       ret
0567            356   start_game:
0567 D201       357       setb p1_press
0569 D202       358       setb p2_press   
056B C0E0       359            push acc
056D 7409       359            mov a, #9
056F 14         359            dec a
0570 120111     359            lcall ?Set_Cursor_1 ; Select column and row
0573 D0E0       359            pop acc
0575 C000       360            push ar0
0577 A841       360            mov r0, p1points
0579 120116     360            lcall ?Display_BCD
057C D000       360            pop ar0
057E C0E0       361            push acc
0580 7409       361            mov a, #9
0582 14         361            dec a
0583 12010F     361            lcall ?Set_Cursor_2 ; Select column and row
0586 D0E0       361            pop acc
0588 C000       362            push ar0
058A A842       362            mov r0, p2points
058C 120116     362            lcall ?Display_BCD
058F D000       362            pop ar0
0591 120448     363       lcall random
0594 12047F     364       lcall wait_random
0597 E539       365       mov a, seed+1
0599 A2E3       366       mov c, acc.3
059B            367       ;mov HLbit, c
059B            368       ;jc lose_tone
059B 0205B3     369       ljmp win_tone
059E            370   
059E            371   lose_tone:
059E 1203AD     372       lcall Timer1_Init
05A1 753000     373            mov x+0, #low (0 % 0x10000) 
05A4 753100     373            mov x+1, #high(0 % 0x10000) 
05A7 753200     373            mov x+2, #low (0 / 0x10000) 
05AA 753300     373            mov x+3, #high(0 / 0x10000) 
05AD 85304F     374       mov counter, x
05B0 02063D     375       ljmp start_game_nohit1
05B3            376   win_tone: 
05B3 1203C9     377       lcall Timer1_Init1
05B6            378       
05B6 0205E8     379       ljmp start_game_hit1
05B9            380       
05B9            381   checkfreq1:
05B9 753489     382            mov y+0, #low (4745 % 0x10000) 
05BC 753512     382            mov y+1, #high(4745 % 0x10000) 
05BF 753600     382            mov y+2, #low (4745 / 0x10000) 
05C2 753700     382            mov y+3, #high(4745 / 0x10000) 
05C5 12025F     383       lcall x_lteq_y
05C8 100001     384       jbc mf, freq1_press
05CB 22         385       ret
05CC            386   
05CC            387   freq1_press:
05CC C201       388       clr p1_press
05CE 22         389       ret
05CF            390   
05CF            391   checkfreq2:
05CF 753489     392            mov y+0, #low (4745 % 0x10000) 
05D2 753512     392            mov y+1, #high(4745 % 0x10000) 
05D5 753600     392            mov y+2, #low (4745 / 0x10000) 
05D8 753700     392            mov y+3, #high(4745 / 0x10000) 
05DB 854B30     393       mov x, freq2
05DE 12025F     394       lcall x_lteq_y
05E1 100001     395       jbc mf, freq2_press
05E4 22         396       ret
05E5            397   
05E5            398   freq2_press:
05E5 C202       399       clr p2_press
05E7 22         400       ret
05E8            401   
05E8            402   start_game_hit1:
05E8 120546     403       lcall forever1
05EB 1204A4     404       lcall movtox
05EE 120178     405       lcall bcd2hex
05F1 1205B9     406       lcall checkfreq1
05F4 10011E     407       jbc p1_press, start_game_hit2
05F7 C28E       408       clr TR1
05F9 E4         409       clr a 
05FA E541       410       mov a, p1points
05FC 2401       411       add a, #0x01
05FE F541       412       mov p1points, a
0600 B40530     413       cjne a, #0x05, start_jmp1
0603 E4         414       clr a
0604 D201       415       setb p1_press
0606 D202       416       setb p2_press
0608 02060B     417       ljmp p1win_jmp
060B            418   
060B            419   p1win_jmp:
060B D201       420       setb p1_press
060D D202       421       setb p2_press
060F 020737     422       ljmp p1win
0612            423   checkfreq1_jmp:
0612 0205B9     424       ljmp checkfreq1
0615            425   start_game_hit2:
0615 120546     426       lcall forever1
0618 1205E5     427       lcall freq2_press
061B 1002CA     428       jbc p2_press, start_game_hit1
061E C28E       429       clr TR1
0620 E4         430       clr a 
0621 E542       431       mov a, p2points
0623            432       ;add a, #0x01
0623 F542       433       mov p2points, a
0625 B4050B     434       cjne a, #0x05, start_jmp1
0628 D201       435       setb p1_press
062A D202       436       setb p2_press
062C E4         437       clr a
062D 020636     438       ljmp p2win_jmp
0630            439   start_game_hit1_jmp:
0630 0205E8     440            ljmp start_game_hit1
0633            441            
0633            442   start_jmp1:
0633 020567     443       ljmp start_game
0636            444   
0636            445   p2win_jmp:
0636 D201       446       setb p1_press
0638 D202       447       setb p2_press
063A 0207CC     448       ljmp p2win
063D            449   
063D            450   start_game_nohit1:
063D 0205B9     451       ljmp checkfreq1
0640 C0E0       452            push acc
0642 740F       452            mov a, #15
0644 14         452            dec a
0645 12010F     452            lcall ?Set_Cursor_2 ; Select column and row
0648 D0E0       452            pop acc
064A C000       453            push ar0
064C A84F       453            mov r0, counter
064E 120116     453            lcall ?Display_BCD
0651 D000       453            pop ar0
0653 854F34     454       mov y, counter
0656 753001     455            mov x+0, #low (1 % 0x10000) 
0659 753100     455            mov x+1, #high(1 % 0x10000) 
065C 753200     455            mov x+2, #low (1 / 0x10000) 
065F 753300     455            mov x+3, #high(1 / 0x10000) 
0662 1201B4     456       lcall add32
0665 7534E8     457            mov y+0, #low (1000 % 0x10000) 
0668 753503     457            mov y+1, #high(1000 % 0x10000) 
066B 753600     457            mov y+2, #low (1000 / 0x10000) 
066E 753700     457            mov y+3, #high(1000 / 0x10000) 
0671 12022F     458       lcall x_eq_y
0674 200020     459       jb mf, start_game_jmp
0677 85304F     460       mov counter, x ; counter+
067A 200138     461       jb p1_press, start_game_nohit2
067D C002       462            push AR2
067F 7A32       462            mov R2, #50
0681 12008B     462            lcall ?Wait_Milli_Seconds
0684 D002       462            pop AR2
0686 20012C     463       jb p1_press, start_game_nohit2
0689 3001FD     464       jnb p1_press, $
068C C28E       465       clr TR1
068E E4         466       clr a 
068F E541       467       mov a, p1points
0691 B40006     468       cjne a, #0x00, start_jmpsub1
0694 020567     469       ljmp start_game
0697            470   
0697            471   start_game_jmp:
0697 020567     472       ljmp start_game
069A            473   
069A            474   start_jmpsub1:
069A F530       475       mov x, a
069C 753401     476            mov y+0, #low (1 % 0x10000) 
069F 753500     476            mov y+1, #high(1 % 0x10000) 
06A2 753600     476            mov y+2, #low (1 / 0x10000) 
06A5 753700     476            mov y+3, #high(1 / 0x10000) 
06A8 1201D5     477       lcall sub32
06AB E530       478       mov a, x
06AD D4         479       da a
06AE F541       480       mov p1points, a
06B0 E4         481       clr a
06B1 D201       482       setb p1_press
06B3 D202       483       setb p2_press
06B5            484   
06B5            485   
06B5            486   start_game_nohit2:
06B5 0205CF     487       ljmp checkfreq2
06B8 C0E0       488            push acc
06BA 740F       488            mov a, #15
06BC 14         488            dec a
06BD 12010F     488            lcall ?Set_Cursor_2 ; Select column and row
06C0 D0E0       488            pop acc
06C2 C000       489            push ar0
06C4 A84F       489            mov r0, counter
06C6 120116     489            lcall ?Display_BCD
06C9 D000       489            pop ar0
06CB            490       
06CB 854F34     491       mov y, counter
06CE 753001     492            mov x+0, #low (1 % 0x10000) 
06D1 753100     492            mov x+1, #high(1 % 0x10000) 
06D4 753200     492            mov x+2, #low (1 / 0x10000) 
06D7 753300     492            mov x+3, #high(1 / 0x10000) 
06DA 1201B4     493       lcall add32
06DD 7534E8     494            mov y+0, #low (1000 % 0x10000) 
06E0 753503     494            mov y+1, #high(1000 % 0x10000) 
06E3 753600     494            mov y+2, #low (1000 / 0x10000) 
06E6 753700     494            mov y+3, #high(1000 / 0x10000) 
06E9 12022F     495       lcall x_eq_y
06EC 2000A8     496       jb mf, start_game_jmp
06EF 85304F     497       mov counter, X ; counter+
06F2            498   
06F2 200238     499       jb p2_press, start_game_nohit1_jmp
06F5 C002       500            push AR2
06F7 7A32       500            mov R2, #50
06F9 12008B     500            lcall ?Wait_Milli_Seconds
06FC D002       500            pop AR2
06FE 20022C     501       jb p2_press, start_game_nohit1_jmp
0701 3002FD     502       jnb p2_press, $
0704 C28E       503       clr TR1
0706 E4         504       clr a 
0707 E542       505       mov a, p2points
0709 B40003     506       cjne a, #0x00, start_jmpsub2
070C 020730     507       ljmp start_jmp
070F            508       
070F            509   
070F            510   start_jmpsub2:
070F F530       511       mov x, a
0711 753401     512            mov y+0, #low (1 % 0x10000) 
0714 753500     512            mov y+1, #high(1 % 0x10000) 
0717 753600     512            mov y+2, #low (1 / 0x10000) 
071A 753700     512            mov y+3, #high(1 / 0x10000) 
071D 1201D5     513       lcall sub32
0720 E530       514       mov a, x
0722 D4         515       da a
0723 F542       516       mov p2points, a
0725 E4         517       clr a
0726 C201       518       clr p1_press
0728 C202       519       clr p2_press
072A 020730     520       ljmp start_jmp
072D            521       
072D            522   start_game_nohit1_jmp:
072D 02063D     523            ljmp start_game_nohit1
0730            524   
0730            525   start_jmp:
0730 D201       526       setb p1_press
0732 D202       527       setb p2_press
0734 020567     528       ljmp start_game
0737            529   p1win:
0737 D201       530       setb p1_press
0739 D202       531       setb p2_press
073B C0E0       532            push acc
073D 7409       532            mov a, #9
073F 14         532            dec a
0740 120111     532            lcall ?Set_Cursor_1 ; Select column and row
0743 D0E0       532            pop acc
0745 C083       533            push dph
0747 C082       533            push dpl
0749 C0E0       533            push acc
074B 900044     533            mov dptr, #Winner1_message1
074E 120104     533            lcall ?Send_Constant_String
0751 D0E0       533            pop acc
0753 D082       533            pop dpl
0755 D083       533            pop dph
0757 C0E0       534            push acc
0759 7409       534            mov a, #9
075B 14         534            dec a
075C 12010F     534            lcall ?Set_Cursor_2 ; Select column and row
075F D0E0       534            pop acc
0761 C083       535            push dph
0763 C082       535            push dpl
0765 C0E0       535            push acc
0767 90004E     535            mov dptr, #Winner1_message2
076A 120104     535            lcall ?Send_Constant_String
076D D0E0       535            pop acc
076F D082       535            pop dpl
0771 D083       535            pop dph
0773 C002       536            push AR2
0775 7A05       536            mov R2, #5
0777 12008B     536            lcall ?Wait_Milli_Seconds
077A D002       536            pop AR2
077C            536   
077C C0E0       537            push acc
077E 7401       537            mov a, #1
0780 14         537            dec a
0781 120111     537            lcall ?Set_Cursor_1 ; Select column and row
0784 D0E0       537            pop acc
0786 C083       538            push dph
0788 C082       538            push dpl
078A C0E0       538            push acc
078C 900068     538            mov dptr, #Playagain
078F 120104     538            lcall ?Send_Constant_String
0792 D0E0       538            pop acc
0794 D082       538            pop dpl
0796 D083       538            pop dph
0798 C0E0       539            push acc
079A 7401       539            mov a, #1
079C 14         539            dec a
079D 12010F     539            lcall ?Set_Cursor_2 ; Select column and row
07A0 D0E0       539            pop acc
07A2 C083       540            push dph
07A4 C082       540            push dpl
07A6 C0E0       540            push acc
07A8 900075     540            mov dptr, #Clear_screen
07AB 120104     540            lcall ?Send_Constant_String
07AE D0E0       540            pop acc
07B0 D082       540            pop dpl
07B2 D083       540            pop dph
07B4 208012     541       jb START_BUTTON, p1win_jmp2
07B7 C002       542            push AR2
07B9 7A05       542            mov R2, #5
07BB 12008B     542            lcall ?Wait_Milli_Seconds
07BE D002       542            pop AR2
07C0 208006     543       jb START_BUTTON, p1win_jmp2
07C3 3080FD     544       jnb START_BUTTON, $
07C6 020864     545       ljmp restart_jmp
07C9            546   p1win_jmp2:
07C9 020737     547       ljmp p1win
07CC            548   p2win: 
07CC D201       549       setb p1_press
07CE D202       550       setb p2_press
07D0 C0E0       551            push acc
07D2 7409       551            mov a, #9
07D4 14         551            dec a
07D5 120111     551            lcall ?Set_Cursor_1 ; Select column and row
07D8 D0E0       551            pop acc
07DA C083       552            push dph
07DC C082       552            push dpl
07DE C0E0       552            push acc
07E0 900056     552            mov dptr, #Winner2_message1
07E3 120104     552            lcall ?Send_Constant_String
07E6 D0E0       552            pop acc
07E8 D082       552            pop dpl
07EA D083       552            pop dph
07EC C0E0       553            push acc
07EE 7409       553            mov a, #9
07F0 14         553            dec a
07F1 12010F     553            lcall ?Set_Cursor_2 ; Select column and row
07F4 D0E0       553            pop acc
07F6 C083       554            push dph
07F8 C082       554            push dpl
07FA C0E0       554            push acc
07FC 90005E     554            mov dptr, #Winner2_message2
07FF 120104     554            lcall ?Send_Constant_String
0802 D0E0       554            pop acc
0804 D082       554            pop dpl
0806 D083       554            pop dph
0808 C002       555            push AR2
080A 7A32       555            mov R2, #50
080C 12008B     555            lcall ?Wait_Milli_Seconds
080F D002       555            pop AR2
0811 C0E0       556            push acc
0813 7401       556            mov a, #1
0815 14         556            dec a
0816 120111     556            lcall ?Set_Cursor_1 ; Select column and row
0819 D0E0       556            pop acc
081B C083       557            push dph
081D C082       557            push dpl
081F C0E0       557            push acc
0821 900068     557            mov dptr, #Playagain
0824 120104     557            lcall ?Send_Constant_String
0827 D0E0       557            pop acc
0829 D082       557            pop dpl
082B D083       557            pop dph
082D C0E0       558            push acc
082F 7401       558            mov a, #1
0831 14         558            dec a
0832 12010F     558            lcall ?Set_Cursor_2 ; Select column and row
0835 D0E0       558            pop acc
0837 C083       559            push dph
0839 C082       559            push dpl
083B C0E0       559            push acc
083D 900075     559            mov dptr, #Clear_screen
0840 120104     559            lcall ?Send_Constant_String
0843 D0E0       559            pop acc
0845 D082       559            pop dpl
0847 D083       559            pop dph
0849 208015     560       jb START_BUTTON, p2win_jmp1
084C C002       561            push AR2
084E 7A32       561            mov R2, #50
0850 12008B     561            lcall ?Wait_Milli_Seconds
0853 D002       561            pop AR2
0855 208009     562       jb START_BUTTON, p2win_jmp1
0858 3080FD     563       jnb START_BUTTON, $
085B 020864     564       ljmp restart_jmp
085E            565   
085E            566   p1win_jmp1:
085E 020737     567       ljmp p1win
0861            568   
0861            569   p2win_jmp1:
0861 0207CC     570       ljmp p2win
0864            571   
0864            572   restart_jmp:
0864 020867     573       ljmp restart_game
0867            574   
0867            575   restart_game:
0867 754100     576       mov p1points, #0x00
086A 754200     577       mov p2points, #0x00
086D 020567     578       ljmp start_game
0870            579   end
