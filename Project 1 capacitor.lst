                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P0.0
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   
0000             10   CLK           EQU 22118400
0000             11   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             12   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             13   TIMER1_RATE   EQU 4200     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             14   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))
0000             15   TIMER1_RATE1   EQU 4000  
0000             16   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1)))               ;2000Hz frequency lose frequency
0000             17   TIMER2_RATE   EQU 4200                 ;2100Hz frequency win frequency
0000             18   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             19   
0000             20   org 0000H
0000 0204A4      21      ljmp MyProgram
0003             22   
000B             23   org 0x000B
000B 02039E      24            ljmp Timer0_ISR
000E             25   
0013             26   org 0x0013
0013 32          27            reti
0014             28   
0014             29   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             30   org 0x001B
001B 0203C6      31            ljmp Timer1_ISR
001E             32   
001E             33   
0030             34   DSEG at 30H
0030             35   x:   ds 4
0034             36   y:   ds 4
0038             37   seed: ds 4  
003C             38   bcd: ds 5
0041             39   p1points: ds 1
0042             40   p2points: ds 1
0043             41   T0ov: ds 2
0045             42   T2ov: ds 2
0047             43   freq1: ds 4
004B             44   freq2: ds 4
004F             45   counter: ds 4
0053             46   
0000             47   BSEG
0000             48   mf: dbit 1
0001             49   p1_press: dbit 1
0002             50   p2_press: dbit 1
0003             51   
001E             52   cseg
001E             53   ; These 'equ' must match the hardware wiring
001E             54   LCD_RS equ P3.2
001E             55   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             56   LCD_E  equ P3.3
001E             57   LCD_D4 equ P3.4
001E             58   LCD_D5 equ P3.5
001E             59   LCD_D6 equ P3.6
001E             60   LCD_D7 equ P3.7
001E             61   SOUND_OUT equ P1.1
001E             62   
001E 506C6179    63   Initial_Message:  db 'Player1:          ', 0
     6572313A
     20202020
     20202020
     202000
0031 506C6179    64   Initial_Message2: db 'Player2:          ', 0
     6572323A
     20202020
     20202020
     202000
0044             65   
0044 57696E6E    66   Winner1_message1: db 'Winner!:D', 0
     6572213A
     4400
004E 4C6F7365    67   Winner1_message2: db 'Loser:P', 0
     723A5000
0056             68   
0056 4C6F7365    69   Winner2_message1: db 'Loser:P', 0
     723A5000
005E 57696E6E    70   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
0068             71   
0068 506C6179    72   Playagain       : db 'Play again ?', 0
     20616761
     696E203F
     00
0075 20202020    73   Clear_screen    : db '          ', 0
     20202020
     202000
0080             74   
                522   $LIST
                 77   $LIST
0385             79   
0385             80   Timer0_Init:
0385 E589        81            mov a, TMOD
0387 54F0        82            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
0389 4401        83            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
038B F589        84            mov TMOD, a
038D 758CEA      85            mov TH0, #high(TIMER0_RELOAD)
0390 758AE8      86            mov TL0, #low(TIMER0_RELOAD)
0393             87            ; Set autoreload value
0393 75F4EA      88            mov RH0, #high(TIMER0_RELOAD)
0396 75F2E8      89            mov RL0, #low(TIMER0_RELOAD)
0399             90            ; Enable the timer and interrupts
0399 D2A9        91       setb ET0  ; Enable timer 0 interrupt
039B D28C        92       setb TR0  ; Start timer 0
039D 22          93            ret
039E             94   
039E             95   Timer0_ISR:
039E C28D        96            clr TF0  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03A0 C0E0        97            push acc
03A2 0543        98            inc T0ov+0
03A4 E543        99            mov a, T0ov+0
03A6 7002       100            jnz Timer0_ISR_done
03A8 0544       101            inc T0ov+1
03AA            102   
03AA            103   Timer0_ISR_done:
03AA D0E0       104            pop acc
03AC 32         105            reti
03AD            106   
03AD            107   Timer1_Init:
03AD E589       108            mov a, TMOD
03AF 54F0       109            anl a, #0xf0 ; Clear the bits for timer 0
03B1 4401       110            orl a, #0x01 ; Configure timer 0 as 16-timer
03B3 F589       111            mov TMOD, a
03B5 758DEB     112            mov TH1, #high(TIMER1_RELOAD)
03B8 758B6E     113            mov TL1, #low(TIMER1_RELOAD)
03BB            114            ; Set autoreload value
03BB 75F5EB     115            mov RH1, #high(TIMER1_RELOAD)
03BE 75F36E     116            mov RL1, #low(TIMER1_RELOAD)
03C1            117            ; Enable the timer and interrupts
03C1 D2AB       118       setb ET1  ; Enable timer 0 interrupt
03C3 D28E       119       setb TR1  ; Start timer 0
03C5 22         120            ret
03C6            121   
03C6            122   ;---------------------------------;
03C6            123   ; ISR for timer 0.  Set to execute;
03C6            124   ; every 1/4096Hz to generate a    ;
03C6            125   ; 2048 Hz square wave at pin P1.1 ;
03C6            126   ;---------------------------------;
03C6            127   Timer1_ISR:
03C6            128            ;clr TF0  ; According to the data sheet this is done for us already.
03C6 B291       129            cpl SOUND_OUT ; Connect speaker to P1.1!
03C8 32         130            reti
03C9            131   
03C9            132   Timer1_Init1:
03C9 E589       133            mov a, TMOD
03CB 54F0       134            anl a, #0xf0 ; Clear the bits for timer 0
03CD 4401       135            orl a, #0x01 ; Configure timer 0 as 16-timer
03CF F589       136            mov TMOD, a
03D1 758DEA     137            mov TH1, #high(TIMER1_RELOAD1)
03D4 758B67     138            mov TL1, #low(TIMER1_RELOAD1)
03D7            139            ; Set autoreload value
03D7 75F5EA     140            mov RH1, #high(TIMER1_RELOAD1)
03DA 75F367     141            mov RL1, #low(TIMER1_RELOAD1)
03DD            142            ; Enable the timer and interrupts
03DD D2AB       143       setb ET1  ; Enable timer 0 interrupt
03DF D28E       144       setb TR1  ; Start timer 0
03E1 22         145            ret
03E2            146   
03E2            147   ;---------------------------------;
03E2            148   ; ISR for timer 0.  Set to execute;
03E2            149   ; every 1/4096Hz to generate a    ;
03E2            150   ; 2048 Hz square wave at pin P1.1 ;
03E2            151   ;---------------------------------;
03E2            152   ; When using a 22.1184MHz crystal in fast mode
03E2            153   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
03E2            154   ; (tuned manually to get as close to 1s as possible)
03E2            155   Wait1s:
03E2 7AB0       156       mov R2, #176
03E4 79FA       157   X3: mov R1, #250
03E6 78A6       158   X2: mov R0, #166
03E8 D8FE       159   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
03EA D9FA       160       djnz R1, X2 ; 22.51519us*250=5.629ms
03EC DAF6       161       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
03EE 22         162       ret
03EF            163   
03EF            164   ;Initializes timer/counter 2 as a 16-bit counter
03EF            165   InitTimer2:
03EF 75C802     166            mov T2CON, #0b_0000_0010 ; Stop timer/counter.  Set as counter (clock input is pin T2).
03F2            167            ; Set the reload value on overflow to zero (just in case is not zero)
03F2 75CB00     168            mov RCAP2H, #0
03F5 75CA00     169            mov RCAP2L, #0
03F8 D290       170       setb P1.0 ; P1.0 is connected to T2.  Make sure it can be used as input.
03FA 22         171       ret
03FB            172   
03FB            173   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
03FB            174   hex2bcd1:
03FB E4         175            clr a
03FC 7800       176       mov R0, #0  ;Set BCD result to 00000000 
03FE 7900       177       mov R1, #0
0400 7A00       178       mov R2, #0
0402 7B10       179       mov R3, #16 ;Loop counter.
0404            180   
0404            181   hex2bcd_loop:
0404 E5CC       182       mov a, TL2 ;Shift TH0-TL0 left through carry
0406 33         183       rlc a
0407 F5CC       184       mov TL2, a
0409            185       
0409 E5CD       186       mov a, TH2
040B 33         187       rlc a
040C F5CD       188       mov TH2, a
040E            189         
040E            190            ; Perform bcd + bcd + carry
040E            191            ; using BCD numbers
040E E8         192            mov a, R0
040F 38         193            addc a, R0
0410 D4         194            da a
0411 F8         195            mov R0, a
0412            196            
0412 E9         197            mov a, R1
0413 39         198            addc a, R1
0414 D4         199            da a
0415 F9         200            mov R1, a
0416            201            
0416 EA         202            mov a, R2
0417 3A         203            addc a, R2
0418 D4         204            da a
0419 FA         205            mov R2, a
041A            206            
041A DBE8       207            djnz R3, hex2bcd_loop
041C 22         208            ret
041D            209   
041D            210   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
041D            211   DisplayBCD_LCD:
041D            212            ; 5th digit:
041D EA         213       mov a, R2
041E 540F       214       anl a, #0FH
0420 4430       215       orl a, #'0' ; convert to ASCII
0422 1200D0     216            lcall ?WriteData
0425            217            ; 4th digit:
0425 E9         218       mov a, R1
0426 C4         219       swap a
0427 540F       220       anl a, #0FH
0429 4430       221       orl a, #'0' ; convert to ASCII
042B 1200D0     222            lcall ?WriteData
042E            223            ; 3rd digit:
042E E9         224       mov a, R1
042F 540F       225       anl a, #0FH
0431 4430       226       orl a, #'0' ; convert to ASCII
0433 1200D0     227            lcall ?WriteData
0436            228            ; 2nd digit:
0436 E8         229       mov a, R0
0437 C4         230       swap a
0438 540F       231       anl a, #0FH
043A 4430       232       orl a, #'0' ; convert to ASCII
043C 1200D0     233            lcall ?WriteData
043F            234            ; 1st digit:
043F E8         235       mov a, R0
0440 540F       236       anl a, #0FH
0442 4430       237       orl a, #'0' ; convert to ASCII
0444 1200D0     238            lcall ?WriteData
0447            239       
0447 22         240       ret
0448            241   random:
0448 853830     242       mov x+0, seed+0
044B 853931     243       mov x+1, seed+1
044E 853A32     244       mov x+2, seed+2
0451 853B33     245       mov x+3, seed+3
0454 7534FD     246            mov y+0, #low (214013 % 0x10000) 
0457 753543     246            mov y+1, #high(214013 % 0x10000) 
045A 753603     246            mov y+2, #low (214013 / 0x10000) 
045D 753700     246            mov y+3, #high(214013 / 0x10000) 
0460 120269     247       lcall mul32
0463 753443     248            mov y+0, #low (2451011 % 0x10000) 
0466 753566     248            mov y+1, #high(2451011 % 0x10000) 
0469 753625     248            mov y+2, #low (2451011 / 0x10000) 
046C 753700     248            mov y+3, #high(2451011 / 0x10000) 
046F 1201B4     249       lcall add32
0472 853038     250       mov seed+0, x+0
0475 853139     251       mov seed+1, x+1
0478 85323A     252       mov seed+2, x+2
047B 85333B     253       mov seed+3, x+3
047E 22         254       ret
047F            255   
047F            256   wait_random:
047F C002       257            push AR2
0481 AA38       257            mov R2, seed+0
0483 12008B     257            lcall ?Wait_Milli_Seconds
0486 D002       257            pop AR2
0488 C002       258            push AR2
048A AA39       258            mov R2, seed+1
048C 12008B     258            lcall ?Wait_Milli_Seconds
048F D002       258            pop AR2
0491 C002       259            push AR2
0493 AA3A       259            mov R2, seed+2
0495 12008B     259            lcall ?Wait_Milli_Seconds
0498 D002       259            pop AR2
049A C002       260            push AR2
049C AA3B       260            mov R2, seed+3
049E 12008B     260            lcall ?Wait_Milli_Seconds
04A1 D002       260            pop AR2
04A3 22         261       ret
04A4            262   ;---------------------------------;
04A4            263   ; Hardware initialization         ;
04A4            264   ;---------------------------------;
04A4            265   
04A4            266   ;---------------------------------;
04A4            267   ; Main program loop               ;
04A4            268   ;---------------------------------;
04A4            269   MyProgram:
04A4            270       ; Initialize the hardware:
04A4 75817F     271       mov SP, #7FH
04A7 C0E0       272            push acc
04A9 7401       272            mov a, #1
04AB 14         272            dec a
04AC 120111     272            lcall ?Set_Cursor_1 ; Select column and row
04AF D0E0       272            pop acc
04B1 C083       273            push dph
04B3 C082       273            push dpl
04B5 C0E0       273            push acc
04B7 90001E     273            mov dptr, #Initial_Message
04BA 120104     273            lcall ?Send_Constant_String
04BD D0E0       273            pop acc
04BF D082       273            pop dpl
04C1 D083       273            pop dph
04C3 C0E0       274            push acc
04C5 7401       274            mov a, #1
04C7 14         274            dec a
04C8 12010F     274            lcall ?Set_Cursor_2 ; Select column and row
04CB D0E0       274            pop acc
04CD C083       275            push dph
04CF C082       275            push dpl
04D1 C0E0       275            push acc
04D3 900031     275            mov dptr, #Initial_Message2
04D6 120104     275            lcall ?Send_Constant_String
04D9 D0E0       275            pop acc
04DB D082       275            pop dpl
04DD D083       275            pop dph
04DF 1203EF     276       lcall InitTimer2
04E2 D2AF       277       setb EA
04E4 20C5FD     278       jb P4.5, $
04E7 85CD38     279       mov seed+0, TH2
04EA 753901     280       mov seed+1, #0x01
04ED 753A87     281       mov seed+2, #0x87
04F0 85CC3B     282       mov seed+3, TL2
04F3 754100     283       mov p1points, #0x00
04F6 754200     284       mov p2points, #0x00
04F9            285       
04F9            286   forever:
04F9            287       ; Measure the frequency applied to pin T2
04F9 C2CA       288       clr TR2 ; Stop counter 2
04FB E4         289       clr a
04FC F5CC       290       mov TL2, a
04FE F5CD       291       mov TH2, a
0500 C2CF       292       clr TF2
0502 D2CA       293       setb TR2 ; Start counter 2
0504 1203E2     294       lcall Wait1s ; Wait one second
0507 C2CA       295       clr TR2 ; Stop counter 2, TH2-TL2 has the frequency
0509            296   
0509 C0E0       297            push acc
050B 740C       297            mov a, #12
050D 14         297            dec a
050E 12010F     297            lcall ?Set_Cursor_2 ; Select column and row
0511 D0E0       297            pop acc
0513 1203FB     298            lcall hex2bcd1
0516 12041D     299       lcall DisplayBCD_LCD
0519 02053F     300       ljmp start_game
051C            301            ; Convert the result to BCD and display on LCD
051C            302            
051C 80DB       303       sjmp forever ;  Repeat! 
051E            304   
051E            305   forever1:
051E C2CA       306       clr TR2 ; Stop counter 2
0520 E4         307       clr a
0521 F5CC       308       mov TL2, a
0523 F5CD       309       mov TH2, a
0525 C2CF       310       clr TF2
0527 D2CA       311       setb TR2 ; Start counter 2
0529 1203E2     312       lcall Wait1s ; Wait one second
052C C2CA       313       clr TR2 ; Stop counter 2, TH2-TL2 has the frequency
052E            314   
052E C0E0       315            push acc
0530 740C       315            mov a, #12
0532 14         315            dec a
0533 12010F     315            lcall ?Set_Cursor_2 ; Select column and row
0536 D0E0       315            pop acc
0538 1203FB     316            lcall hex2bcd1
053B 12041D     317       lcall DisplayBCD_LCD
053E 22         318       ret
053F            319   start_game:
053F C201       320       clr p1_press
0541 C202       321       clr p2_press
0543 C0E0       322            push acc
0545 7409       322            mov a, #9
0547 14         322            dec a
0548 120111     322            lcall ?Set_Cursor_1 ; Select column and row
054B D0E0       322            pop acc
054D C000       323            push ar0
054F A841       323            mov r0, p1points
0551 120116     323            lcall ?Display_BCD
0554 D000       323            pop ar0
0556 C0E0       324            push acc
0558 7409       324            mov a, #9
055A 14         324            dec a
055B 12010F     324            lcall ?Set_Cursor_2 ; Select column and row
055E D0E0       324            pop acc
0560 C000       325            push ar0
0562 A842       325            mov r0, p2points
0564 120116     325            lcall ?Display_BCD
0567 D000       325            pop ar0
0569 120448     326       lcall random
056C 12047F     327       lcall wait_random
056F E539       328       mov a, seed+1
0571 A2E3       329       mov c, acc.3
0573            330       ;mov HLbit, c
0573            331       ;jc lose_tone
0573 02058B     332       ljmp win_tone
0576            333   
0576            334   lose_tone:
0576 1203AD     335       lcall Timer1_Init
0579 753000     336            mov x+0, #low (0 % 0x10000) 
057C 753100     336            mov x+1, #high(0 % 0x10000) 
057F 753200     336            mov x+2, #low (0 / 0x10000) 
0582 753300     336            mov x+3, #high(0 / 0x10000) 
0585 85304F     337       mov counter, x
0588 020631     338       ljmp start_game_nohit1
058B            339   win_tone: 
058B 1203C9     340       lcall Timer1_Init1
058E            341       
058E 020591     342       ljmp checkfreq1
0591            343       
0591            344   checkfreq1:
0591 753470     345            mov y+0, #low (4720 % 0x10000) 
0594 753512     345            mov y+1, #high(4720 % 0x10000) 
0597 753600     345            mov y+2, #low (4720 / 0x10000) 
059A 753700     345            mov y+3, #high(4720 / 0x10000) 
059D 854730     346       mov x, freq1
05A0 12025F     347       lcall x_lteq_y
05A3 100003     348       jbc mf, freq1_press
05A6 0205CB     349       ljmp start_game_hit1
05A9            350   
05A9            351   freq1_press:
05A9 D201       352       setb p1_press
05AB 0205CB     353       ljmp start_game_hit1
05AE            354   
05AE            355   checkfreq2:
05AE 753470     356            mov y+0, #low (4720 % 0x10000) 
05B1 753512     356            mov y+1, #high(4720 % 0x10000) 
05B4 753600     356            mov y+2, #low (4720 / 0x10000) 
05B7 753700     356            mov y+3, #high(4720 / 0x10000) 
05BA 854B30     357       mov x, freq2
05BD 12025F     358       lcall x_lteq_y
05C0 100003     359       jbc mf, freq2_press
05C3 0205FB     360       ljmp start_game_hit2
05C6            361   
05C6            362   freq2_press:
05C6 D202       363       setb p2_press
05C8 0205FB     364       ljmp start_game_hit2
05CB            365   
05CB            366   start_game_hit1:
05CB 12051E     367       lcall forever1
05CE 2001DD     368       jb p1_press, checkfreq2
05D1 C002       369            push AR2
05D3 7A32       369            mov R2, #50
05D5 12008B     369            lcall ?Wait_Milli_Seconds
05D8 D002       369            pop AR2
05DA 2001D1     370       jb p1_press, checkfreq2
05DD 3001FD     371       jnb p1_press, $
05E0 C28E       372       clr TR1
05E2 E4         373       clr a 
05E3 E541       374       mov a, p1points
05E5 2401       375       add a, #0x01
05E7 F541       376       mov p1points, a
05E9 B4053B     377       cjne a, #0x05, start_jmp1
05EC E4         378       clr a
05ED C201       379       clr p1_press
05EF C202       380       clr p2_press
05F1 0205F4     381       ljmp p1win_jmp
05F4            382   
05F4            383   p1win_jmp:
05F4 C201       384       clr p1_press
05F6 C202       385       clr p2_press
05F8 02072B     386       ljmp p1win
05FB            387   
05FB            388   start_game_hit2:
05FB 12051E     389       lcall forever1
05FE 200290     390       jb p2_press, checkfreq1
0601 C002       391            push AR2
0603 7A32       391            mov R2, #50
0605 12008B     391            lcall ?Wait_Milli_Seconds
0608 D002       391            pop AR2
060A 200284     392       jb p2_press, checkfreq1
060D 3002FD     393       jnb p2_press, $
0610 C28E       394       clr TR1
0612 E4         395       clr a 
0613 E542       396       mov a, p2points
0615 2401       397       add a, #0x01
0617 F542       398       mov p2points, a
0619 B4050B     399       cjne a, #0x05, start_jmp1
061C C201       400       clr p1_press
061E C202       401       clr p2_press
0620 E4         402       clr a
0621 02062A     403       ljmp p2win_jmp
0624            404   start_game_hit1_jmp:
0624 0205CB     405            ljmp start_game_hit1
0627            406            
0627            407   start_jmp1:
0627 02053F     408       ljmp start_game
062A            409   
062A            410   p2win_jmp:
062A C201       411       clr p1_press
062C C202       412       clr p2_press
062E 0207B6     413       ljmp p2win
0631            414   
0631            415   start_game_nohit1:
0631 020591     416       ljmp checkfreq1
0634 C0E0       417            push acc
0636 740F       417            mov a, #15
0638 14         417            dec a
0639 12010F     417            lcall ?Set_Cursor_2 ; Select column and row
063C D0E0       417            pop acc
063E C000       418            push ar0
0640 A84F       418            mov r0, counter
0642 120116     418            lcall ?Display_BCD
0645 D000       418            pop ar0
0647 854F34     419       mov y, counter
064A 753001     420            mov x+0, #low (1 % 0x10000) 
064D 753100     420            mov x+1, #high(1 % 0x10000) 
0650 753200     420            mov x+2, #low (1 / 0x10000) 
0653 753300     420            mov x+3, #high(1 / 0x10000) 
0656 1201B4     421       lcall add32
0659 7534E8     422            mov y+0, #low (1000 % 0x10000) 
065C 753503     422            mov y+1, #high(1000 % 0x10000) 
065F 753600     422            mov y+2, #low (1000 / 0x10000) 
0662 753700     422            mov y+3, #high(1000 / 0x10000) 
0665 12022F     423       lcall x_eq_y
0668 200020     424       jb mf, start_game_jmp
066B 85304F     425       mov counter, X ; counter+
066E 200138     426       jb p1_press, start_game_nohit2
0671 C002       427            push AR2
0673 7A32       427            mov R2, #50
0675 12008B     427            lcall ?Wait_Milli_Seconds
0678 D002       427            pop AR2
067A 20012C     428       jb p1_press, start_game_nohit2
067D 3001FD     429       jnb p1_press, $
0680 C28E       430       clr TR1
0682 E4         431       clr a 
0683 E541       432       mov a, p1points
0685 B40006     433       cjne a, #0x00, start_jmpsub1
0688 02053F     434       ljmp start_game
068B            435   
068B            436   start_game_jmp:
068B 02053F     437       ljmp start_game
068E            438   
068E            439   start_jmpsub1:
068E F530       440       mov x, a
0690 753401     441            mov y+0, #low (1 % 0x10000) 
0693 753500     441            mov y+1, #high(1 % 0x10000) 
0696 753600     441            mov y+2, #low (1 / 0x10000) 
0699 753700     441            mov y+3, #high(1 / 0x10000) 
069C 1201D5     442       lcall sub32
069F E530       443       mov a, x
06A1 D4         444       da a
06A2 F541       445       mov p1points, a
06A4 E4         446       clr a
06A5 C201       447       clr p1_press
06A7 C202       448       clr p2_press
06A9            449   
06A9            450   
06A9            451   start_game_nohit2:
06A9 0205AE     452       ljmp checkfreq2
06AC C0E0       453            push acc
06AE 740F       453            mov a, #15
06B0 14         453            dec a
06B1 12010F     453            lcall ?Set_Cursor_2 ; Select column and row
06B4 D0E0       453            pop acc
06B6 C000       454            push ar0
06B8 A84F       454            mov r0, counter
06BA 120116     454            lcall ?Display_BCD
06BD D000       454            pop ar0
06BF            455       
06BF 854F34     456       mov y, counter
06C2 753001     457            mov x+0, #low (1 % 0x10000) 
06C5 753100     457            mov x+1, #high(1 % 0x10000) 
06C8 753200     457            mov x+2, #low (1 / 0x10000) 
06CB 753300     457            mov x+3, #high(1 / 0x10000) 
06CE 1201B4     458       lcall add32
06D1 7534E8     459            mov y+0, #low (1000 % 0x10000) 
06D4 753503     459            mov y+1, #high(1000 % 0x10000) 
06D7 753600     459            mov y+2, #low (1000 / 0x10000) 
06DA 753700     459            mov y+3, #high(1000 / 0x10000) 
06DD 12022F     460       lcall x_eq_y
06E0 2000A8     461       jb mf, start_game_jmp
06E3 85304F     462       mov counter, X ; counter+
06E6            463   
06E6 200238     464       jb p2_press, start_game_nohit1_jmp
06E9 C002       465            push AR2
06EB 7A32       465            mov R2, #50
06ED 12008B     465            lcall ?Wait_Milli_Seconds
06F0 D002       465            pop AR2
06F2 20022C     466       jb p2_press, start_game_nohit1_jmp
06F5 3002FD     467       jnb p2_press, $
06F8 C28E       468       clr TR1
06FA E4         469       clr a 
06FB E542       470       mov a, p2points
06FD B40003     471       cjne a, #0x00, start_jmpsub2
0700 020724     472       ljmp start_jmp
0703            473       
0703            474   
0703            475   start_jmpsub2:
0703 F530       476       mov x, a
0705 753401     477            mov y+0, #low (1 % 0x10000) 
0708 753500     477            mov y+1, #high(1 % 0x10000) 
070B 753600     477            mov y+2, #low (1 / 0x10000) 
070E 753700     477            mov y+3, #high(1 / 0x10000) 
0711 1201D5     478       lcall sub32
0714 E530       479       mov a, x
0716 D4         480       da a
0717 F542       481       mov p2points, a
0719 E4         482       clr a
071A C201       483       clr p1_press
071C C202       484       clr p2_press
071E 020724     485       ljmp start_jmp
0721            486       
0721            487   start_game_nohit1_jmp:
0721 020631     488            ljmp start_game_nohit1
0724            489   
0724            490   start_jmp:
0724 C201       491       clr p1_press
0726 C202       492       clr p2_press
0728 02053F     493       ljmp start_game
072B            494   p1win:
072B C201       495       clr p1_press
072D C202       496       clr p2_press
072F C0E0       497            push acc
0731 7409       497            mov a, #9
0733 14         497            dec a
0734 120111     497            lcall ?Set_Cursor_1 ; Select column and row
0737 D0E0       497            pop acc
0739 C083       498            push dph
073B C082       498            push dpl
073D C0E0       498            push acc
073F 900044     498            mov dptr, #Winner1_message1
0742 120104     498            lcall ?Send_Constant_String
0745 D0E0       498            pop acc
0747 D082       498            pop dpl
0749 D083       498            pop dph
074B C083       499            push dph
074D C082       499            push dpl
074F C0E0       499            push acc
0751 90004E     499            mov dptr, #Winner1_message2
0754 120104     499            lcall ?Send_Constant_String
0757 D0E0       499            pop acc
0759 D082       499            pop dpl
075B D083       499            pop dph
075D C002       500            push AR2
075F 7A05       500            mov R2, #5
0761 12008B     500            lcall ?Wait_Milli_Seconds
0764 D002       500            pop AR2
0766            500   
0766 C0E0       501            push acc
0768 7401       501            mov a, #1
076A 14         501            dec a
076B 120111     501            lcall ?Set_Cursor_1 ; Select column and row
076E D0E0       501            pop acc
0770 C083       502            push dph
0772 C082       502            push dpl
0774 C0E0       502            push acc
0776 900068     502            mov dptr, #Playagain
0779 120104     502            lcall ?Send_Constant_String
077C D0E0       502            pop acc
077E D082       502            pop dpl
0780 D083       502            pop dph
0782 C0E0       503            push acc
0784 7401       503            mov a, #1
0786 14         503            dec a
0787 12010F     503            lcall ?Set_Cursor_2 ; Select column and row
078A D0E0       503            pop acc
078C C083       504            push dph
078E C082       504            push dpl
0790 C0E0       504            push acc
0792 900075     504            mov dptr, #Clear_screen
0795 120104     504            lcall ?Send_Constant_String
0798 D0E0       504            pop acc
079A D082       504            pop dpl
079C D083       504            pop dph
079E 208012     505       jb START_BUTTON, p1win_jmp2
07A1 C002       506            push AR2
07A3 7A05       506            mov R2, #5
07A5 12008B     506            lcall ?Wait_Milli_Seconds
07A8 D002       506            pop AR2
07AA 208006     507       jb START_BUTTON, p1win_jmp2
07AD 3080FD     508       jnb START_BUTTON, $
07B0 02084E     509       ljmp restart_jmp
07B3            510   p1win_jmp2:
07B3 02072B     511       ljmp p1win
07B6            512   p2win: 
07B6 C201       513       clr p1_press
07B8 C202       514       clr p2_press
07BA C0E0       515            push acc
07BC 7409       515            mov a, #9
07BE 14         515            dec a
07BF 120111     515            lcall ?Set_Cursor_1 ; Select column and row
07C2 D0E0       515            pop acc
07C4 C083       516            push dph
07C6 C082       516            push dpl
07C8 C0E0       516            push acc
07CA 900056     516            mov dptr, #Winner2_message1
07CD 120104     516            lcall ?Send_Constant_String
07D0 D0E0       516            pop acc
07D2 D082       516            pop dpl
07D4 D083       516            pop dph
07D6 C0E0       517            push acc
07D8 7409       517            mov a, #9
07DA 14         517            dec a
07DB 12010F     517            lcall ?Set_Cursor_2 ; Select column and row
07DE D0E0       517            pop acc
07E0 C083       518            push dph
07E2 C082       518            push dpl
07E4 C0E0       518            push acc
07E6 90005E     518            mov dptr, #Winner2_message2
07E9 120104     518            lcall ?Send_Constant_String
07EC D0E0       518            pop acc
07EE D082       518            pop dpl
07F0 D083       518            pop dph
07F2 C002       519            push AR2
07F4 7A32       519            mov R2, #50
07F6 12008B     519            lcall ?Wait_Milli_Seconds
07F9 D002       519            pop AR2
07FB C0E0       520            push acc
07FD 7401       520            mov a, #1
07FF 14         520            dec a
0800 120111     520            lcall ?Set_Cursor_1 ; Select column and row
0803 D0E0       520            pop acc
0805 C083       521            push dph
0807 C082       521            push dpl
0809 C0E0       521            push acc
080B 900068     521            mov dptr, #Playagain
080E 120104     521            lcall ?Send_Constant_String
0811 D0E0       521            pop acc
0813 D082       521            pop dpl
0815 D083       521            pop dph
0817 C0E0       522            push acc
0819 7401       522            mov a, #1
081B 14         522            dec a
081C 12010F     522            lcall ?Set_Cursor_2 ; Select column and row
081F D0E0       522            pop acc
0821 C083       523            push dph
0823 C082       523            push dpl
0825 C0E0       523            push acc
0827 900075     523            mov dptr, #Clear_screen
082A 120104     523            lcall ?Send_Constant_String
082D D0E0       523            pop acc
082F D082       523            pop dpl
0831 D083       523            pop dph
0833 208015     524       jb START_BUTTON, p2win_jmp1
0836 C002       525            push AR2
0838 7A32       525            mov R2, #50
083A 12008B     525            lcall ?Wait_Milli_Seconds
083D D002       525            pop AR2
083F 208009     526       jb START_BUTTON, p2win_jmp1
0842 3080FD     527       jnb START_BUTTON, $
0845 02084E     528       ljmp restart_jmp
0848            529   
0848            530   p1win_jmp1:
0848 02072B     531       ljmp p1win
084B            532   
084B            533   p2win_jmp1:
084B 0207B6     534       ljmp p2win
084E            535   
084E            536   restart_jmp:
084E 020851     537       ljmp restart_game
0851            538   
0851            539   restart_game:
0851 754100     540       mov p1points, #0x00
0854 754200     541       mov p2points, #0x00
0857 02053F     542       ljmp start_game
085A            543   end
