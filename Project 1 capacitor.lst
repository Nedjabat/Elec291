                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P0.0
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   
0000             10   CLK           EQU 22118400
0000             11   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             12   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             13   TIMER1_RATE   EQU 4200     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             14   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))
0000             15   TIMER1_RATE1   EQU 4000  
0000             16   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1)))               ;2000Hz frequency lose frequency
0000             17   TIMER2_RATE   EQU 4200                 ;2100Hz frequency win frequency
0000             18   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             19   
0000             20   org 0000H
0000 0204A4      21      ljmp MyProgram
0003             22   
000B             23   org 0x000B
000B 02039E      24            ljmp Timer0_ISR
000E             25   
0013             26   org 0x0013
0013 32          27            reti
0014             28   
0014             29   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             30   org 0x001B
001B 0203C6      31            ljmp Timer1_ISR
001E             32   
001E             33   
0030             34   DSEG at 30H
0030             35   x:   ds 4
0034             36   y:   ds 4
0038             37   seed: ds 4  
003C             38   bcd: ds 5
0041             39   p1points: ds 1
0042             40   p2points: ds 1
0043             41   T0ov: ds 2
0045             42   T2ov: ds 2
0047             43   freq1: ds 4
004B             44   freq2: ds 4
004F             45   counter: ds 4
0053             46   
0000             47   BSEG
0000             48   mf: dbit 1
0001             49   p1_press: dbit 1
0002             50   p2_press: dbit 1
0003             51   
001E             52   cseg
001E             53   ; These 'equ' must match the hardware wiring
001E             54   LCD_RS equ P3.2
001E             55   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             56   LCD_E  equ P3.3
001E             57   LCD_D4 equ P3.4
001E             58   LCD_D5 equ P3.5
001E             59   LCD_D6 equ P3.6
001E             60   LCD_D7 equ P3.7
001E             61   SOUND_OUT equ P1.1
001E             62   
001E 506C6179    63   Initial_Message:  db 'Player1:          ', 0
     6572313A
     20202020
     20202020
     202000
0031 506C6179    64   Initial_Message2: db 'Player2:          ', 0
     6572323A
     20202020
     20202020
     202000
0044             65   
0044 57696E6E    66   Winner1_message1: db 'Winner!:D', 0
     6572213A
     4400
004E 4C6F7365    67   Winner1_message2: db 'Loser:P', 0
     723A5000
0056             68   
0056 4C6F7365    69   Winner2_message1: db 'Loser:P', 0
     723A5000
005E 57696E6E    70   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
0068             71   
0068 506C6179    72   Playagain       : db 'Play again ?', 0
     20616761
     696E203F
     00
0075 20202020    73   Clear_screen    : db '          ', 0
     20202020
     202000
0080             74   
                522   $LIST
                 77   $LIST
0385             79   
0385             80   Timer0_Init:
0385 E589        81            mov a, TMOD
0387 54F0        82            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
0389 4401        83            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
038B F589        84            mov TMOD, a
038D 758CEA      85            mov TH0, #high(TIMER0_RELOAD)
0390 758AE8      86            mov TL0, #low(TIMER0_RELOAD)
0393             87            ; Set autoreload value
0393 75F4EA      88            mov RH0, #high(TIMER0_RELOAD)
0396 75F2E8      89            mov RL0, #low(TIMER0_RELOAD)
0399             90            ; Enable the timer and interrupts
0399 D2A9        91       setb ET0  ; Enable timer 0 interrupt
039B D28C        92       setb TR0  ; Start timer 0
039D 22          93            ret
039E             94   
039E             95   Timer0_ISR:
039E C28D        96            clr TF0  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03A0 C0E0        97            push acc
03A2 0543        98            inc T0ov+0
03A4 E543        99            mov a, T0ov+0
03A6 7002       100            jnz Timer0_ISR_done
03A8 0544       101            inc T0ov+1
03AA            102   
03AA            103   Timer0_ISR_done:
03AA D0E0       104            pop acc
03AC 32         105            reti
03AD            106   
03AD            107   Timer1_Init:
03AD E589       108            mov a, TMOD
03AF 54F0       109            anl a, #0xf0 ; Clear the bits for timer 0
03B1 4401       110            orl a, #0x01 ; Configure timer 0 as 16-timer
03B3 F589       111            mov TMOD, a
03B5 758DEB     112            mov TH1, #high(TIMER1_RELOAD)
03B8 758B6E     113            mov TL1, #low(TIMER1_RELOAD)
03BB            114            ; Set autoreload value
03BB 75F5EB     115            mov RH1, #high(TIMER1_RELOAD)
03BE 75F36E     116            mov RL1, #low(TIMER1_RELOAD)
03C1            117            ; Enable the timer and interrupts
03C1 D2AB       118       setb ET1  ; Enable timer 0 interrupt
03C3 D28E       119       setb TR1  ; Start timer 0
03C5 22         120            ret
03C6            121   
03C6            122   ;---------------------------------;
03C6            123   ; ISR for timer 0.  Set to execute;
03C6            124   ; every 1/4096Hz to generate a    ;
03C6            125   ; 2048 Hz square wave at pin P1.1 ;
03C6            126   ;---------------------------------;
03C6            127   Timer1_ISR:
03C6            128            ;clr TF0  ; According to the data sheet this is done for us already.
03C6 B291       129            cpl SOUND_OUT ; Connect speaker to P1.1!
03C8 32         130            reti
03C9            131   
03C9            132   Timer1_Init1:
03C9 E589       133            mov a, TMOD
03CB 54F0       134            anl a, #0xf0 ; Clear the bits for timer 0
03CD 4401       135            orl a, #0x01 ; Configure timer 0 as 16-timer
03CF F589       136            mov TMOD, a
03D1 758DEA     137            mov TH1, #high(TIMER1_RELOAD1)
03D4 758B67     138            mov TL1, #low(TIMER1_RELOAD1)
03D7            139            ; Set autoreload value
03D7 75F5EA     140            mov RH1, #high(TIMER1_RELOAD1)
03DA 75F367     141            mov RL1, #low(TIMER1_RELOAD1)
03DD            142            ; Enable the timer and interrupts
03DD D2AB       143       setb ET1  ; Enable timer 0 interrupt
03DF D28E       144       setb TR1  ; Start timer 0
03E1 22         145            ret
03E2            146   
03E2            147   ;---------------------------------;
03E2            148   ; ISR for timer 0.  Set to execute;
03E2            149   ; every 1/4096Hz to generate a    ;
03E2            150   ; 2048 Hz square wave at pin P1.1 ;
03E2            151   ;---------------------------------;
03E2            152   ; When using a 22.1184MHz crystal in fast mode
03E2            153   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
03E2            154   ; (tuned manually to get as close to 1s as possible)
03E2            155   Wait1s:
03E2 7AB0       156       mov R2, #176
03E4 79FA       157   X3: mov R1, #250
03E6 78A6       158   X2: mov R0, #166
03E8 D8FE       159   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
03EA D9FA       160       djnz R1, X2 ; 22.51519us*250=5.629ms
03EC DAF6       161       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
03EE 22         162       ret
03EF            163   
03EF            164   ;Initializes timer/counter 2 as a 16-bit counter
03EF            165   InitTimer2:
03EF 75C802     166            mov T2CON, #0b_0000_0010 ; Stop timer/counter.  Set as counter (clock input is pin T2).
03F2            167            ; Set the reload value on overflow to zero (just in case is not zero)
03F2 75CB00     168            mov RCAP2H, #0
03F5 75CA00     169            mov RCAP2L, #0
03F8 D290       170       setb P1.0 ; P1.0 is connected to T2.  Make sure it can be used as input.
03FA 22         171       ret
03FB            172   
03FB            173   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
03FB            174   hex2bcd:
03FB E4         175            clr a
03FC 7800       176       mov R0, #0  ;Set BCD result to 00000000 
03FE 7900       177       mov R1, #0
0400 7A00       178       mov R2, #0
0402 7B10       179       mov R3, #16 ;Loop counter.
0404            180   
0404            181   hex2bcd_loop:
0404 E5CC       182       mov a, TL2 ;Shift TH0-TL0 left through carry
0406 33         183       rlc a
0407 F5CC       184       mov TL2, a
0409            185       
0409 E5CD       186       mov a, TH2
040B 33         187       rlc a
040C F5CD       188       mov TH2, a
040E            189         
040E            190            ; Perform bcd + bcd + carry
040E            191            ; using BCD numbers
040E E8         192            mov a, R0
040F 38         193            addc a, R0
0410 D4         194            da a
0411 F8         195            mov R0, a
0412            196            
0412 E9         197            mov a, R1
0413 39         198            addc a, R1
0414 D4         199            da a
0415 F9         200            mov R1, a
0416            201            
0416 EA         202            mov a, R2
0417 3A         203            addc a, R2
0418 D4         204            da a
0419 FA         205            mov R2, a
041A            206            
041A DBE8       207            djnz R3, hex2bcd_loop
041C 22         208            ret
041D            209   
041D            210   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
041D            211   DisplayBCD_LCD:
041D            212            ; 5th digit:
041D EA         213       mov a, R2
041E 540F       214       anl a, #0FH
0420 4430       215       orl a, #'0' ; convert to ASCII
0422 1200D0     216            lcall ?WriteData
0425            217            ; 4th digit:
0425 E9         218       mov a, R1
0426 C4         219       swap a
0427 540F       220       anl a, #0FH
0429 4430       221       orl a, #'0' ; convert to ASCII
042B 1200D0     222            lcall ?WriteData
042E            223            ; 3rd digit:
042E E9         224       mov a, R1
042F 540F       225       anl a, #0FH
0431 4430       226       orl a, #'0' ; convert to ASCII
0433 1200D0     227            lcall ?WriteData
0436            228            ; 2nd digit:
0436 E8         229       mov a, R0
0437 C4         230       swap a
0438 540F       231       anl a, #0FH
043A 4430       232       orl a, #'0' ; convert to ASCII
043C 1200D0     233            lcall ?WriteData
043F            234            ; 1st digit:
043F E8         235       mov a, R0
0440 540F       236       anl a, #0FH
0442 4430       237       orl a, #'0' ; convert to ASCII
0444 1200D0     238            lcall ?WriteData
0447            239       
0447 22         240       ret
0448            241   random:
0448 853830     242       mov x+0, seed+0
044B 853931     243       mov x+1, seed+1
044E 853A32     244       mov x+2, seed+2
0451 853B33     245       mov x+3, seed+3
0454 7534FD     246            mov y+0, #low (214013 % 0x10000) 
0457 753543     246            mov y+1, #high(214013 % 0x10000) 
045A 753603     246            mov y+2, #low (214013 / 0x10000) 
045D 753700     246            mov y+3, #high(214013 / 0x10000) 
0460 120269     247       lcall mul32
0463 753443     248            mov y+0, #low (2451011 % 0x10000) 
0466 753566     248            mov y+1, #high(2451011 % 0x10000) 
0469 753625     248            mov y+2, #low (2451011 / 0x10000) 
046C 753700     248            mov y+3, #high(2451011 / 0x10000) 
046F 1201B4     249       lcall add32
0472 853038     250       mov seed+0, x+0
0475 853139     251       mov seed+1, x+1
0478 85323A     252       mov seed+2, x+2
047B 85333B     253       mov seed+3, x+3
047E 22         254       ret
047F            255   
047F            256   wait_random:
047F C002       257            push AR2
0481 AA38       257            mov R2, seed+0
0483 12008B     257            lcall ?Wait_Milli_Seconds
0486 D002       257            pop AR2
0488 C002       258            push AR2
048A AA39       258            mov R2, seed+1
048C 12008B     258            lcall ?Wait_Milli_Seconds
048F D002       258            pop AR2
0491 C002       259            push AR2
0493 AA3A       259            mov R2, seed+2
0495 12008B     259            lcall ?Wait_Milli_Seconds
0498 D002       259            pop AR2
049A C002       260            push AR2
049C AA3B       260            mov R2, seed+3
049E 12008B     260            lcall ?Wait_Milli_Seconds
04A1 D002       260            pop AR2
04A3 22         261       ret
04A4            262   ;---------------------------------;
04A4            263   ; Hardware initialization         ;
04A4            264   ;---------------------------------;
04A4            265   
04A4            266   ;---------------------------------;
04A4            267   ; Main program loop               ;
04A4            268   ;---------------------------------;
04A4            269   MyProgram:
04A4            270       ; Initialize the hardware:
04A4 75817F     271       mov SP, #7FH
04A7 C0E0       272            push acc
04A9 7401       272            mov a, #1
04AB 14         272            dec a
04AC 120111     272            lcall ?Set_Cursor_1 ; Select column and row
04AF D0E0       272            pop acc
04B1 C083       273            push dph
04B3 C082       273            push dpl
04B5 C0E0       273            push acc
04B7 90001E     273            mov dptr, #Initial_Message
04BA 120104     273            lcall ?Send_Constant_String
04BD D0E0       273            pop acc
04BF D082       273            pop dpl
04C1 D083       273            pop dph
04C3 C0E0       274            push acc
04C5 7401       274            mov a, #1
04C7 14         274            dec a
04C8 12010F     274            lcall ?Set_Cursor_2 ; Select column and row
04CB D0E0       274            pop acc
04CD C083       275            push dph
04CF C082       275            push dpl
04D1 C0E0       275            push acc
04D3 900031     275            mov dptr, #Initial_Message2
04D6 120104     275            lcall ?Send_Constant_String
04D9 D0E0       275            pop acc
04DB D082       275            pop dpl
04DD D083       275            pop dph
04DF 1203EF     276       lcall InitTimer2
04E2 D2AF       277       setb EA
04E4 20C5FD     278       jb P4.5, $
04E7 85CD38     279       mov seed+0, TH2
04EA 753901     280       mov seed+1, #0x01
04ED 753A87     281       mov seed+2, #0x87
04F0 85CC3B     282       mov seed+3, TL2
04F3 754100     283       mov p1points, #0x00
04F6 754200     284       mov p2points, #0x00
04F9            285       
04F9            286   forever:
04F9            287       ; Measure the frequency applied to pin T2
04F9 C2CA       288       clr TR2 ; Stop counter 2
04FB E4         289       clr a
04FC F5CC       290       mov TL2, a
04FE F5CD       291       mov TH2, a
0500 C2CF       292       clr TF2
0502 D2CA       293       setb TR2 ; Start counter 2
0504 1203E2     294       lcall Wait1s ; Wait one second
0507 C2CA       295       clr TR2 ; Stop counter 2, TH2-TL2 has the frequency
0509            296   
0509 C0E0       297            push acc
050B 740B       297            mov a, #11
050D 14         297            dec a
050E 120111     297            lcall ?Set_Cursor_1 ; Select column and row
0511 D0E0       297            pop acc
0513 C000       298            push ar0
0515 A841       298            mov r0, p1points
0517 120116     298            lcall ?Display_BCD
051A D000       298            pop ar0
051C C0E0       299            push acc
051E 740B       299            mov a, #11
0520 14         299            dec a
0521 12010F     299            lcall ?Set_Cursor_2 ; Select column and row
0524 D0E0       299            pop acc
0526 C000       300            push ar0
0528 A842       300            mov r0, p2points
052A 120116     300            lcall ?Display_BCD
052D D000       300            pop ar0
052F 208021     301       jb START_BUTTON, start_game
0532 C002       302            push AR2
0534 7A32       302            mov R2, #50
0536 12008B     302            lcall ?Wait_Milli_Seconds
0539 D002       302            pop AR2
053B 208015     303       jb START_BUTTON, start_game
053E 3080FD     304       jnb START_BUTTON, $
0541            305            ; Convert the result to BCD and display on LCD
0541 C0E0       306            push acc
0543 7401       306            mov a, #1
0545 14         306            dec a
0546 12010F     306            lcall ?Set_Cursor_2 ; Select column and row
0549 D0E0       306            pop acc
054B 1203FB     307            lcall hex2bcd
054E 12041D     308       lcall DisplayBCD_LCD
0551 80A6       309       sjmp forever ;  Repeat! 
0553            310   
0553            311       start_game:
0553 C0E0       312            push acc
0555 740B       312            mov a, #11
0557 14         312            dec a
0558 120111     312            lcall ?Set_Cursor_1 ; Select column and row
055B D0E0       312            pop acc
055D C000       313            push ar0
055F A841       313            mov r0, p1points
0561 120116     313            lcall ?Display_BCD
0564 D000       313            pop ar0
0566 C0E0       314            push acc
0568 740B       314            mov a, #11
056A 14         314            dec a
056B 12010F     314            lcall ?Set_Cursor_2 ; Select column and row
056E D0E0       314            pop acc
0570 C000       315            push ar0
0572 A842       315            mov r0, p2points
0574 120116     315            lcall ?Display_BCD
0577 D000       315            pop ar0
0579 C201       316       clr p1_press
057B C202       317       clr p2_press
057D 120448     318       lcall random
0580 12047F     319       lcall wait_random
0583 C0E0       320            push acc
0585 740B       320            mov a, #11
0587 14         320            dec a
0588 120111     320            lcall ?Set_Cursor_1 ; Select column and row
058B D0E0       320            pop acc
058D C000       321            push ar0
058F A841       321            mov r0, p1points
0591 120116     321            lcall ?Display_BCD
0594 D000       321            pop ar0
0596 C0E0       322            push acc
0598 740B       322            mov a, #11
059A 14         322            dec a
059B 12010F     322            lcall ?Set_Cursor_2 ; Select column and row
059E D0E0       322            pop acc
05A0 C000       323            push ar0
05A2 A842       323            mov r0, p2points
05A4 120116     323            lcall ?Display_BCD
05A7 D000       323            pop ar0
05A9 E539       324       mov a, seed+1
05AB A2E3       325       mov c, acc.3
05AD            326       ;mov HLbit, c
05AD 4003       327       jc lose_tone
05AF 0205C7     328       ljmp win_tone
05B2            329   
05B2            330   lose_tone:
05B2 1203AD     331       lcall Timer1_Init
05B5 753000     332            mov x+0, #low (0 % 0x10000) 
05B8 753100     332            mov x+1, #high(0 % 0x10000) 
05BB 753200     332            mov x+2, #low (0 / 0x10000) 
05BE 753300     332            mov x+3, #high(0 / 0x10000) 
05C1 85304F     333       mov counter, x
05C4 020667     334       ljmp start_game_nohit1
05C7            335   win_tone: 
05C7 1203C9     336       lcall Timer1_Init1
05CA 0205CD     337       ljmp checkfreq1
05CD            338       
05CD            339   checkfreq1:
05CD 753470     340            mov y+0, #low (4720 % 0x10000) 
05D0 753512     340            mov y+1, #high(4720 % 0x10000) 
05D3 753600     340            mov y+2, #low (4720 / 0x10000) 
05D6 753700     340            mov y+3, #high(4720 / 0x10000) 
05D9 854730     341       mov x, freq1
05DC 12025F     342       lcall x_lteq_y
05DF 100003     343       jbc mf, freq1_press
05E2 020607     344       ljmp start_game_hit1
05E5            345   
05E5            346   freq1_press:
05E5 D201       347       setb p1_press
05E7 020607     348       ljmp start_game_hit1
05EA            349   
05EA            350   checkfreq2:
05EA 753470     351            mov y+0, #low (4720 % 0x10000) 
05ED 753512     351            mov y+1, #high(4720 % 0x10000) 
05F0 753600     351            mov y+2, #low (4720 / 0x10000) 
05F3 753700     351            mov y+3, #high(4720 / 0x10000) 
05F6 854B30     352       mov x, freq2
05F9 12025F     353       lcall x_lteq_y
05FC 100003     354       jbc mf, freq2_press
05FF 020634     355       ljmp start_game_hit2
0602            356   
0602            357   freq2_press:
0602 D202       358       setb p2_press
0604 020634     359       ljmp start_game_hit2
0607            360   
0607            361   start_game_hit1:
0607 2001E0     362       jb p1_press, checkfreq2
060A C002       363            push AR2
060C 7A32       363            mov R2, #50
060E 12008B     363            lcall ?Wait_Milli_Seconds
0611 D002       363            pop AR2
0613 2001D4     364       jb p1_press, checkfreq2
0616 3001FD     365       jnb p1_press, $
0619 C28E       366       clr TR1
061B E4         367       clr a 
061C E541       368       mov a, p1points
061E 2401       369       add a, #0x01
0620 F541       370       mov p1points, a
0622 B40538     371       cjne a, #0x05, start_jmp1
0625 E4         372       clr a
0626 C201       373       clr p1_press
0628 C202       374       clr p2_press
062A 02062D     375       ljmp p1win_jmp
062D            376       
062D            377   p1win_jmp:
062D C201       378       clr p1_press
062F C202       379       clr p2_press
0631 020761     380       ljmp p1win
0634            381   
0634            382   start_game_hit2:
0634 200296     383       jb p2_press, checkfreq1
0637 C002       384            push AR2
0639 7A32       384            mov R2, #50
063B 12008B     384            lcall ?Wait_Milli_Seconds
063E D002       384            pop AR2
0640 20028A     385       jb p2_press, checkfreq1
0643 3002FD     386       jnb p2_press, $
0646 C28E       387       clr TR1
0648 E4         388       clr a 
0649 E542       389       mov a, p2points
064B 2401       390       add a, #0x01
064D F542       391       mov p2points, a
064F B4050B     392       cjne a, #0x05, start_jmp1
0652 C201       393       clr p1_press
0654 C202       394       clr p2_press
0656 E4         395       clr a
0657 020660     396       ljmp p2win_jmp
065A            397   start_game_hit1_jmp:
065A 020607     398            ljmp start_game_hit1
065D            399            
065D            400   start_jmp1:
065D 020553     401       ljmp start_game
0660            402   
0660            403   p2win_jmp:
0660 C201       404       clr p1_press
0662 C202       405       clr p2_press
0664 0207EC     406       ljmp p2win
0667            407   
0667            408   start_game_nohit1:
0667 0205CD     409       ljmp checkfreq1
066A C0E0       410            push acc
066C 740F       410            mov a, #15
066E 14         410            dec a
066F 12010F     410            lcall ?Set_Cursor_2 ; Select column and row
0672 D0E0       410            pop acc
0674 C000       411            push ar0
0676 A84F       411            mov r0, counter
0678 120116     411            lcall ?Display_BCD
067B D000       411            pop ar0
067D 854F34     412       mov y, counter
0680 753001     413            mov x+0, #low (1 % 0x10000) 
0683 753100     413            mov x+1, #high(1 % 0x10000) 
0686 753200     413            mov x+2, #low (1 / 0x10000) 
0689 753300     413            mov x+3, #high(1 / 0x10000) 
068C 1201B4     414       lcall add32
068F 7534E8     415            mov y+0, #low (1000 % 0x10000) 
0692 753503     415            mov y+1, #high(1000 % 0x10000) 
0695 753600     415            mov y+2, #low (1000 / 0x10000) 
0698 753700     415            mov y+3, #high(1000 / 0x10000) 
069B 12022F     416       lcall x_eq_y
069E 200020     417       jb mf, start_game_jmp
06A1 85304F     418       mov counter, X ; counter+
06A4 200138     419       jb p1_press, start_game_nohit2
06A7 C002       420            push AR2
06A9 7A32       420            mov R2, #50
06AB 12008B     420            lcall ?Wait_Milli_Seconds
06AE D002       420            pop AR2
06B0 20012C     421       jb p1_press, start_game_nohit2
06B3 3001FD     422       jnb p1_press, $
06B6 C28E       423       clr TR1
06B8 E4         424       clr a 
06B9 E541       425       mov a, p1points
06BB B40006     426       cjne a, #0x00, start_jmpsub1
06BE 020553     427       ljmp start_game
06C1            428   
06C1            429   start_game_jmp:
06C1 020553     430       ljmp start_game
06C4            431   
06C4            432   start_jmpsub1:
06C4 F530       433       mov x, a
06C6 753401     434            mov y+0, #low (1 % 0x10000) 
06C9 753500     434            mov y+1, #high(1 % 0x10000) 
06CC 753600     434            mov y+2, #low (1 / 0x10000) 
06CF 753700     434            mov y+3, #high(1 / 0x10000) 
06D2 1201D5     435       lcall sub32
06D5 E530       436       mov a, x
06D7 D4         437       da a
06D8 F541       438       mov p1points, a
06DA E4         439       clr a
06DB C201       440       clr p1_press
06DD C202       441       clr p2_press
06DF            442   
06DF            443   
06DF            444   start_game_nohit2:
06DF 0205EA     445       ljmp checkfreq2
06E2 C0E0       446            push acc
06E4 740F       446            mov a, #15
06E6 14         446            dec a
06E7 12010F     446            lcall ?Set_Cursor_2 ; Select column and row
06EA D0E0       446            pop acc
06EC C000       447            push ar0
06EE A84F       447            mov r0, counter
06F0 120116     447            lcall ?Display_BCD
06F3 D000       447            pop ar0
06F5            448       
06F5 854F34     449       mov y, counter
06F8 753001     450            mov x+0, #low (1 % 0x10000) 
06FB 753100     450            mov x+1, #high(1 % 0x10000) 
06FE 753200     450            mov x+2, #low (1 / 0x10000) 
0701 753300     450            mov x+3, #high(1 / 0x10000) 
0704 1201B4     451       lcall add32
0707 7534E8     452            mov y+0, #low (1000 % 0x10000) 
070A 753503     452            mov y+1, #high(1000 % 0x10000) 
070D 753600     452            mov y+2, #low (1000 / 0x10000) 
0710 753700     452            mov y+3, #high(1000 / 0x10000) 
0713 12022F     453       lcall x_eq_y
0716 2000A8     454       jb mf, start_game_jmp
0719 85304F     455       mov counter, X ; counter+
071C            456   
071C 200238     457       jb p2_press, start_game_nohit1_jmp
071F C002       458            push AR2
0721 7A32       458            mov R2, #50
0723 12008B     458            lcall ?Wait_Milli_Seconds
0726 D002       458            pop AR2
0728 20022C     459       jb p2_press, start_game_nohit1_jmp
072B 3002FD     460       jnb p2_press, $
072E C28E       461       clr TR1
0730 E4         462       clr a 
0731 E542       463       mov a, p2points
0733 B40003     464       cjne a, #0x00, start_jmpsub2
0736 02075A     465       ljmp start_jmp
0739            466       
0739            467   
0739            468   start_jmpsub2:
0739 F530       469       mov x, a
073B 753401     470            mov y+0, #low (1 % 0x10000) 
073E 753500     470            mov y+1, #high(1 % 0x10000) 
0741 753600     470            mov y+2, #low (1 / 0x10000) 
0744 753700     470            mov y+3, #high(1 / 0x10000) 
0747 1201D5     471       lcall sub32
074A E530       472       mov a, x
074C D4         473       da a
074D F542       474       mov p2points, a
074F E4         475       clr a
0750 C201       476       clr p1_press
0752 C202       477       clr p2_press
0754 02075A     478       ljmp start_jmp
0757            479       
0757            480   start_game_nohit1_jmp:
0757 020667     481            ljmp start_game_nohit1
075A            482   
075A            483   start_jmp:
075A C201       484       clr p1_press
075C C202       485       clr p2_press
075E 020553     486       ljmp start_game
0761            487   p1win:
0761 C201       488       clr p1_press
0763 C202       489       clr p2_press
0765 C0E0       490            push acc
0767 7409       490            mov a, #9
0769 14         490            dec a
076A 120111     490            lcall ?Set_Cursor_1 ; Select column and row
076D D0E0       490            pop acc
076F C083       491            push dph
0771 C082       491            push dpl
0773 C0E0       491            push acc
0775 900044     491            mov dptr, #Winner1_message1
0778 120104     491            lcall ?Send_Constant_String
077B D0E0       491            pop acc
077D D082       491            pop dpl
077F D083       491            pop dph
0781 C083       492            push dph
0783 C082       492            push dpl
0785 C0E0       492            push acc
0787 90004E     492            mov dptr, #Winner1_message2
078A 120104     492            lcall ?Send_Constant_String
078D D0E0       492            pop acc
078F D082       492            pop dpl
0791 D083       492            pop dph
0793 C002       493            push AR2
0795 7A05       493            mov R2, #5
0797 12008B     493            lcall ?Wait_Milli_Seconds
079A D002       493            pop AR2
079C            493   
079C C0E0       494            push acc
079E 7401       494            mov a, #1
07A0 14         494            dec a
07A1 120111     494            lcall ?Set_Cursor_1 ; Select column and row
07A4 D0E0       494            pop acc
07A6 C083       495            push dph
07A8 C082       495            push dpl
07AA C0E0       495            push acc
07AC 900068     495            mov dptr, #Playagain
07AF 120104     495            lcall ?Send_Constant_String
07B2 D0E0       495            pop acc
07B4 D082       495            pop dpl
07B6 D083       495            pop dph
07B8 C0E0       496            push acc
07BA 7401       496            mov a, #1
07BC 14         496            dec a
07BD 12010F     496            lcall ?Set_Cursor_2 ; Select column and row
07C0 D0E0       496            pop acc
07C2 C083       497            push dph
07C4 C082       497            push dpl
07C6 C0E0       497            push acc
07C8 900075     497            mov dptr, #Clear_screen
07CB 120104     497            lcall ?Send_Constant_String
07CE D0E0       497            pop acc
07D0 D082       497            pop dpl
07D2 D083       497            pop dph
07D4 208012     498       jb START_BUTTON, p1win_jmp2
07D7 C002       499            push AR2
07D9 7A05       499            mov R2, #5
07DB 12008B     499            lcall ?Wait_Milli_Seconds
07DE D002       499            pop AR2
07E0 208006     500       jb START_BUTTON, p1win_jmp2
07E3 3080FD     501       jnb START_BUTTON, $
07E6 020884     502       ljmp restart_jmp
07E9            503   p1win_jmp2:
07E9 020761     504       ljmp p1win
07EC            505   p2win: 
07EC C201       506       clr p1_press
07EE C202       507       clr p2_press
07F0 C0E0       508            push acc
07F2 7409       508            mov a, #9
07F4 14         508            dec a
07F5 120111     508            lcall ?Set_Cursor_1 ; Select column and row
07F8 D0E0       508            pop acc
07FA C083       509            push dph
07FC C082       509            push dpl
07FE C0E0       509            push acc
0800 900056     509            mov dptr, #Winner2_message1
0803 120104     509            lcall ?Send_Constant_String
0806 D0E0       509            pop acc
0808 D082       509            pop dpl
080A D083       509            pop dph
080C C0E0       510            push acc
080E 7409       510            mov a, #9
0810 14         510            dec a
0811 12010F     510            lcall ?Set_Cursor_2 ; Select column and row
0814 D0E0       510            pop acc
0816 C083       511            push dph
0818 C082       511            push dpl
081A C0E0       511            push acc
081C 90005E     511            mov dptr, #Winner2_message2
081F 120104     511            lcall ?Send_Constant_String
0822 D0E0       511            pop acc
0824 D082       511            pop dpl
0826 D083       511            pop dph
0828 C002       512            push AR2
082A 7A32       512            mov R2, #50
082C 12008B     512            lcall ?Wait_Milli_Seconds
082F D002       512            pop AR2
0831 C0E0       513            push acc
0833 7401       513            mov a, #1
0835 14         513            dec a
0836 120111     513            lcall ?Set_Cursor_1 ; Select column and row
0839 D0E0       513            pop acc
083B C083       514            push dph
083D C082       514            push dpl
083F C0E0       514            push acc
0841 900068     514            mov dptr, #Playagain
0844 120104     514            lcall ?Send_Constant_String
0847 D0E0       514            pop acc
0849 D082       514            pop dpl
084B D083       514            pop dph
084D C0E0       515            push acc
084F 7401       515            mov a, #1
0851 14         515            dec a
0852 12010F     515            lcall ?Set_Cursor_2 ; Select column and row
0855 D0E0       515            pop acc
0857 C083       516            push dph
0859 C082       516            push dpl
085B C0E0       516            push acc
085D 900075     516            mov dptr, #Clear_screen
0860 120104     516            lcall ?Send_Constant_String
0863 D0E0       516            pop acc
0865 D082       516            pop dpl
0867 D083       516            pop dph
0869 208015     517       jb START_BUTTON, p2win_jmp1
086C C002       518            push AR2
086E 7A32       518            mov R2, #50
0870 12008B     518            lcall ?Wait_Milli_Seconds
0873 D002       518            pop AR2
0875 208009     519       jb START_BUTTON, p2win_jmp1
0878 3080FD     520       jnb START_BUTTON, $
087B 020884     521       ljmp restart_jmp
087E            522   
087E            523   p1win_jmp1:
087E 020761     524       ljmp p1win
0881            525   
0881            526   p2win_jmp1:
0881 0207EC     527       ljmp p2win
0884            528   
0884            529   restart_jmp:
0884 020887     530       ljmp restart_game
0887            531   
0887            532   restart_game:
0887 754100     533       mov p1points, #0x00
088A 754200     534       mov p2points, #0x00
088D 020553     535       ljmp start_game
0890            536   end
