                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P0.0
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   
0000             10   CLK           EQU 22118400
0000             11   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             12   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             13   TIMER1_RATE   EQU 4200     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             14   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))
0000             15   TIMER1_RATE1   EQU 4000  
0000             16   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1)))               ;2000Hz frequency lose frequency
0000             17   TIMER2_RATE   EQU 4200                 ;2100Hz frequency win frequency
0000             18   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             19   
0000             20   org 0000H
0000 0204A4      21      ljmp MyProgram
0003             22   
000B             23   org 0x000B
000B 02039E      24            ljmp Timer0_ISR
000E             25   
0013             26   org 0x0013
0013 32          27            reti
0014             28   
0014             29   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             30   org 0x001B
001B 0203C6      31            ljmp Timer1_ISR
001E             32   
001E             33   
0030             34   DSEG at 30H
0030             35   x:   ds 4
0034             36   y:   ds 4
0038             37   seed: ds 4  
003C             38   bcd: ds 5
0041             39   p1points: ds 1
0042             40   p2points: ds 1
0043             41   T0ov: ds 2
0045             42   T2ov: ds 2
0047             43   freq1: ds 4
004B             44   freq2: ds 4
004F             45   counter: ds 4
0053             46   
0000             47   BSEG
0000             48   mf: dbit 1
0001             49   p1_press: dbit 1
0002             50   p2_press: dbit 1
0003             51   
001E             52   cseg
001E             53   ; These 'equ' must match the hardware wiring
001E             54   LCD_RS equ P3.2
001E             55   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             56   LCD_E  equ P3.3
001E             57   LCD_D4 equ P3.4
001E             58   LCD_D5 equ P3.5
001E             59   LCD_D6 equ P3.6
001E             60   LCD_D7 equ P3.7
001E             61   SOUND_OUT equ P1.1
001E             62   
001E 506C6179    63   Initial_Message:  db 'Player1:          ', 0
     6572313A
     20202020
     20202020
     202000
0031 506C6179    64   Initial_Message2: db 'Player2:          ', 0
     6572323A
     20202020
     20202020
     202000
0044             65   
0044 57696E6E    66   Winner1_message1: db 'Winner!:D', 0
     6572213A
     4400
004E 4C6F7365    67   Winner1_message2: db 'Loser:P', 0
     723A5000
0056             68   
0056 4C6F7365    69   Winner2_message1: db 'Loser:P', 0
     723A5000
005E 57696E6E    70   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
0068             71   
0068 506C6179    72   Playagain       : db 'Play again ?', 0
     20616761
     696E203F
     00
0075 20202020    73   Clear_screen    : db '          ', 0
     20202020
     202000
0080             74   
                522   $LIST
                 77   $LIST
0385             79   
0385             80   Timer0_Init:
0385 E589        81            mov a, TMOD
0387 54F0        82            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
0389 4401        83            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
038B F589        84            mov TMOD, a
038D 758CEA      85            mov TH0, #high(TIMER0_RELOAD)
0390 758AE8      86            mov TL0, #low(TIMER0_RELOAD)
0393             87            ; Set autoreload value
0393 75F4EA      88            mov RH0, #high(TIMER0_RELOAD)
0396 75F2E8      89            mov RL0, #low(TIMER0_RELOAD)
0399             90            ; Enable the timer and interrupts
0399 D2A9        91       setb ET0  ; Enable timer 0 interrupt
039B D28C        92       setb TR0  ; Start timer 0
039D 22          93            ret
039E             94   
039E             95   Timer0_ISR:
039E C28D        96            clr TF0  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03A0 C0E0        97            push acc
03A2 0543        98            inc T0ov+0
03A4 E543        99            mov a, T0ov+0
03A6 7002       100            jnz Timer0_ISR_done
03A8 0544       101            inc T0ov+1
03AA            102   
03AA            103   Timer0_ISR_done:
03AA D0E0       104            pop acc
03AC 32         105            reti
03AD            106   
03AD            107   Timer1_Init:
03AD E589       108            mov a, TMOD
03AF 54F0       109            anl a, #0xf0 ; Clear the bits for timer 0
03B1 4401       110            orl a, #0x01 ; Configure timer 0 as 16-timer
03B3 F589       111            mov TMOD, a
03B5 758DEB     112            mov TH1, #high(TIMER1_RELOAD)
03B8 758B6E     113            mov TL1, #low(TIMER1_RELOAD)
03BB            114            ; Set autoreload value
03BB 75F5EB     115            mov RH1, #high(TIMER1_RELOAD)
03BE 75F36E     116            mov RL1, #low(TIMER1_RELOAD)
03C1            117            ; Enable the timer and interrupts
03C1 D2AB       118       setb ET1  ; Enable timer 0 interrupt
03C3 D28E       119       setb TR1  ; Start timer 0
03C5 22         120            ret
03C6            121   
03C6            122   ;---------------------------------;
03C6            123   ; ISR for timer 0.  Set to execute;
03C6            124   ; every 1/4096Hz to generate a    ;
03C6            125   ; 2048 Hz square wave at pin P1.1 ;
03C6            126   ;---------------------------------;
03C6            127   Timer1_ISR:
03C6            128            ;clr TF0  ; According to the data sheet this is done for us already.
03C6 B291       129            cpl SOUND_OUT ; Connect speaker to P1.1!
03C8 32         130            reti
03C9            131   
03C9            132   Timer1_Init1:
03C9 E589       133            mov a, TMOD
03CB 54F0       134            anl a, #0xf0 ; Clear the bits for timer 0
03CD 4401       135            orl a, #0x01 ; Configure timer 0 as 16-timer
03CF F589       136            mov TMOD, a
03D1 758DEA     137            mov TH1, #high(TIMER1_RELOAD1)
03D4 758B67     138            mov TL1, #low(TIMER1_RELOAD1)
03D7            139            ; Set autoreload value
03D7 75F5EA     140            mov RH1, #high(TIMER1_RELOAD1)
03DA 75F367     141            mov RL1, #low(TIMER1_RELOAD1)
03DD            142            ; Enable the timer and interrupts
03DD D2AB       143       setb ET1  ; Enable timer 0 interrupt
03DF D28E       144       setb TR1  ; Start timer 0
03E1 22         145            ret
03E2            146   
03E2            147   ;---------------------------------;
03E2            148   ; ISR for timer 0.  Set to execute;
03E2            149   ; every 1/4096Hz to generate a    ;
03E2            150   ; 2048 Hz square wave at pin P1.1 ;
03E2            151   ;---------------------------------;
03E2            152   ; When using a 22.1184MHz crystal in fast mode
03E2            153   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
03E2            154   ; (tuned manually to get as close to 1s as possible)
03E2            155   Wait1s:
03E2 7AB0       156       mov R2, #176
03E4 79FA       157   X3: mov R1, #250
03E6 78A6       158   X2: mov R0, #166
03E8 D8FE       159   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
03EA D9FA       160       djnz R1, X2 ; 22.51519us*250=5.629ms
03EC DAF6       161       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
03EE 22         162       ret
03EF            163   
03EF            164   ;Initializes timer/counter 2 as a 16-bit counter
03EF            165   InitTimer2:
03EF 75C802     166            mov T2CON, #0b_0000_0010 ; Stop timer/counter.  Set as counter (clock input is pin T2).
03F2            167            ; Set the reload value on overflow to zero (just in case is not zero)
03F2 75CB00     168            mov RCAP2H, #0
03F5 75CA00     169            mov RCAP2L, #0
03F8 D290       170       setb P1.0 ; P1.0 is connected to T2.  Make sure it can be used as input.
03FA 22         171       ret
03FB            172   
03FB            173   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
03FB            174   hex2bcd1:
03FB E4         175            clr a
03FC 7800       176       mov R0, #0  ;Set BCD result to 00000000 
03FE 7900       177       mov R1, #0
0400 7A00       178       mov R2, #0
0402 7B10       179       mov R3, #16 ;Loop counter.
0404            180   
0404            181   hex2bcd_loop:
0404 E5CC       182       mov a, TL2 ;Shift TH0-TL0 left through carry
0406 33         183       rlc a
0407 F5CC       184       mov TL2, a
0409            185       
0409 E5CD       186       mov a, TH2
040B 33         187       rlc a
040C F5CD       188       mov TH2, a
040E            189         
040E            190            ; Perform bcd + bcd + carry
040E            191            ; using BCD numbers
040E E8         192            mov a, R0
040F 38         193            addc a, R0
0410 D4         194            da a
0411 F8         195            mov R0, a
0412            196            
0412 E9         197            mov a, R1
0413 39         198            addc a, R1
0414 D4         199            da a
0415 F9         200            mov R1, a
0416            201            
0416 EA         202            mov a, R2
0417 3A         203            addc a, R2
0418 D4         204            da a
0419 FA         205            mov R2, a
041A            206            
041A DBE8       207            djnz R3, hex2bcd_loop
041C 22         208            ret
041D            209   
041D            210   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
041D            211   DisplayBCD_LCD:
041D            212            ; 5th digit:
041D EA         213       mov a, R2
041E 540F       214       anl a, #0FH
0420 4430       215       orl a, #'0' ; convert to ASCII
0422 1200D0     216            lcall ?WriteData
0425            217            ; 4th digit:
0425 E9         218       mov a, R1
0426 C4         219       swap a
0427 540F       220       anl a, #0FH
0429 4430       221       orl a, #'0' ; convert to ASCII
042B 1200D0     222            lcall ?WriteData
042E            223            ; 3rd digit:
042E E9         224       mov a, R1
042F 540F       225       anl a, #0FH
0431 4430       226       orl a, #'0' ; convert to ASCII
0433 1200D0     227            lcall ?WriteData
0436            228            ; 2nd digit:
0436 E8         229       mov a, R0
0437 C4         230       swap a
0438 540F       231       anl a, #0FH
043A 4430       232       orl a, #'0' ; convert to ASCII
043C 1200D0     233            lcall ?WriteData
043F            234            ; 1st digit:
043F E8         235       mov a, R0
0440 540F       236       anl a, #0FH
0442 4430       237       orl a, #'0' ; convert to ASCII
0444 1200D0     238            lcall ?WriteData
0447            239       
0447 22         240       ret
0448            241   random:
0448 853830     242       mov x+0, seed+0
044B 853931     243       mov x+1, seed+1
044E 853A32     244       mov x+2, seed+2
0451 853B33     245       mov x+3, seed+3
0454 7534FD     246            mov y+0, #low (214013 % 0x10000) 
0457 753543     246            mov y+1, #high(214013 % 0x10000) 
045A 753603     246            mov y+2, #low (214013 / 0x10000) 
045D 753700     246            mov y+3, #high(214013 / 0x10000) 
0460 120269     247       lcall mul32
0463 753443     248            mov y+0, #low (2451011 % 0x10000) 
0466 753566     248            mov y+1, #high(2451011 % 0x10000) 
0469 753625     248            mov y+2, #low (2451011 / 0x10000) 
046C 753700     248            mov y+3, #high(2451011 / 0x10000) 
046F 1201B4     249       lcall add32
0472 853038     250       mov seed+0, x+0
0475 853139     251       mov seed+1, x+1
0478 85323A     252       mov seed+2, x+2
047B 85333B     253       mov seed+3, x+3
047E 22         254       ret
047F            255   
047F            256   wait_random:
047F C002       257            push AR2
0481 AA38       257            mov R2, seed+0
0483 12008B     257            lcall ?Wait_Milli_Seconds
0486 D002       257            pop AR2
0488 C002       258            push AR2
048A AA39       258            mov R2, seed+1
048C 12008B     258            lcall ?Wait_Milli_Seconds
048F D002       258            pop AR2
0491 C002       259            push AR2
0493 AA3A       259            mov R2, seed+2
0495 12008B     259            lcall ?Wait_Milli_Seconds
0498 D002       259            pop AR2
049A C002       260            push AR2
049C AA3B       260            mov R2, seed+3
049E 12008B     260            lcall ?Wait_Milli_Seconds
04A1 D002       260            pop AR2
04A3 22         261       ret
04A4            262   ;---------------------------------;
04A4            263   ; Hardware initialization         ;
04A4            264   ;---------------------------------;
04A4            265   
04A4            266   ;---------------------------------;
04A4            267   ; Main program loop               ;
04A4            268   ;---------------------------------;
04A4            269   MyProgram:
04A4            270       ; Initialize the hardware:
04A4 75817F     271       mov SP, #7FH
04A7 C0E0       272            push acc
04A9 7401       272            mov a, #1
04AB 14         272            dec a
04AC 120111     272            lcall ?Set_Cursor_1 ; Select column and row
04AF D0E0       272            pop acc
04B1 C083       273            push dph
04B3 C082       273            push dpl
04B5 C0E0       273            push acc
04B7 90001E     273            mov dptr, #Initial_Message
04BA 120104     273            lcall ?Send_Constant_String
04BD D0E0       273            pop acc
04BF D082       273            pop dpl
04C1 D083       273            pop dph
04C3 C0E0       274            push acc
04C5 7401       274            mov a, #1
04C7 14         274            dec a
04C8 12010F     274            lcall ?Set_Cursor_2 ; Select column and row
04CB D0E0       274            pop acc
04CD C083       275            push dph
04CF C082       275            push dpl
04D1 C0E0       275            push acc
04D3 900031     275            mov dptr, #Initial_Message2
04D6 120104     275            lcall ?Send_Constant_String
04D9 D0E0       275            pop acc
04DB D082       275            pop dpl
04DD D083       275            pop dph
04DF 1203EF     276       lcall InitTimer2
04E2 D2AF       277       setb EA
04E4 20C5FD     278       jb P4.5, $
04E7 85CD38     279       mov seed+0, TH2
04EA 753901     280       mov seed+1, #0x01
04ED 753A87     281       mov seed+2, #0x87
04F0 85CC3B     282       mov seed+3, TL2
04F3 754100     283       mov p1points, #0x00
04F6 754200     284       mov p2points, #0x00
04F9            285       
04F9            286   forever:
04F9            287       ; Measure the frequency applied to pin T2
04F9 C2CA       288       clr TR2 ; Stop counter 2
04FB E4         289       clr a
04FC F5CC       290       mov TL2, a
04FE F5CD       291       mov TH2, a
0500 C2CF       292       clr TF2
0502 D2CA       293       setb TR2 ; Start counter 2
0504 1203E2     294       lcall Wait1s ; Wait one second
0507 C2CA       295       clr TR2 ; Stop counter 2, TH2-TL2 has the frequency
0509            296   
0509 C0E0       297            push acc
050B 740C       297            mov a, #12
050D 14         297            dec a
050E 12010F     297            lcall ?Set_Cursor_2 ; Select column and row
0511 D0E0       297            pop acc
0513 1203FB     298            lcall hex2bcd1
0516 12041D     299       lcall DisplayBCD_LCD
0519 02053F     300       ljmp start_game
051C            301            ; Convert the result to BCD and display on LCD
051C            302            
051C 80DB       303       sjmp forever ;  Repeat! 
051E            304   
051E            305   forever1:
051E C2CA       306       clr TR2 ; Stop counter 2
0520 E4         307       clr a
0521 F5CC       308       mov TL2, a
0523 F5CD       309       mov TH2, a
0525 C2CF       310       clr TF2
0527 D2CA       311       setb TR2 ; Start counter 2
0529 1203E2     312       lcall Wait1s ; Wait one second
052C C2CA       313       clr TR2 ; Stop counter 2, TH2-TL2 has the frequency
052E            314   
052E C0E0       315            push acc
0530 740C       315            mov a, #12
0532 14         315            dec a
0533 12010F     315            lcall ?Set_Cursor_2 ; Select column and row
0536 D0E0       315            pop acc
0538 1203FB     316            lcall hex2bcd1
053B 12041D     317       lcall DisplayBCD_LCD
053E 22         318       ret
053F            319   start_game:
053F C201       320       clr p1_press
0541 C202       321       clr p2_press
0543 C0E0       322            push acc
0545 7409       322            mov a, #9
0547 14         322            dec a
0548 120111     322            lcall ?Set_Cursor_1 ; Select column and row
054B D0E0       322            pop acc
054D C000       323            push ar0
054F A841       323            mov r0, p1points
0551 120116     323            lcall ?Display_BCD
0554 D000       323            pop ar0
0556 C0E0       324            push acc
0558 7409       324            mov a, #9
055A 14         324            dec a
055B 12010F     324            lcall ?Set_Cursor_2 ; Select column and row
055E D0E0       324            pop acc
0560 C000       325            push ar0
0562 A842       325            mov r0, p2points
0564 120116     325            lcall ?Display_BCD
0567 D000       325            pop ar0
0569 120448     326       lcall random
056C 12047F     327       lcall wait_random
056F E539       328       mov a, seed+1
0571 A2E3       329       mov c, acc.3
0573            330       ;mov HLbit, c
0573            331       ;jc lose_tone
0573 02058B     332       ljmp win_tone
0576            333   
0576            334   lose_tone:
0576 1203AD     335       lcall Timer1_Init
0579 753000     336            mov x+0, #low (0 % 0x10000) 
057C 753100     336            mov x+1, #high(0 % 0x10000) 
057F 753200     336            mov x+2, #low (0 / 0x10000) 
0582 753300     336            mov x+3, #high(0 / 0x10000) 
0585 85304F     337       mov counter, x
0588 020643     338       ljmp start_game_nohit1
058B            339   win_tone: 
058B 1203C9     340       lcall Timer1_Init1
058E            341       
058E 020591     342       ljmp checkfreq1
0591            343       
0591            344   checkfreq1:
0591 12051E     345       lcall forever1
0594 753470     346            mov y+0, #low (4720 % 0x10000) 
0597 753512     346            mov y+1, #high(4720 % 0x10000) 
059A 753600     346            mov y+2, #low (4720 / 0x10000) 
059D 753700     346            mov y+3, #high(4720 / 0x10000) 
05A0 854730     347       mov x, freq1
05A3 12025F     348       lcall x_lteq_y
05A6 100003     349       jbc mf, freq1_press
05A9 0205D1     350       ljmp start_game_hit1
05AC            351   
05AC            352   freq1_press:
05AC D201       353       setb p1_press
05AE 0205D1     354       ljmp start_game_hit1
05B1            355   
05B1            356   checkfreq2:
05B1 12051E     357       lcall forever1
05B4 753470     358            mov y+0, #low (4720 % 0x10000) 
05B7 753512     358            mov y+1, #high(4720 % 0x10000) 
05BA 753600     358            mov y+2, #low (4720 / 0x10000) 
05BD 753700     358            mov y+3, #high(4720 / 0x10000) 
05C0 854B30     359       mov x, freq2
05C3 12025F     360       lcall x_lteq_y
05C6 100003     361       jbc mf, freq2_press
05C9 02060D     362       ljmp start_game_hit2
05CC            363   
05CC            364   freq2_press:
05CC D202       365       setb p2_press
05CE 02060D     366       ljmp start_game_hit2
05D1            367   
05D1            368   start_game_hit1:
05D1 12051E     369       lcall forever1
05D4 C000       370            push ar0
05D6 A801       370            mov r0, p1_press
05D8 120116     370            lcall ?Display_BCD
05DB D000       370            pop ar0
05DD 2001D1     371       jb p1_press, checkfreq2
05E0 C002       372            push AR2
05E2 7A32       372            mov R2, #50
05E4 12008B     372            lcall ?Wait_Milli_Seconds
05E7 D002       372            pop AR2
05E9 2001C5     373       jb p1_press, checkfreq2
05EC 3001FD     374       jnb p1_press, $
05EF C28E       375       clr TR1
05F1 E4         376       clr a 
05F2 E541       377       mov a, p1points
05F4 2401       378       add a, #0x01
05F6 F541       379       mov p1points, a
05F8 B4053E     380       cjne a, #0x05, start_jmp1
05FB E4         381       clr a
05FC C201       382       clr p1_press
05FE C202       383       clr p2_press
0600 020603     384       ljmp p1win_jmp
0603            385   
0603            386   p1win_jmp:
0603 C201       387       clr p1_press
0605 C202       388       clr p2_press
0607 02073D     389       ljmp p1win
060A            390   checkfreq1_jmp:
060A 020591     391       ljmp checkfreq1
060D            392   start_game_hit2:
060D 12051E     393       lcall forever1
0610 2002F7     394       jb p2_press, checkfreq1_jmp
0613 C002       395            push AR2
0615 7A32       395            mov R2, #50
0617 12008B     395            lcall ?Wait_Milli_Seconds
061A D002       395            pop AR2
061C 2002EB     396       jb p2_press, checkfreq1_jmp
061F 3002FD     397       jnb p2_press, $
0622 C28E       398       clr TR1
0624 E4         399       clr a 
0625 E542       400       mov a, p2points
0627 2401       401       add a, #0x01
0629 F542       402       mov p2points, a
062B B4050B     403       cjne a, #0x05, start_jmp1
062E C201       404       clr p1_press
0630 C202       405       clr p2_press
0632 E4         406       clr a
0633 02063C     407       ljmp p2win_jmp
0636            408   start_game_hit1_jmp:
0636 0205D1     409            ljmp start_game_hit1
0639            410            
0639            411   start_jmp1:
0639 02053F     412       ljmp start_game
063C            413   
063C            414   p2win_jmp:
063C C201       415       clr p1_press
063E C202       416       clr p2_press
0640 0207C8     417       ljmp p2win
0643            418   
0643            419   start_game_nohit1:
0643 020591     420       ljmp checkfreq1
0646 C0E0       421            push acc
0648 740F       421            mov a, #15
064A 14         421            dec a
064B 12010F     421            lcall ?Set_Cursor_2 ; Select column and row
064E D0E0       421            pop acc
0650 C000       422            push ar0
0652 A84F       422            mov r0, counter
0654 120116     422            lcall ?Display_BCD
0657 D000       422            pop ar0
0659 854F34     423       mov y, counter
065C 753001     424            mov x+0, #low (1 % 0x10000) 
065F 753100     424            mov x+1, #high(1 % 0x10000) 
0662 753200     424            mov x+2, #low (1 / 0x10000) 
0665 753300     424            mov x+3, #high(1 / 0x10000) 
0668 1201B4     425       lcall add32
066B 7534E8     426            mov y+0, #low (1000 % 0x10000) 
066E 753503     426            mov y+1, #high(1000 % 0x10000) 
0671 753600     426            mov y+2, #low (1000 / 0x10000) 
0674 753700     426            mov y+3, #high(1000 / 0x10000) 
0677 12022F     427       lcall x_eq_y
067A 200020     428       jb mf, start_game_jmp
067D 85304F     429       mov counter, X ; counter+
0680 200138     430       jb p1_press, start_game_nohit2
0683 C002       431            push AR2
0685 7A32       431            mov R2, #50
0687 12008B     431            lcall ?Wait_Milli_Seconds
068A D002       431            pop AR2
068C 20012C     432       jb p1_press, start_game_nohit2
068F 3001FD     433       jnb p1_press, $
0692 C28E       434       clr TR1
0694 E4         435       clr a 
0695 E541       436       mov a, p1points
0697 B40006     437       cjne a, #0x00, start_jmpsub1
069A 02053F     438       ljmp start_game
069D            439   
069D            440   start_game_jmp:
069D 02053F     441       ljmp start_game
06A0            442   
06A0            443   start_jmpsub1:
06A0 F530       444       mov x, a
06A2 753401     445            mov y+0, #low (1 % 0x10000) 
06A5 753500     445            mov y+1, #high(1 % 0x10000) 
06A8 753600     445            mov y+2, #low (1 / 0x10000) 
06AB 753700     445            mov y+3, #high(1 / 0x10000) 
06AE 1201D5     446       lcall sub32
06B1 E530       447       mov a, x
06B3 D4         448       da a
06B4 F541       449       mov p1points, a
06B6 E4         450       clr a
06B7 C201       451       clr p1_press
06B9 C202       452       clr p2_press
06BB            453   
06BB            454   
06BB            455   start_game_nohit2:
06BB 0205B1     456       ljmp checkfreq2
06BE C0E0       457            push acc
06C0 740F       457            mov a, #15
06C2 14         457            dec a
06C3 12010F     457            lcall ?Set_Cursor_2 ; Select column and row
06C6 D0E0       457            pop acc
06C8 C000       458            push ar0
06CA A84F       458            mov r0, counter
06CC 120116     458            lcall ?Display_BCD
06CF D000       458            pop ar0
06D1            459       
06D1 854F34     460       mov y, counter
06D4 753001     461            mov x+0, #low (1 % 0x10000) 
06D7 753100     461            mov x+1, #high(1 % 0x10000) 
06DA 753200     461            mov x+2, #low (1 / 0x10000) 
06DD 753300     461            mov x+3, #high(1 / 0x10000) 
06E0 1201B4     462       lcall add32
06E3 7534E8     463            mov y+0, #low (1000 % 0x10000) 
06E6 753503     463            mov y+1, #high(1000 % 0x10000) 
06E9 753600     463            mov y+2, #low (1000 / 0x10000) 
06EC 753700     463            mov y+3, #high(1000 / 0x10000) 
06EF 12022F     464       lcall x_eq_y
06F2 2000A8     465       jb mf, start_game_jmp
06F5 85304F     466       mov counter, X ; counter+
06F8            467   
06F8 200238     468       jb p2_press, start_game_nohit1_jmp
06FB C002       469            push AR2
06FD 7A32       469            mov R2, #50
06FF 12008B     469            lcall ?Wait_Milli_Seconds
0702 D002       469            pop AR2
0704 20022C     470       jb p2_press, start_game_nohit1_jmp
0707 3002FD     471       jnb p2_press, $
070A C28E       472       clr TR1
070C E4         473       clr a 
070D E542       474       mov a, p2points
070F B40003     475       cjne a, #0x00, start_jmpsub2
0712 020736     476       ljmp start_jmp
0715            477       
0715            478   
0715            479   start_jmpsub2:
0715 F530       480       mov x, a
0717 753401     481            mov y+0, #low (1 % 0x10000) 
071A 753500     481            mov y+1, #high(1 % 0x10000) 
071D 753600     481            mov y+2, #low (1 / 0x10000) 
0720 753700     481            mov y+3, #high(1 / 0x10000) 
0723 1201D5     482       lcall sub32
0726 E530       483       mov a, x
0728 D4         484       da a
0729 F542       485       mov p2points, a
072B E4         486       clr a
072C C201       487       clr p1_press
072E C202       488       clr p2_press
0730 020736     489       ljmp start_jmp
0733            490       
0733            491   start_game_nohit1_jmp:
0733 020643     492            ljmp start_game_nohit1
0736            493   
0736            494   start_jmp:
0736 C201       495       clr p1_press
0738 C202       496       clr p2_press
073A 02053F     497       ljmp start_game
073D            498   p1win:
073D C201       499       clr p1_press
073F C202       500       clr p2_press
0741 C0E0       501            push acc
0743 7409       501            mov a, #9
0745 14         501            dec a
0746 120111     501            lcall ?Set_Cursor_1 ; Select column and row
0749 D0E0       501            pop acc
074B C083       502            push dph
074D C082       502            push dpl
074F C0E0       502            push acc
0751 900044     502            mov dptr, #Winner1_message1
0754 120104     502            lcall ?Send_Constant_String
0757 D0E0       502            pop acc
0759 D082       502            pop dpl
075B D083       502            pop dph
075D C083       503            push dph
075F C082       503            push dpl
0761 C0E0       503            push acc
0763 90004E     503            mov dptr, #Winner1_message2
0766 120104     503            lcall ?Send_Constant_String
0769 D0E0       503            pop acc
076B D082       503            pop dpl
076D D083       503            pop dph
076F C002       504            push AR2
0771 7A05       504            mov R2, #5
0773 12008B     504            lcall ?Wait_Milli_Seconds
0776 D002       504            pop AR2
0778            504   
0778 C0E0       505            push acc
077A 7401       505            mov a, #1
077C 14         505            dec a
077D 120111     505            lcall ?Set_Cursor_1 ; Select column and row
0780 D0E0       505            pop acc
0782 C083       506            push dph
0784 C082       506            push dpl
0786 C0E0       506            push acc
0788 900068     506            mov dptr, #Playagain
078B 120104     506            lcall ?Send_Constant_String
078E D0E0       506            pop acc
0790 D082       506            pop dpl
0792 D083       506            pop dph
0794 C0E0       507            push acc
0796 7401       507            mov a, #1
0798 14         507            dec a
0799 12010F     507            lcall ?Set_Cursor_2 ; Select column and row
079C D0E0       507            pop acc
079E C083       508            push dph
07A0 C082       508            push dpl
07A2 C0E0       508            push acc
07A4 900075     508            mov dptr, #Clear_screen
07A7 120104     508            lcall ?Send_Constant_String
07AA D0E0       508            pop acc
07AC D082       508            pop dpl
07AE D083       508            pop dph
07B0 208012     509       jb START_BUTTON, p1win_jmp2
07B3 C002       510            push AR2
07B5 7A05       510            mov R2, #5
07B7 12008B     510            lcall ?Wait_Milli_Seconds
07BA D002       510            pop AR2
07BC 208006     511       jb START_BUTTON, p1win_jmp2
07BF 3080FD     512       jnb START_BUTTON, $
07C2 020860     513       ljmp restart_jmp
07C5            514   p1win_jmp2:
07C5 02073D     515       ljmp p1win
07C8            516   p2win: 
07C8 C201       517       clr p1_press
07CA C202       518       clr p2_press
07CC C0E0       519            push acc
07CE 7409       519            mov a, #9
07D0 14         519            dec a
07D1 120111     519            lcall ?Set_Cursor_1 ; Select column and row
07D4 D0E0       519            pop acc
07D6 C083       520            push dph
07D8 C082       520            push dpl
07DA C0E0       520            push acc
07DC 900056     520            mov dptr, #Winner2_message1
07DF 120104     520            lcall ?Send_Constant_String
07E2 D0E0       520            pop acc
07E4 D082       520            pop dpl
07E6 D083       520            pop dph
07E8 C0E0       521            push acc
07EA 7409       521            mov a, #9
07EC 14         521            dec a
07ED 12010F     521            lcall ?Set_Cursor_2 ; Select column and row
07F0 D0E0       521            pop acc
07F2 C083       522            push dph
07F4 C082       522            push dpl
07F6 C0E0       522            push acc
07F8 90005E     522            mov dptr, #Winner2_message2
07FB 120104     522            lcall ?Send_Constant_String
07FE D0E0       522            pop acc
0800 D082       522            pop dpl
0802 D083       522            pop dph
0804 C002       523            push AR2
0806 7A32       523            mov R2, #50
0808 12008B     523            lcall ?Wait_Milli_Seconds
080B D002       523            pop AR2
080D C0E0       524            push acc
080F 7401       524            mov a, #1
0811 14         524            dec a
0812 120111     524            lcall ?Set_Cursor_1 ; Select column and row
0815 D0E0       524            pop acc
0817 C083       525            push dph
0819 C082       525            push dpl
081B C0E0       525            push acc
081D 900068     525            mov dptr, #Playagain
0820 120104     525            lcall ?Send_Constant_String
0823 D0E0       525            pop acc
0825 D082       525            pop dpl
0827 D083       525            pop dph
0829 C0E0       526            push acc
082B 7401       526            mov a, #1
082D 14         526            dec a
082E 12010F     526            lcall ?Set_Cursor_2 ; Select column and row
0831 D0E0       526            pop acc
0833 C083       527            push dph
0835 C082       527            push dpl
0837 C0E0       527            push acc
0839 900075     527            mov dptr, #Clear_screen
083C 120104     527            lcall ?Send_Constant_String
083F D0E0       527            pop acc
0841 D082       527            pop dpl
0843 D083       527            pop dph
0845 208015     528       jb START_BUTTON, p2win_jmp1
0848 C002       529            push AR2
084A 7A32       529            mov R2, #50
084C 12008B     529            lcall ?Wait_Milli_Seconds
084F D002       529            pop AR2
0851 208009     530       jb START_BUTTON, p2win_jmp1
0854 3080FD     531       jnb START_BUTTON, $
0857 020860     532       ljmp restart_jmp
085A            533   
085A            534   p1win_jmp1:
085A 02073D     535       ljmp p1win
085D            536   
085D            537   p2win_jmp1:
085D 0207C8     538       ljmp p2win
0860            539   
0860            540   restart_jmp:
0860 020863     541       ljmp restart_game
0863            542   
0863            543   restart_game:
0863 754100     544       mov p1points, #0x00
0866 754200     545       mov p2points, #0x00
0869 02053F     546       ljmp start_game
086C            547   end
