                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P4.5
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   
0000             10   CLK           EQU 22118400
0000             11   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             12   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             13   TIMER1_RATE   EQU 4200     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             14   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))
0000             15   TIMER1_RATE1   EQU 4000  
0000             16   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1)))               ;2000Hz frequency lose frequency
0000             17   TIMER2_RATE   EQU 4200                 ;2100Hz frequency win frequency
0000             18   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             19   
0000             20   org 0000H
0000 0204B2      21      ljmp MyProgram
0003             22   
0003             23   
0003             24   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             25   org 0x001B
001B 02039E      26            ljmp Timer1_ISR
001E             27   
001E             28   
0030             29   DSEG at 0x30
0030             30   x:   ds 4
0034             31   y:   ds 4
0038             32   seed: ds 4  
003C             33   bcd: ds 5
0041             34   p1points: ds 1
0042             35   p2points: ds 1
0043             36   freq1: ds 4
0047             37   freq2: ds 4
004B             38   counter: ds 4
004F             39   Period_A: ds 2
0051             40   Period_B: ds 2
0053             41   bcd1: ds 5
0058             42   bcd2: ds 5
005D             43   
0000             44   BSEG
0000             45   mf: dbit 1
0001             46   p1_press: dbit 1
0002             47   p2_press: dbit 1
0003             48   
001E             49   cseg
001E             50   ; These 'equ' must match the hardware wiring
001E             51   LCD_RS equ P3.2
001E             52   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             53   LCD_E  equ P3.3
001E             54   LCD_D4 equ P3.4
001E             55   LCD_D5 equ P3.5
001E             56   LCD_D6 equ P3.6
001E             57   LCD_D7 equ P3.7
001E             58   SOUND_OUT equ P1.1
001E             59   
001E 506C6179    60   Initial_Message:  db 'Player1:          ', 0
     6572313A
     20202020
     20202020
     202000
0031 506C6179    61   Initial_Message2: db 'Player2:          ', 0
     6572323A
     20202020
     20202020
     202000
0044             62   
0044 57696E6E    63   Winner1_message1: db 'Winner!:D', 0
     6572213A
     4400
004E 4C6F7365    64   Winner1_message2: db 'Loser:P', 0
     723A5000
0056             65   
0056 4C6F7365    66   Winner2_message1: db 'Loser:P', 0
     723A5000
005E 57696E6E    67   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
0068             68   
0068 506C6179    69   Playagain       : db 'Play again ?', 0
     20616761
     696E203F
     00
0075 20202020    70   Clear_screen    : db '          ', 0
     20202020
     202000
0080             71   
                522   $LIST
                 74   $LIST
0385             76   
0385             77   
0385             78   Timer1_Init:
0385 E589        79            mov a, TMOD
0387 54F0        80            anl a, #0xf0 ; Clear the bits for timer 0
0389 4401        81            orl a, #0x01 ; Configure timer 0 as 16-timer
038B F589        82            mov TMOD, a
038D 758DEB      83            mov TH1, #high(TIMER1_RELOAD)
0390 758B6E      84            mov TL1, #low(TIMER1_RELOAD)
0393             85            ; Set autoreload value
0393 75F5EB      86            mov RH1, #high(TIMER1_RELOAD)
0396 75F36E      87            mov RL1, #low(TIMER1_RELOAD)
0399             88            ; Enable the timer and interrupts
0399 D2AB        89       setb ET1  ; Enable timer 0 interrupt
039B D28E        90       setb TR1  ; Start timer 0
039D 22          91            ret
039E             92   
039E             93   ;---------------------------------;
039E             94   ; ISR for timer 0.  Set to execute;
039E             95   ; every 1/4096Hz to generate a    ;
039E             96   ; 2048 Hz square wave at pin P1.1 ;
039E             97   ;---------------------------------;
039E             98   Timer1_ISR:
039E             99            ;clr TF0  ; According to the data sheet this is done for us already.
039E B291       100            cpl SOUND_OUT ; Connect speaker to P1.1!
03A0 32         101            reti
03A1            102   
03A1            103   Timer1_Init1:
03A1 E589       104            mov a, TMOD
03A3 54F0       105            anl a, #0xf0 ; Clear the bits for timer 0
03A5 4401       106            orl a, #0x01 ; Configure timer 0 as 16-timer
03A7 F589       107            mov TMOD, a
03A9 758DEA     108            mov TH1, #high(TIMER1_RELOAD1)
03AC 758B67     109            mov TL1, #low(TIMER1_RELOAD1)
03AF            110            ; Set autoreload value
03AF 75F5EA     111            mov RH1, #high(TIMER1_RELOAD1)
03B2 75F367     112            mov RL1, #low(TIMER1_RELOAD1)
03B5            113            ; Enable the timer and interrupts
03B5 D2AB       114       setb ET1  ; Enable timer 0 interrupt
03B7 D28E       115       setb TR1  ; Start timer 0
03B9 22         116            ret
03BA            117   
03BA            118   ;---------------------------------;
03BA            119   ; ISR for timer 0.  Set to execute;
03BA            120   ; every 1/4096Hz to generate a    ;
03BA            121   ; 2048 Hz square wave at pin P1.1 ;
03BA            122   ;---------------------------------;
03BA            123   ; When using a 22.1184MHz crystal in fast mode
03BA            124   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
03BA            125   ; (tuned manually to get as close to 1s as possible)
03BA            126   Wait1s:
03BA 7AB0       127       mov R2, #176
03BC 79FA       128   X3: mov R1, #250
03BE 78A6       129   X2: mov R0, #166
03C0 D8FE       130   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
03C2 D9FA       131       djnz R1, X2 ; 22.51519us*250=5.629ms
03C4 DAF6       132       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
03C6 22         133       ret
03C7            134   
03C7            135   ;Initializes timer/counter 2 as a 16-bit counter
03C7            136   InitTimer2:
03C7 75C800     137            mov T2CON, #0b_0000_0000 ; Stop timer/counter.  Set as counter (clock input is pin T2).
03CA            138            ; Set the reload value on overflow to zero (just in case is not zero)
03CA 75CB00     139            mov RCAP2H, #0
03CD 75CA00     140            mov RCAP2L, #0
03D0 D2A0       141       setb P2.0 ; Pin is used as input
03D2 D2A1       142       setb P2.1  ; P1.0 is connected to T2.  Make sure it can be used as input.
03D4 22         143       ret
03D5            144   
03D5            145   InitTimer0:
03D5 758811     146       mov TCON, #0b_0001_0001
03D8            147            ;Stop timer/counter.  Set as counter (clock input is pin T2).
03D8            148            ; Set the reload value on overflow to zero (just in case is not zero)
03D8 75F400     149            mov RH0, #0
03DB 75F200     150            mov RL0, #0
03DE D280       151       setb P0.0 ; P1.0 is connected to T2.  Make sure it can be used as input.
03E0 22         152       ret
03E1            153   
03E1            154   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
03E1            155   
03E1            156   hex2bcd1:
03E1 E4         157            clr a
03E2 7800       158       mov R0, #0  ;Set BCD result to 00000000 
03E4 7900       159       mov R1, #0
03E6 7A00       160       mov R2, #0
03E8 7B10       161       mov R3, #16 ;Loop counter.
03EA            162   
03EA            163   hex2bcd_loop1:
03EA E5CC       164       mov a, TL2 ;Shift TH0-TL0 left through carry
03EC 33         165       rlc a
03ED F5CC       166       mov TL2, a
03EF            167       
03EF E5CD       168       mov a, TH2
03F1 33         169       rlc a
03F2 F5CD       170       mov TH2, a
03F4            171         
03F4            172            ; Perform bcd + bcd + carry
03F4            173            ; using BCD numbers
03F4 E8         174            mov a, R0
03F5 38         175            addc a, R0
03F6 D4         176            da a
03F7 F8         177            mov R0, a
03F8            178            
03F8 E9         179            mov a, R1
03F9 39         180            addc a, R1
03FA D4         181            da a
03FB F9         182            mov R1, a
03FC            183            
03FC EA         184            mov a, R2
03FD 3A         185            addc a, R2
03FE D4         186            da a
03FF FA         187            mov R2, a
0400            188            
0400 DBE8       189            djnz R3, hex2bcd_loop1
0402 22         190            ret
0403            191   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
0403            192   DisplayBCD_LCD:
0403            193            ; 5th digit:
0403 EA         194       mov a, R2
0404 540F       195       anl a, #0FH
0406 4430       196       orl a, #'0' ; convert to ASCII
0408 1200D0     197            lcall ?WriteData
040B            198            ; 4th digit:
040B E9         199       mov a, R1
040C C4         200       swap a
040D 540F       201       anl a, #0FH
040F 4430       202       orl a, #'0' ; convert to ASCII
0411 1200D0     203            lcall ?WriteData
0414            204            ; 3rd digit:
0414 E9         205       mov a, R1
0415 540F       206       anl a, #0FH
0417 4430       207       orl a, #'0' ; convert to ASCII
0419 1200D0     208            lcall ?WriteData
041C            209            ; 2nd digit:
041C E8         210       mov a, R0
041D C4         211       swap a
041E 540F       212       anl a, #0FH
0420 4430       213       orl a, #'0' ; convert to ASCII
0422 1200D0     214            lcall ?WriteData
0425            215            ; 1st digit:
0425 E8         216       mov a, R0
0426 540F       217       anl a, #0FH
0428 4430       218       orl a, #'0' ; convert to ASCII
042A 1200D0     219            lcall ?WriteData
042D            220       
042D 22         221       ret
042E            222   
042E            223   random:
042E 853830     224       mov x+0, seed+0
0431 853931     225       mov x+1, seed+1
0434 853A32     226       mov x+2, seed+2
0437 853B33     227       mov x+3, seed+3
043A 7534FD     228            mov y+0, #low (214013 % 0x10000) 
043D 753543     228            mov y+1, #high(214013 % 0x10000) 
0440 753603     228            mov y+2, #low (214013 / 0x10000) 
0443 753700     228            mov y+3, #high(214013 / 0x10000) 
0446 120269     229       lcall mul32
0449 753443     230            mov y+0, #low (2451011 % 0x10000) 
044C 753566     230            mov y+1, #high(2451011 % 0x10000) 
044F 753625     230            mov y+2, #low (2451011 / 0x10000) 
0452 753700     230            mov y+3, #high(2451011 / 0x10000) 
0455 1201B4     231       lcall add32
0458 853038     232       mov seed+0, x+0
045B 853139     233       mov seed+1, x+1
045E 85323A     234       mov seed+2, x+2
0461 85333B     235       mov seed+3, x+3
0464 22         236       ret
0465            237   
0465            238   wait_random:
0465 C002       239            push AR2
0467 AA38       239            mov R2, seed+0
0469 12008B     239            lcall ?Wait_Milli_Seconds
046C D002       239            pop AR2
046E C002       240            push AR2
0470 AA39       240            mov R2, seed+1
0472 12008B     240            lcall ?Wait_Milli_Seconds
0475 D002       240            pop AR2
0477 C002       241            push AR2
0479 AA3A       241            mov R2, seed+2
047B 12008B     241            lcall ?Wait_Milli_Seconds
047E D002       241            pop AR2
0480 C002       242            push AR2
0482 AA3B       242            mov R2, seed+3
0484 12008B     242            lcall ?Wait_Milli_Seconds
0487 D002       242            pop AR2
0489 22         243       ret
048A            244   
048A            245   movtox:
048A            246            ; 5th digit:
048A EA         247       mov a, R2
048B 540F       248       anl a, #0FH
048D 4430       249       orl a, #'0' ; convert to ASCII
048F 754000     250       mov bcd+4, #0
0492 753F00     251       mov bcd+3, #0
0495 8A3E       252       mov bcd+2, R2
0497            253            ;lcall ?WriteData
0497            254            ; 4th digit:
0497 E9         255       mov a, R1
0498 C4         256       swap a
0499 540F       257       anl a, #0FH
049B 4430       258       orl a, #'0' ; convert to ASCII
049D            259            ;lcall ?WriteData
049D            260            ; 3rd digit:
049D E9         261       mov a, R1
049E 540F       262       anl a, #0FH
04A0 4430       263       orl a, #'0' ; convert to ASCII
04A2 893D       264       mov bcd+1, R1
04A4            265            ;lcall ?WriteData
04A4            266            ; 2nd digit:
04A4 E8         267       mov a, R0
04A5 C4         268       swap a
04A6 540F       269       anl a, #0FH
04A8 4430       270       orl a, #'0' ; convert to ASCII
04AA            271       
04AA            272            ;lcall ?WriteData
04AA            273            ; 1st digit:
04AA E8         274       mov a, R0
04AB 540F       275       anl a, #0FH
04AD 4430       276       orl a, #'0' ; convert to ASCII
04AF 883C       277       mov bcd+0, R0
04B1            278            ;lcall ?WriteData
04B1            279       
04B1 22         280       ret
04B2            281   ;---------------------------------;
04B2            282   ; Hardware initialization         ;
04B2            283   ;---------------------------------;
04B2            284   
04B2            285   ;---------------------------------;
04B2            286   ; Main program loop               ;
04B2            287   ;---------------------------------;
04B2            288   MyProgram:
04B2            289       ; Initialize the hardware:
04B2 75817F     290       mov SP, #7FH
04B5 1203C7     291       lcall InitTimer2
04B8 1200DA     292       lcall LCD_4BIT
04BB 1203D5     293       lcall InitTimer0
04BE C0E0       294            push acc
04C0 7401       294            mov a, #1
04C2 14         294            dec a
04C3 120111     294            lcall ?Set_Cursor_1 ; Select column and row
04C6 D0E0       294            pop acc
04C8 C083       295            push dph
04CA C082       295            push dpl
04CC C0E0       295            push acc
04CE 90001E     295            mov dptr, #Initial_Message
04D1 120104     295            lcall ?Send_Constant_String
04D4 D0E0       295            pop acc
04D6 D082       295            pop dpl
04D8 D083       295            pop dph
04DA C0E0       296            push acc
04DC 7401       296            mov a, #1
04DE 14         296            dec a
04DF 12010F     296            lcall ?Set_Cursor_2 ; Select column and row
04E2 D0E0       296            pop acc
04E4 C083       297            push dph
04E6 C082       297            push dpl
04E8 C0E0       297            push acc
04EA 900031     297            mov dptr, #Initial_Message2
04ED 120104     297            lcall ?Send_Constant_String
04F0 D0E0       297            pop acc
04F2 D082       297            pop dpl
04F4 D083       297            pop dph
04F6 D2AF       298       setb EA
04F8 20C5FD     299       jb P4.5, $
04FB 85CD38     300       mov seed+0, TH2
04FE 753901     301       mov seed+1, #0x01
0501 753A87     302       mov seed+2, #0x87
0504 85CC3B     303       mov seed+3, TL2
0507 754100     304       mov p1points, #0x00
050A 754200     305       mov p2points, #0x00
050D            306       
050D            307   forever:
050D C0E0       308            push acc
050F 7409       308            mov a, #9
0511 14         308            dec a
0512 120111     308            lcall ?Set_Cursor_1 ; Select column and row
0515 D0E0       308            pop acc
0517 C000       309            push ar0
0519 A841       309            mov r0, p1points
051B 120116     309            lcall ?Display_BCD
051E D000       309            pop ar0
0520 C0E0       310            push acc
0522 7409       310            mov a, #9
0524 14         310            dec a
0525 12010F     310            lcall ?Set_Cursor_2 ; Select column and row
0528 D0E0       310            pop acc
052A C000       311            push ar0
052C A842       311            mov r0, p2points
052E 120116     311            lcall ?Display_BCD
0531 D000       311            pop ar0
0533            312       ; Measure the frequency applied to pin T2
0533            313       ; Measure the period applied to pin P2.0
0533 C2CA       314       clr TR2 ; Stop counter 2
0535 75CC00     315       mov TL2, #0
0538 75CD00     316       mov TH2, #0
053B 20A0FD     317       jb P2.0, $
053E 30A0FD     318       jnb P2.0, $
0541 D2CA       319       setb TR2 ; Start counter 0
0543 20A0FD     320       jb P2.0, $
0546 30A0FD     321       jnb P2.0, $
0549 C2CA       322       clr TR2 ; Stop counter 2, TH2-TL2 has the period
054B            323       ; save the period of P2.0 for later use
054B            324            ; Convert the result to BCD and display on LCD
054B C0E0       325            push acc
054D 740B       325            mov a, #11
054F 14         325            dec a
0550 120111     325            lcall ?Set_Cursor_1 ; Select column and row
0553 D0E0       325            pop acc
0555 1203E1     326            lcall hex2bcd1
0558 120403     327       lcall DisplayBCD_LCD
055B            328       
055B            329       ; Measure the period applied to pin P2.1
055B C2CA       330       clr TR2 ; Stop counter 2
055D 75CC00     331       mov TL2, #0
0560 75CD00     332       mov TH2, #0
0563 20A1FD     333       jb P2.1, $
0566 30A1FD     334       jnb P2.1, $
0569 D2CA       335       setb TR2 ; Start counter 0
056B 20A1FD     336       jb P2.1, $
056E 30A1FD     337       jnb P2.1, $
0571 C2CA       338       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0573            339       ; save the period of P2.1 for later use
0573            340            ; Convert the result to BCD and display on LCD
0573 C0E0       341            push acc
0575 740B       341            mov a, #11
0577 14         341            dec a
0578 12010F     341            lcall ?Set_Cursor_2 ; Select column and row
057B D0E0       341            pop acc
057D 1203E1     342            lcall hex2bcd1
0580 120403     343       lcall DisplayBCD_LCD
0583            344            ; Convert the result to BCD and display on LCD
0583            345            
0583 02050D     346       ljmp forever ;  Repeat! 
0586            347   
0586            348   forever1:
0586            349       ; Measure the period applied to pin P2.0
0586 C2CA       350       clr TR2 ; Stop counter 2
0588 75CC00     351       mov TL2, #0
058B 75CD00     352       mov TH2, #0
058E 20A0FD     353       jb P2.0, $
0591 30A0FD     354       jnb P2.0, $
0594 D2CA       355       setb TR2 ; Start counter 0
0596 20A0FD     356       jb P2.0, $
0599 30A0FD     357       jnb P2.0, $
059C C2CA       358       clr TR2 ; Stop counter 2, TH2-TL2 has the period
059E            359       ; save the period of P2.0 for later use
059E            360            ; Convert the result to BCD and display on LCD
059E C0E0       361            push acc
05A0 740B       361            mov a, #11
05A2 14         361            dec a
05A3 120111     361            lcall ?Set_Cursor_1 ; Select column and row
05A6 D0E0       361            pop acc
05A8 1203E1     362            lcall hex2bcd1
05AB 120403     363       lcall DisplayBCD_LCD
05AE 22         364       ret
05AF            365   forever2:
05AF            366       ; Measure the period applied to pin P2.1
05AF C2CA       367       clr TR2 ; Stop counter 2
05B1 75CC00     368       mov TL2, #0
05B4 75CD00     369       mov TH2, #0
05B7 20A1FD     370       jb P2.1, $
05BA 30A1FD     371       jnb P2.1, $
05BD D2CA       372       setb TR2 ; Start counter 0
05BF 20A1FD     373       jb P2.1, $
05C2 30A1FD     374       jnb P2.1, $
05C5 C2CA       375       clr TR2 ; Stop counter 2, TH2-TL2 has the period
05C7            376       ; save the period of P2.1 for later use
05C7            377            ; Convert the result to BCD and display on LCD
05C7 C0E0       378            push acc
05C9 740B       378            mov a, #11
05CB 14         378            dec a
05CC 12010F     378            lcall ?Set_Cursor_2 ; Select column and row
05CF D0E0       378            pop acc
05D1 1203E1     379            lcall hex2bcd1
05D4 120403     380       lcall DisplayBCD_LCD
05D7 22         381       ret
05D8            382   start_game:
05D8 D201       383       setb p1_press
05DA D202       384       setb p2_press   
05DC 12042E     385       lcall random
05DF 120465     386       lcall wait_random
05E2 E539       387       mov a, seed+1
05E4 A2E3       388       mov c, acc.3
05E6            389       ;mov HLbit, c
05E6            390       ;jc lose_tone
05E6 0205FE     391       ljmp win_tone
05E9            392   
05E9            393   lose_tone:
05E9 120385     394       lcall Timer1_Init
05EC 753000     395            mov x+0, #low (0 % 0x10000) 
05EF 753100     395            mov x+1, #high(0 % 0x10000) 
05F2 753200     395            mov x+2, #low (0 / 0x10000) 
05F5 753300     395            mov x+3, #high(0 / 0x10000) 
05F8 85304B     396       mov counter, x
05FB 02068D     397       ljmp start_game_nohit1
05FE            398   win_tone: 
05FE 1203A1     399       lcall Timer1_Init1
0601            400       
0601 020630     401       ljmp start_game_hit1
0604            402       
0604            403   checkfreq1:
0604 753489     404            mov y+0, #low (4745 % 0x10000) 
0607 753512     404            mov y+1, #high(4745 % 0x10000) 
060A 753600     404            mov y+2, #low (4745 / 0x10000) 
060D 753700     404            mov y+3, #high(4745 / 0x10000) 
0610 120255     405       lcall x_gteq_y
0613 100001     406       jbc mf, freq1_press
0616 22         407       ret
0617            408   
0617            409   freq1_press:
0617 C201       410       clr p1_press
0619 22         411       ret
061A            412   
061A            413   checkfreq2:
061A 753489     414            mov y+0, #low (4745 % 0x10000) 
061D 753512     414            mov y+1, #high(4745 % 0x10000) 
0620 753600     414            mov y+2, #low (4745 / 0x10000) 
0623 753700     414            mov y+3, #high(4745 / 0x10000) 
0626 120255     415       lcall x_gteq_y
0629 100001     416       jbc mf, freq2_press
062C 22         417       ret
062D            418   
062D            419   freq2_press:
062D C202       420       clr p2_press
062F 22         421       ret
0630            422   
0630            423   start_game_hit1:
0630 120586     424       lcall forever1
0633 12048A     425       lcall movtox
0636 120178     426       lcall bcd2hex
0639 120604     427       lcall checkfreq1
063C 10011E     428       jbc p1_press, start_game_hit2
063F C28E       429       clr TR1
0641 E4         430       clr a 
0642 E541       431       mov a, p1points
0644 2401       432       add a, #0x01
0646 F541       433       mov p1points, a
0648 B40538     434       cjne a, #0x05, start_jmp1
064B E4         435       clr a
064C D201       436       setb p1_press
064E D202       437       setb p2_press
0650 020653     438       ljmp p1win_jmp
0653            439   
0653            440   p1win_jmp:
0653 D201       441       setb p1_press
0655 D202       442       setb p2_press
0657 020787     443       ljmp p1win
065A            444   checkfreq1_jmp:
065A 020604     445       ljmp checkfreq1
065D            446   start_game_hit2:
065D 1205AF     447       lcall forever2
0660 12048A     448       lcall movtox
0663 120178     449       lcall bcd2hex
0666 12061A     450       lcall checkfreq2
0669 1002C4     451       jbc p2_press, start_game_hit1
066C C28E       452       clr TR1
066E E4         453       clr a 
066F E542       454       mov a, p2points
0671 2401       455       add a, #0x01
0673 F542       456       mov p2points, a
0675 B4050B     457       cjne a, #0x05, start_jmp1
0678 D201       458       setb p1_press
067A D202       459       setb p2_press
067C E4         460       clr a
067D 020686     461       ljmp p2win_jmp
0680            462   start_game_hit1_jmp:
0680 020630     463            ljmp start_game_hit1
0683            464            
0683            465   start_jmp1:
0683 0205D8     466       ljmp start_game
0686            467   
0686            468   p2win_jmp:
0686 D201       469       setb p1_press
0688 D202       470       setb p2_press
068A 02081C     471       ljmp p2win
068D            472   
068D            473   start_game_nohit1:
068D 020604     474       ljmp checkfreq1
0690 C0E0       475            push acc
0692 740F       475            mov a, #15
0694 14         475            dec a
0695 12010F     475            lcall ?Set_Cursor_2 ; Select column and row
0698 D0E0       475            pop acc
069A C000       476            push ar0
069C A84B       476            mov r0, counter
069E 120116     476            lcall ?Display_BCD
06A1 D000       476            pop ar0
06A3 854B34     477       mov y, counter
06A6 753001     478            mov x+0, #low (1 % 0x10000) 
06A9 753100     478            mov x+1, #high(1 % 0x10000) 
06AC 753200     478            mov x+2, #low (1 / 0x10000) 
06AF 753300     478            mov x+3, #high(1 / 0x10000) 
06B2 1201B4     479       lcall add32
06B5 7534E8     480            mov y+0, #low (1000 % 0x10000) 
06B8 753503     480            mov y+1, #high(1000 % 0x10000) 
06BB 753600     480            mov y+2, #low (1000 / 0x10000) 
06BE 753700     480            mov y+3, #high(1000 / 0x10000) 
06C1 12022F     481       lcall x_eq_y
06C4 200020     482       jb mf, start_game_jmp
06C7 85304B     483       mov counter, x ; counter+
06CA 200138     484       jb p1_press, start_game_nohit2
06CD C002       485            push AR2
06CF 7A32       485            mov R2, #50
06D1 12008B     485            lcall ?Wait_Milli_Seconds
06D4 D002       485            pop AR2
06D6 20012C     486       jb p1_press, start_game_nohit2
06D9 3001FD     487       jnb p1_press, $
06DC C28E       488       clr TR1
06DE E4         489       clr a 
06DF E541       490       mov a, p1points
06E1 B40006     491       cjne a, #0x00, start_jmpsub1
06E4 0205D8     492       ljmp start_game
06E7            493   
06E7            494   start_game_jmp:
06E7 0205D8     495       ljmp start_game
06EA            496   
06EA            497   start_jmpsub1:
06EA F530       498       mov x, a
06EC 753401     499            mov y+0, #low (1 % 0x10000) 
06EF 753500     499            mov y+1, #high(1 % 0x10000) 
06F2 753600     499            mov y+2, #low (1 / 0x10000) 
06F5 753700     499            mov y+3, #high(1 / 0x10000) 
06F8 1201D5     500       lcall sub32
06FB E530       501       mov a, x
06FD D4         502       da a
06FE F541       503       mov p1points, a
0700 E4         504       clr a
0701 D201       505       setb p1_press
0703 D202       506       setb p2_press
0705            507   
0705            508   
0705            509   start_game_nohit2:
0705 02061A     510       ljmp checkfreq2
0708 C0E0       511            push acc
070A 740F       511            mov a, #15
070C 14         511            dec a
070D 12010F     511            lcall ?Set_Cursor_2 ; Select column and row
0710 D0E0       511            pop acc
0712 C000       512            push ar0
0714 A84B       512            mov r0, counter
0716 120116     512            lcall ?Display_BCD
0719 D000       512            pop ar0
071B            513       
071B 854B34     514       mov y, counter
071E 753001     515            mov x+0, #low (1 % 0x10000) 
0721 753100     515            mov x+1, #high(1 % 0x10000) 
0724 753200     515            mov x+2, #low (1 / 0x10000) 
0727 753300     515            mov x+3, #high(1 / 0x10000) 
072A 1201B4     516       lcall add32
072D 7534E8     517            mov y+0, #low (1000 % 0x10000) 
0730 753503     517            mov y+1, #high(1000 % 0x10000) 
0733 753600     517            mov y+2, #low (1000 / 0x10000) 
0736 753700     517            mov y+3, #high(1000 / 0x10000) 
0739 12022F     518       lcall x_eq_y
073C 2000A8     519       jb mf, start_game_jmp
073F 85304B     520       mov counter, X ; counter+
0742            521   
0742 200238     522       jb p2_press, start_game_nohit1_jmp
0745 C002       523            push AR2
0747 7A32       523            mov R2, #50
0749 12008B     523            lcall ?Wait_Milli_Seconds
074C D002       523            pop AR2
074E 20022C     524       jb p2_press, start_game_nohit1_jmp
0751 3002FD     525       jnb p2_press, $
0754 C28E       526       clr TR1
0756 E4         527       clr a 
0757 E542       528       mov a, p2points
0759 B40003     529       cjne a, #0x00, start_jmpsub2
075C 020780     530       ljmp start_jmp
075F            531       
075F            532   
075F            533   start_jmpsub2:
075F F530       534       mov x, a
0761 753401     535            mov y+0, #low (1 % 0x10000) 
0764 753500     535            mov y+1, #high(1 % 0x10000) 
0767 753600     535            mov y+2, #low (1 / 0x10000) 
076A 753700     535            mov y+3, #high(1 / 0x10000) 
076D 1201D5     536       lcall sub32
0770 E530       537       mov a, x
0772 D4         538       da a
0773 F542       539       mov p2points, a
0775 E4         540       clr a
0776 C201       541       clr p1_press
0778 C202       542       clr p2_press
077A 020780     543       ljmp start_jmp
077D            544       
077D            545   start_game_nohit1_jmp:
077D 02068D     546            ljmp start_game_nohit1
0780            547   
0780            548   start_jmp:
0780 D201       549       setb p1_press
0782 D202       550       setb p2_press
0784 0205D8     551       ljmp start_game
0787            552   p1win:
0787 D201       553       setb p1_press
0789 D202       554       setb p2_press
078B C0E0       555            push acc
078D 7409       555            mov a, #9
078F 14         555            dec a
0790 120111     555            lcall ?Set_Cursor_1 ; Select column and row
0793 D0E0       555            pop acc
0795 C083       556            push dph
0797 C082       556            push dpl
0799 C0E0       556            push acc
079B 900044     556            mov dptr, #Winner1_message1
079E 120104     556            lcall ?Send_Constant_String
07A1 D0E0       556            pop acc
07A3 D082       556            pop dpl
07A5 D083       556            pop dph
07A7 C0E0       557            push acc
07A9 7409       557            mov a, #9
07AB 14         557            dec a
07AC 12010F     557            lcall ?Set_Cursor_2 ; Select column and row
07AF D0E0       557            pop acc
07B1 C083       558            push dph
07B3 C082       558            push dpl
07B5 C0E0       558            push acc
07B7 90004E     558            mov dptr, #Winner1_message2
07BA 120104     558            lcall ?Send_Constant_String
07BD D0E0       558            pop acc
07BF D082       558            pop dpl
07C1 D083       558            pop dph
07C3 C002       559            push AR2
07C5 7A05       559            mov R2, #5
07C7 12008B     559            lcall ?Wait_Milli_Seconds
07CA D002       559            pop AR2
07CC            559   
07CC C0E0       560            push acc
07CE 7401       560            mov a, #1
07D0 14         560            dec a
07D1 120111     560            lcall ?Set_Cursor_1 ; Select column and row
07D4 D0E0       560            pop acc
07D6 C083       561            push dph
07D8 C082       561            push dpl
07DA C0E0       561            push acc
07DC 900068     561            mov dptr, #Playagain
07DF 120104     561            lcall ?Send_Constant_String
07E2 D0E0       561            pop acc
07E4 D082       561            pop dpl
07E6 D083       561            pop dph
07E8 C0E0       562            push acc
07EA 7401       562            mov a, #1
07EC 14         562            dec a
07ED 12010F     562            lcall ?Set_Cursor_2 ; Select column and row
07F0 D0E0       562            pop acc
07F2 C083       563            push dph
07F4 C082       563            push dpl
07F6 C0E0       563            push acc
07F8 900075     563            mov dptr, #Clear_screen
07FB 120104     563            lcall ?Send_Constant_String
07FE D0E0       563            pop acc
0800 D082       563            pop dpl
0802 D083       563            pop dph
0804 20C512     564       jb START_BUTTON, p1win_jmp2
0807 C002       565            push AR2
0809 7A05       565            mov R2, #5
080B 12008B     565            lcall ?Wait_Milli_Seconds
080E D002       565            pop AR2
0810 20C506     566       jb START_BUTTON, p1win_jmp2
0813 30C5FD     567       jnb START_BUTTON, $
0816 0208B4     568       ljmp restart_jmp
0819            569   p1win_jmp2:
0819 020787     570       ljmp p1win
081C            571   p2win: 
081C D201       572       setb p1_press
081E D202       573       setb p2_press
0820 C0E0       574            push acc
0822 7409       574            mov a, #9
0824 14         574            dec a
0825 120111     574            lcall ?Set_Cursor_1 ; Select column and row
0828 D0E0       574            pop acc
082A C083       575            push dph
082C C082       575            push dpl
082E C0E0       575            push acc
0830 900056     575            mov dptr, #Winner2_message1
0833 120104     575            lcall ?Send_Constant_String
0836 D0E0       575            pop acc
0838 D082       575            pop dpl
083A D083       575            pop dph
083C C0E0       576            push acc
083E 7409       576            mov a, #9
0840 14         576            dec a
0841 12010F     576            lcall ?Set_Cursor_2 ; Select column and row
0844 D0E0       576            pop acc
0846 C083       577            push dph
0848 C082       577            push dpl
084A C0E0       577            push acc
084C 90005E     577            mov dptr, #Winner2_message2
084F 120104     577            lcall ?Send_Constant_String
0852 D0E0       577            pop acc
0854 D082       577            pop dpl
0856 D083       577            pop dph
0858 C002       578            push AR2
085A 7A32       578            mov R2, #50
085C 12008B     578            lcall ?Wait_Milli_Seconds
085F D002       578            pop AR2
0861 C0E0       579            push acc
0863 7401       579            mov a, #1
0865 14         579            dec a
0866 120111     579            lcall ?Set_Cursor_1 ; Select column and row
0869 D0E0       579            pop acc
086B C083       580            push dph
086D C082       580            push dpl
086F C0E0       580            push acc
0871 900068     580            mov dptr, #Playagain
0874 120104     580            lcall ?Send_Constant_String
0877 D0E0       580            pop acc
0879 D082       580            pop dpl
087B D083       580            pop dph
087D C0E0       581            push acc
087F 7401       581            mov a, #1
0881 14         581            dec a
0882 12010F     581            lcall ?Set_Cursor_2 ; Select column and row
0885 D0E0       581            pop acc
0887 C083       582            push dph
0889 C082       582            push dpl
088B C0E0       582            push acc
088D 900075     582            mov dptr, #Clear_screen
0890 120104     582            lcall ?Send_Constant_String
0893 D0E0       582            pop acc
0895 D082       582            pop dpl
0897 D083       582            pop dph
0899 20C515     583       jb START_BUTTON, p2win_jmp1
089C C002       584            push AR2
089E 7A32       584            mov R2, #50
08A0 12008B     584            lcall ?Wait_Milli_Seconds
08A3 D002       584            pop AR2
08A5 20C509     585       jb START_BUTTON, p2win_jmp1
08A8 30C5FD     586       jnb START_BUTTON, $
08AB 0208B4     587       ljmp restart_jmp
08AE            588   
08AE            589   p1win_jmp1:
08AE 020787     590       ljmp p1win
08B1            591   
08B1            592   p2win_jmp1:
08B1 02081C     593       ljmp p2win
08B4            594   
08B4            595   restart_jmp:
08B4 0208B7     596       ljmp restart_game
08B7            597   
08B7            598   restart_game:
08B7 754100     599       mov p1points, #0x00
08BA 754200     600       mov p2points, #0x00
08BD 0205D8     601       ljmp start_game
08C0            602   end
