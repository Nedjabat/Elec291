                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P4.5
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   UPDOWN           equ P0.1
0000             10   
0000             11   CLK           EQU 22118400
0000             12   TIMER0_RATE   EQU 2000     ; 1000Hz, for a timer tick of 1ms
0000             13   TIMER0_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             14   TIMER1_RATE   EQU 2000     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             15   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))
0000             16   TIMER1_RATE1   EQU 2000  
0000             17   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1)))               ;2000Hz frequency lose frequency
0000             18   TIMER2_RATE   EQU 2000                ;2100Hz frequency win frequency
0000             19   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             20   
0000             21   org 0000H
0000 020544      22      ljmp MyProgram
0003             23   
000B             24   org 0x000B
000B 02041C      25            ljmp Timer0_ISR
000E             26   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             27   org 0x001B
001B 0203D7      28            ljmp Timer1_ISR
001E             29   
001E             30   
0030             31   DSEG at 0x30
0030             32   x:   ds 4
0034             33   y:   ds 4
0038             34   seed: ds 4  
003C             35   bcd: ds 5
0041             36   Count1ms:     ds 2 
0043             37   seconds:  ds 1 ;
0044             38   p1points: ds 1
0045             39   p2points: ds 1
0046             40   freq1: ds 4
004A             41   freq2: ds 4
004E             42   counter: ds 4
0052             43   Period_A: ds 2
0054             44   Period_B: ds 2
0056             45   bcd1: ds 5
005B             46   bcd2: ds 5
0060             47   
0000             48   BSEG
0000             49   mf: dbit 1
0001             50   p1_press: dbit 1
0002             51   p2_press: dbit 1
0003             52   second_high: dbit 1
0004             53   half_seconds_flag: dbit 1
0005             54   
001E             55   cseg
001E             56   ; These 'equ' must match the hardware wiring
001E             57   LCD_RS equ P3.2
001E             58   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             59   LCD_E  equ P3.3
001E             60   LCD_D4 equ P3.4
001E             61   LCD_D5 equ P3.5
001E             62   LCD_D6 equ P3.6
001E             63   LCD_D7 equ P3.7
001E             64   SOUND_OUT equ P1.1
001E             65   
001E 506C6179    66   Initial_Message:  db 'Player1:          ', 0
     6572313A
     20202020
     20202020
     202000
0031 506C6179    67   Initial_Message2: db 'Player2:          ', 0
     6572323A
     20202020
     20202020
     202000
0044             68   
0044 57696E21    69   Winner1_message1: db 'Win!:D', 0
     3A4400
004B 4C6F7365    70   Winner1_message2: db 'Lose:P', 0
     3A5000
0052             71   
0052 4C6F7365    72   Winner2_message1: db 'Loser:P', 0
     723A5000
005A 57696E6E    73   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
0064             74   
0064 506C6179    75   Playagain       : db 'Play again ?', 0
     20616761
     696E203F
     00
0071 20202020    76   Clear_screen    : db '          ', 0
     20202020
     202000
007C             77   
                570   $LIST
                 80   $LIST
03BE             82   
03BE             83   
03BE             84   Timer1_Init:
03BE E589        85            mov a, TMOD
03C0 54F0        86            anl a, #0xf0 ; Clear the bits for timer 0
03C2 4401        87            orl a, #0x01 ; Configure timer 0 as 16-timer
03C4 F589        88            mov TMOD, a
03C6 758DD4      89            mov TH1, #high(TIMER1_RELOAD)
03C9 758BCD      90            mov TL1, #low(TIMER1_RELOAD)
03CC             91            ; Set autoreload value
03CC 75F5D4      92            mov RH1, #high(TIMER1_RELOAD)
03CF 75F3CD      93            mov RL1, #low(TIMER1_RELOAD)
03D2             94            ; Enable the timer and interrupts
03D2 D2AB        95       setb ET1  ; Enable timer 0 interrupt
03D4 D28E        96       setb TR1  ; Start timer 0
03D6 22          97            ret
03D7             98   
03D7             99   ;---------------------------------;
03D7            100   ; ISR for timer 0.  Set to execute;
03D7            101   ; every 1/4096Hz to generate a    ;
03D7            102   ; 2048 Hz square wave at pin P1.1 ;
03D7            103   ;---------------------------------;
03D7            104   Timer1_ISR:
03D7            105            ;clr TF0  ; According to the data sheet this is done for us already.
03D7 B291       106            cpl SOUND_OUT ; Connect speaker to P1.1!
03D9 32         107            reti
03DA            108   
03DA            109   Timer1_Init1:
03DA E589       110            mov a, TMOD
03DC 54F0       111            anl a, #0xf0 ; Clear the bits for timer 0
03DE 4401       112            orl a, #0x01 ; Configure timer 0 as 16-timer
03E0 F589       113            mov TMOD, a
03E2 758DD4     114            mov TH1, #high(TIMER1_RELOAD1)
03E5 758BCD     115            mov TL1, #low(TIMER1_RELOAD1)
03E8            116            ; Set autoreload value
03E8 75F5D4     117            mov RH1, #high(TIMER1_RELOAD1)
03EB 75F3CD     118            mov RL1, #low(TIMER1_RELOAD1)
03EE            119            ; Enable the timer and interrupts
03EE D2AB       120       setb ET1  ; Enable timer 0 interrupt
03F0 D28E       121       setb TR1  ; Start timer 0
03F2 22         122            ret
03F3            123   Timer2_Init:
03F3            124   
03F3 75C800     125            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
03F6 75CDD4     126            mov TH2, #high(TIMER2_RELOAD)
03F9 75CCCD     127            mov TL2, #low(TIMER2_RELOAD)
03FC            128            ; Set the reload value
03FC 75CBD4     129            mov RCAP2H, #high(TIMER2_RELOAD)
03FF 75CACD     130            mov RCAP2L, #low(TIMER2_RELOAD)
0402            131            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0402 E4         132            clr a
0403 F541       133            mov Count1ms+0, a
0405 F542       134            mov Count1ms+1, a
0407            135            ; Enable the timer and interrupts
0407 D2AD       136       setb ET2  ; Enable timer 2 interrupt
0409 D2CA       137       setb TR2  ; Enable timer 2
040B 22         138            ret
040C            139   
040C            140   
040C            141   ;---------------------------------;
040C            142   ; ISR for timer 2                 ;
040C            143   ;---------------------------------;
040C            144   Timer0_Init:
040C            145   
040C 758CD4     146            mov TH0, #high(TIMER0_RELOAD)
040F 758ACD     147            mov TL0, #low(TIMER0_RELOAD)
0412            148            ; Set the reload value
0412            149            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0412 E4         150            clr a
0413 F541       151            mov Count1ms+0, a
0415 F542       152            mov Count1ms+1, a
0417            153            ; Enable the timer and interrupts
0417 D2A9       154       setb ET0  ; Enable timer 2 interrupt
0419 D28C       155       setb TR0  ; Enable timer 2
041B 22         156            ret
041C            157   
041C            158   ;---------------------------------;
041C            159   ; ISR for timer 2                 ;
041C            160   ;---------------------------------;
041C            161   Timer0_ISR:
041C C28D       162            clr TF0  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
041E            163            
041E            164            ; The two registers used in the ISR must be saved in the stack
041E C0E0       165            push acc
0420 C0D0       166            push psw
0422            167            
0422            168            ; Increment the 16-bit one mili second counter
0422 0541       169            inc Count1ms+0    ; Increment the low 8-bits first
0424 E541       170            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0426 7002       171            jnz Inc_Done
0428 0542       172            inc Count1ms+1
042A            173   Inc_Done:
042A            174            ; Check if half second has passed
042A E541       175            mov a, Count1ms+0
042C B4E824     176            cjne a, #low(1000), Timer0_ISR_done ; Warning: this instruction changes the carry flag!
042F E542       177            mov a, Count1ms+1
0431 B4031F     178            cjne a, #high(1000), Timer0_ISR_done
0434            179            
0434            180            ; 500 milliseconds have passed.  Set a flag so the main program knows
0434 D204       181            setb half_seconds_flag ; Let the main program know half second had passed
0436 B28C       182            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0438            183            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0438 E4         184            clr a
0439 F541       185            mov Count1ms+0, a
043B F542       186            mov Count1ms+1, a
043D            187            ; Increment the BCD counter
043D E543       188            mov a, seconds
043F 308104     189            jnb UPDOWN, Timer0_ISR_decrement
0442 2401       190            add a, #0x01
0444 8002       191            sjmp Timer0_ISR_da
0446            192   Timer0_ISR_decrement:
0446 2499       193            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0448            194   Timer0_ISR_da:
0448 D4         195            da a ; Decimal adjust instruction.  Check datasheet for more details!
0449 F543       196            mov seconds, a
044B B46005     197       cjne a, #0x60, Timer0_ISR_done
044E D203       198       setb second_high
0450 E4         199       clr a
0451 F543       200       mov seconds, a
0453            201   Timer0_ISR_done:
0453 D0D0       202            pop psw
0455 D0E0       203            pop acc
0457 32         204            reti
0458            205   ;---------------------------------;
0458            206   ; ISR for timer 0.  Set to execute;
0458            207   ; every 1/4096Hz to generate a    ;
0458            208   ; 2048 Hz square wave at pin P1.1 ;
0458            209   ;---------------------------------;
0458            210   ; When using a 22.1184MHz crystal in fast mode
0458            211   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
0458            212   ; (tuned manually to get as close to 1s as possible)
0458            213   Wait1s:
0458 7AB0       214       mov R2, #176
045A 79FA       215   X3: mov R1, #250
045C 78A6       216   X2: mov R0, #166
045E D8FE       217   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
0460 D9FA       218       djnz R1, X2 ; 22.51519us*250=5.629ms
0462 DAF6       219       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
0464 22         220       ret
0465            221   
0465            222   ;Initializes timer/counter 2 as a 16-bit counter
0465            223   InitTimer2:
0465 75C800     224            mov T2CON, #0b_0000_0000 ; Stop timer/counter.  Set as counter (clock input is pin T2).
0468            225            ; Set the reload value on overflow to zero (just in case is not zero)
0468 75CB00     226            mov RCAP2H, #0
046B 75CA00     227            mov RCAP2L, #0
046E D2A0       228       setb P2.0 ; Pin is used as input
0470 D2A1       229       setb P2.1  ; P1.0 is connected to T2.  Make sure it can be used as input.
0472 22         230       ret
0473            231   
0473            232   
0473            233   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
0473            234   
0473            235   hex2bcd1:
0473 E4         236            clr a
0474 7800       237       mov R0, #0  ;Set BCD result to 00000000 
0476 7900       238       mov R1, #0
0478 7A00       239       mov R2, #0
047A 7B10       240       mov R3, #16 ;Loop counter.
047C            241   
047C            242   hex2bcd_loop1:
047C E5CC       243       mov a, TL2 ;Shift TH0-TL0 left through carry
047E 33         244       rlc a
047F F5CC       245       mov TL2, a
0481            246       
0481 E5CD       247       mov a, TH2
0483 33         248       rlc a
0484 F5CD       249       mov TH2, a
0486            250         
0486            251            ; Perform bcd + bcd + carry
0486            252            ; using BCD numbers
0486 E8         253            mov a, R0
0487 38         254            addc a, R0
0488 D4         255            da a
0489 F8         256            mov R0, a
048A            257            
048A E9         258            mov a, R1
048B 39         259            addc a, R1
048C D4         260            da a
048D F9         261            mov R1, a
048E            262            
048E EA         263            mov a, R2
048F 3A         264            addc a, R2
0490 D4         265            da a
0491 FA         266            mov R2, a
0492            267            
0492 DBE8       268            djnz R3, hex2bcd_loop1
0494 22         269            ret
0495            270   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
0495            271   DisplayBCD_LCD:
0495            272            ; 5th digit:
0495 EA         273       mov a, R2
0496 540F       274       anl a, #0FH
0498 4430       275       orl a, #'0' ; convert to ASCII
049A 1200CC     276            lcall ?WriteData
049D            277            ; 4th digit:
049D E9         278       mov a, R1
049E C4         279       swap a
049F 540F       280       anl a, #0FH
04A1 4430       281       orl a, #'0' ; convert to ASCII
04A3 1200CC     282            lcall ?WriteData
04A6            283            ; 3rd digit:
04A6 E9         284       mov a, R1
04A7 540F       285       anl a, #0FH
04A9 4430       286       orl a, #'0' ; convert to ASCII
04AB 1200CC     287            lcall ?WriteData
04AE            288            ; 2nd digit:
04AE E8         289       mov a, R0
04AF C4         290       swap a
04B0 540F       291       anl a, #0FH
04B2 4430       292       orl a, #'0' ; convert to ASCII
04B4 1200CC     293            lcall ?WriteData
04B7            294            ; 1st digit:
04B7 E8         295       mov a, R0
04B8 540F       296       anl a, #0FH
04BA 4430       297       orl a, #'0' ; convert to ASCII
04BC 1200CC     298            lcall ?WriteData
04BF            299       
04BF 22         300       ret
04C0            301   
04C0            302   random:
04C0 853830     303       mov x+0, seed+0
04C3 853931     304       mov x+1, seed+1
04C6 853A32     305       mov x+2, seed+2
04C9 853B33     306       mov x+3, seed+3
04CC 7534FD     307            mov y+0, #low (214013 % 0x10000) 
04CF 753543     307            mov y+1, #high(214013 % 0x10000) 
04D2 753603     307            mov y+2, #low (214013 / 0x10000) 
04D5 753700     307            mov y+3, #high(214013 / 0x10000) 
04D8 1202A2     308       lcall mul32
04DB 753443     309            mov y+0, #low (2451011 % 0x10000) 
04DE 753566     309            mov y+1, #high(2451011 % 0x10000) 
04E1 753625     309            mov y+2, #low (2451011 / 0x10000) 
04E4 753700     309            mov y+3, #high(2451011 / 0x10000) 
04E7 1201ED     310       lcall add32
04EA 853038     311       mov seed+0, x+0
04ED 853139     312       mov seed+1, x+1
04F0 85323A     313       mov seed+2, x+2
04F3 85333B     314       mov seed+3, x+3
04F6 22         315       ret
04F7            316   
04F7            317   wait_random:
04F7 C002       318            push AR2
04F9 AA38       318            mov R2, seed+0
04FB 120087     318            lcall ?Wait_Milli_Seconds
04FE D002       318            pop AR2
0500 C002       319            push AR2
0502 AA39       319            mov R2, seed+1
0504 120087     319            lcall ?Wait_Milli_Seconds
0507 D002       319            pop AR2
0509 C002       320            push AR2
050B AA3A       320            mov R2, seed+2
050D 120087     320            lcall ?Wait_Milli_Seconds
0510 D002       320            pop AR2
0512 C002       321            push AR2
0514 AA3B       321            mov R2, seed+3
0516 120087     321            lcall ?Wait_Milli_Seconds
0519 D002       321            pop AR2
051B 22         322       ret
051C            323   
051C            324   movtox:
051C            325            ; 5th digit:
051C EA         326       mov a, R2
051D 540F       327       anl a, #0FH
051F 4430       328       orl a, #'0' ; convert to ASCII
0521 754000     329       mov bcd+4, #0
0524 753F00     330       mov bcd+3, #0
0527 8A3E       331       mov bcd+2, R2
0529            332            ;lcall ?WriteData
0529            333            ; 4th digit:
0529 E9         334       mov a, R1
052A C4         335       swap a
052B 540F       336       anl a, #0FH
052D 4430       337       orl a, #'0' ; convert to ASCII
052F            338            ;lcall ?WriteData
052F            339            ; 3rd digit:
052F E9         340       mov a, R1
0530 540F       341       anl a, #0FH
0532 4430       342       orl a, #'0' ; convert to ASCII
0534 893D       343       mov bcd+1, R1
0536            344            ;lcall ?WriteData
0536            345            ; 2nd digit:
0536 E8         346       mov a, R0
0537 C4         347       swap a
0538 540F       348       anl a, #0FH
053A 4430       349       orl a, #'0' ; convert to ASCII
053C            350       
053C            351            ;lcall ?WriteData
053C            352            ; 1st digit:
053C E8         353       mov a, R0
053D 540F       354       anl a, #0FH
053F 4430       355       orl a, #'0' ; convert to ASCII
0541 883C       356       mov bcd+0, R0
0543            357            ;lcall ?WriteData
0543            358       
0543 22         359       ret
0544            360   ;---------------------------------;
0544            361   ; Hardware initialization         ;
0544            362   ;---------------------------------;
0544            363   
0544            364   ;---------------------------------;
0544            365   ; Main program loop               ;
0544            366   ;---------------------------------;
0544            367   MyProgram:
0544            368       ; Initialize the hardware:
0544 75817F     369       mov SP, #7FH
0547 120465     370       lcall InitTimer2
054A 1200D6     371       lcall LCD_4BIT
054D 12040C     372       lcall Timer0_Init
0550 C0E0       373            push acc
0552 7401       373            mov a, #1
0554 14         373            dec a
0555 12010D     373            lcall ?Set_Cursor_1 ; Select column and row
0558 D0E0       373            pop acc
055A C083       374            push dph
055C C082       374            push dpl
055E C0E0       374            push acc
0560 90001E     374            mov dptr, #Initial_Message
0563 120100     374            lcall ?Send_Constant_String
0566 D0E0       374            pop acc
0568 D082       374            pop dpl
056A D083       374            pop dph
056C C0E0       375            push acc
056E 7401       375            mov a, #1
0570 14         375            dec a
0571 12010B     375            lcall ?Set_Cursor_2 ; Select column and row
0574 D0E0       375            pop acc
0576 C083       376            push dph
0578 C082       376            push dpl
057A C0E0       376            push acc
057C 900031     376            mov dptr, #Initial_Message2
057F 120100     376            lcall ?Send_Constant_String
0582 D0E0       376            pop acc
0584 D082       376            pop dpl
0586 D083       376            pop dph
0588 D2AF       377       setb EA
058A D28C       378       setb TR0
058C D204       379       setb half_seconds_flag
058E 20C5FD     380       jb P4.5, $
0591 85CD38     381       mov seed+0, TH2
0594 753901     382       mov seed+1, #0x01
0597 753A87     383       mov seed+2, #0x87
059A 85CC3B     384       mov seed+3, TL2
059D 754400     385       mov p1points, #0x00
05A0 754500     386       mov p2points, #0x00
05A3            387       
05A3            388   forever:
05A3            389       ; Measure the frequency applied to pin T2
05A3            390       ; Measure the period applied to pin P2.0
05A3 C2CA       391       clr TR2 ; Stop counter 2
05A5 75CC00     392       mov TL2, #0
05A8 75CD00     393       mov TH2, #0
05AB 20A0FD     394       jb P2.0, $
05AE 30A0FD     395       jnb P2.0, $
05B1 D2CA       396       setb TR2 ; Start counter 0
05B3 20A0FD     397       jb P2.0, $
05B6 30A0FD     398       jnb P2.0, $
05B9 C2CA       399       clr TR2 ; Stop counter 2, TH2-TL2 has the period
05BB            400       ; save the period of P2.0 for later use
05BB            401            ; Convert the result to BCD and display on LCD
05BB C0E0       402            push acc
05BD 740C       402            mov a, #12
05BF 14         402            dec a
05C0 12010D     402            lcall ?Set_Cursor_1 ; Select column and row
05C3 D0E0       402            pop acc
05C5 120473     403            lcall hex2bcd1
05C8            404       ;lcall DisplayBCD_LCD
05C8            405       
05C8            406       ; Measure the period applied to pin P2.1
05C8 C2CA       407       clr TR2 ; Stop counter 2
05CA 75CC00     408       mov TL2, #0
05CD 75CD00     409       mov TH2, #0
05D0 20A1FD     410       jb P2.1, $
05D3 30A1FD     411       jnb P2.1, $
05D6 D2CA       412       setb TR2 ; Start counter 0
05D8 20A1FD     413       jb P2.1, $
05DB 30A1FD     414       jnb P2.1, $
05DE C2CA       415       clr TR2 ; Stop counter 2, TH2-TL2 has the period
05E0            416       ; save the period of P2.1 for later use
05E0            417            ; Convert the result to BCD and display on LCD
05E0 C0E0       418            push acc
05E2 740C       418            mov a, #12
05E4 14         418            dec a
05E5 12010B     418            lcall ?Set_Cursor_2 ; Select column and row
05E8 D0E0       418            pop acc
05EA 120473     419            lcall hex2bcd1
05ED            420      ; lcall DisplayBCD_LCD
05ED            421            ; Convert the result to BCD and display on LCD
05ED 02068B     422            ljmp start_game
05F0 0205A3     423       ljmp forever ;  Repeat! 
05F3            424   
05F3            425   forever1:
05F3 C0E0       426            push acc
05F5 7409       426            mov a, #9
05F7 14         426            dec a
05F8 12010D     426            lcall ?Set_Cursor_1 ; Select column and row
05FB D0E0       426            pop acc
05FD C000       427            push ar0
05FF A844       427            mov r0, p1points
0601 120112     427            lcall ?Display_BCD
0604 D000       427            pop ar0
0606 C0E0       428            push acc
0608 7409       428            mov a, #9
060A 14         428            dec a
060B 12010B     428            lcall ?Set_Cursor_2 ; Select column and row
060E D0E0       428            pop acc
0610 C000       429            push ar0
0612 A845       429            mov r0, p2points
0614 120112     429            lcall ?Display_BCD
0617 D000       429            pop ar0
0619            430       ; Measure the period applied to pin P2.0
0619 C2CA       431       clr TR2 ; Stop counter 2
061B 75CC00     432       mov TL2, #0
061E 75CD00     433       mov TH2, #0
0621 20A0FD     434       jb P2.0, $
0624 30A0FD     435       jnb P2.0, $
0627 D2CA       436       setb TR2 ; Start counter 0
0629 20A0FD     437       jb P2.0, $
062C 30A0FD     438       jnb P2.0, $
062F C2CA       439       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0631            440       ; save the period of P2.0 for later use
0631            441            ; Convert the result to BCD and display on LCD
0631 C0E0       442            push acc
0633 740C       442            mov a, #12
0635 14         442            dec a
0636 12010D     442            lcall ?Set_Cursor_1 ; Select column and row
0639 D0E0       442            pop acc
063B 120473     443            lcall hex2bcd1
063E            444       ;lcall DisplayBCD_LCD
063E 22         445       ret
063F            446   forever2:
063F C0E0       447            push acc
0641 7409       447            mov a, #9
0643 14         447            dec a
0644 12010D     447            lcall ?Set_Cursor_1 ; Select column and row
0647 D0E0       447            pop acc
0649 C000       448            push ar0
064B A844       448            mov r0, p1points
064D 120112     448            lcall ?Display_BCD
0650 D000       448            pop ar0
0652 C0E0       449            push acc
0654 7409       449            mov a, #9
0656 14         449            dec a
0657 12010B     449            lcall ?Set_Cursor_2 ; Select column and row
065A D0E0       449            pop acc
065C C000       450            push ar0
065E A845       450            mov r0, p2points
0660 120112     450            lcall ?Display_BCD
0663 D000       450            pop ar0
0665            451       ; Measure the period applied to pin P2.1
0665 C2CA       452       clr TR2 ; Stop counter 2
0667 75CC00     453       mov TL2, #0
066A 75CD00     454       mov TH2, #0
066D 20A1FD     455       jb P2.1, $
0670 30A1FD     456       jnb P2.1, $
0673 D2CA       457       setb TR2 ; Start counter 0
0675 20A1FD     458       jb P2.1, $
0678 30A1FD     459       jnb P2.1, $
067B C2CA       460       clr TR2 ; Stop counter 2, TH2-TL2 has the period
067D            461       ; save the period of P2.1 for later use
067D            462            ; Convert the result to BCD and display on LCD
067D C0E0       463            push acc
067F 740C       463            mov a, #12
0681 14         463            dec a
0682 12010B     463            lcall ?Set_Cursor_2 ; Select column and row
0685 D0E0       463            pop acc
0687 120473     464            lcall hex2bcd1
068A            465       ;lcall DisplayBCD_LCD
068A 22         466       ret
068B            467   start_game:
068B D201       468       setb p1_press
068D D202       469       setb p2_press 
068F C0E0       470            push acc
0691 7409       470            mov a, #9
0693 14         470            dec a
0694 12010D     470            lcall ?Set_Cursor_1 ; Select column and row
0697 D0E0       470            pop acc
0699 C000       471            push ar0
069B A844       471            mov r0, p1points
069D 120112     471            lcall ?Display_BCD
06A0 D000       471            pop ar0
06A2 C0E0       472            push acc
06A4 7409       472            mov a, #9
06A6 14         472            dec a
06A7 12010B     472            lcall ?Set_Cursor_2 ; Select column and row
06AA D0E0       472            pop acc
06AC C000       473            push ar0
06AE A845       473            mov r0, p2points
06B0 120112     473            lcall ?Display_BCD
06B3 D000       473            pop ar0  
06B5 1204C0     474       lcall random
06B8 1204F7     475       lcall wait_random
06BB E539       476       mov a, seed+1
06BD A2E3       477       mov c, acc.3
06BF            478       ;mov HLbit, c
06BF 0206C4     479       ljmp lose_tone
06C2 4006       480       jc win_tone
06C4            481   
06C4            482   lose_tone:
06C4 1203BE     483       lcall Timer1_Init
06C7 020769     484       ljmp start_game_nohit1
06CA            485   win_tone: 
06CA 1203DA     486       lcall Timer1_Init1
06CD 020700     487       ljmp start_game_hit1
06D0            488       
06D0            489   checkfreq1:
06D0 753425     490            mov y+0, #low (4645 % 0x10000) 
06D3 753512     490            mov y+1, #high(4645 % 0x10000) 
06D6 753600     490            mov y+2, #low (4645 / 0x10000) 
06D9 753700     490            mov y+3, #high(4645 / 0x10000) 
06DC 12028E     491       lcall x_gteq_y
06DF 100003     492       jbc mf, freq1_nopress
06E2 D201       493       setb p1_press
06E4 22         494       ret
06E5            495   
06E5            496   freq1_nopress:
06E5 C201       497       clr p1_press
06E7 22         498       ret
06E8            499   
06E8            500   checkfreq2:
06E8 75342A     501            mov y+0, #low (4650 % 0x10000) 
06EB 753512     501            mov y+1, #high(4650 % 0x10000) 
06EE 753600     501            mov y+2, #low (4650 / 0x10000) 
06F1 753700     501            mov y+3, #high(4650 / 0x10000) 
06F4 12028E     502       lcall x_gteq_y
06F7 100003     503       jbc mf, freq2_press
06FA D202       504       setb p2_press
06FC 22         505       ret
06FD            506   
06FD            507   freq2_press:
06FD C202       508       clr p2_press
06FF 22         509       ret
0700            510   
0700            511   start_game_hit1:
0700 1205F3     512       lcall forever1
0703 12051C     513       lcall movtox
0706 1201B1     514       lcall bcd2hex
0709 1206D0     515       lcall checkfreq1
070C 120128     516       lcall hex2bcd
070F 120495     517       lcall DisplayBCD_LCD
0712 10011E     518       jbc p1_press, start_game_hit2
0715 C28E       519       clr TR1
0717 E4         520       clr a 
0718 E544       521       mov a, p1points
071A 2401       522       add a, #0x01
071C F544       523       mov p1points, a
071E B4053E     524       cjne a, #0x05, start_jmp1
0721 E4         525       clr a
0722 D201       526       setb p1_press
0724 D202       527       setb p2_press
0726 020729     528       ljmp p1win_jmp
0729            529   
0729            530   p1win_jmp:
0729 D201       531       setb p1_press
072B D202       532       setb p2_press
072D 020806     533       ljmp p1win
0730            534   checkfreq1_jmp:
0730 0206D0     535       ljmp checkfreq1
0733            536   start_game_hit2:
0733 12063F     537       lcall forever2
0736 12051C     538       lcall movtox
0739 1201B1     539       lcall bcd2hex
073C 1206E8     540       lcall checkfreq2
073F 120128     541       lcall hex2bcd
0742 120495     542       lcall DisplayBCD_LCD
0745 1002B8     543       jbc p2_press, start_game_hit1
0748 C28E       544       clr TR1
074A E4         545       clr a 
074B E545       546       mov a, p2points
074D 2401       547       add a, #0x01
074F F545       548       mov p2points, a
0751 B4050B     549       cjne a, #0x05, start_jmp1
0754 D201       550       setb p1_press
0756 D202       551       setb p2_press
0758 E4         552       clr a
0759 020762     553       ljmp p2win_jmp
075C            554   start_game_hit1_jmp:
075C 020700     555            ljmp start_game_hit1
075F            556            
075F            557   start_jmp1:
075F 02068B     558       ljmp start_game
0762            559   
0762            560   p2win_jmp:
0762 D201       561       setb p1_press
0764 D202       562       setb p2_press
0766 02089B     563       ljmp p2win
0769            564   
0769            565   start_game_nohit1:
0769 1205F3     566       lcall forever1
076C 12051C     567       lcall movtox
076F 1201B1     568       lcall bcd2hex
0772 1206D0     569       lcall checkfreq1
0775 120128     570       lcall hex2bcd
0778 120495     571       lcall DisplayBCD_LCD
077B D28C       572       setb TR0
077D 100135     573       jbc p1_press, start_game_nohit2
0780 10040F     574       jbc half_seconds_flag, start_game_jmp
0783 C28E       575       clr TR1
0785 C28C       576       clr TR0
0787 C204       577       clr half_seconds_flag
0789 E4         578       clr a 
078A E544       579       mov a, p1points
078C B40008     580       cjne a, #0x00, start_jmpsub1
078F 02068B     581       ljmp start_game
0792            582   
0792            583   start_game_jmp:
0792 C28C       584       clr TR0
0794 02068B     585       ljmp start_game
0797            586   
0797            587   start_jmpsub1:
0797            588       
0797 F530       589       mov x, a
0799 753401     590            mov y+0, #low (1 % 0x10000) 
079C 753500     590            mov y+1, #high(1 % 0x10000) 
079F 753600     590            mov y+2, #low (1 / 0x10000) 
07A2 753700     590            mov y+3, #high(1 / 0x10000) 
07A5 12020E     591       lcall sub32
07A8 E530       592       mov a, x
07AA D4         593       da a
07AB F544       594       mov p1points, a
07AD E4         595       clr a
07AE D201       596       setb p1_press
07B0 D202       597       setb p2_press
07B2 02068B     598       ljmp start_game
07B5            599   
07B5            600   start_game_nohit2:
07B5 12063F     601       lcall forever2
07B8 12051C     602       lcall movtox
07BB 1201B1     603       lcall bcd2hex
07BE 1206E8     604       lcall checkfreq2
07C1 120128     605       lcall hex2bcd
07C4 120495     606       lcall DisplayBCD_LCD
07C7 D28C       607       setb TR0
07C9 10029D     608       jbc p2_press, start_game_nohit1
07CC 1004C3     609       jbc half_seconds_flag, start_game_jmp
07CF C28E       610       clr TR1
07D1 C28C       611       clr TR0
07D3 C204       612       clr half_seconds_flag
07D5 E4         613       clr a 
07D6 E545       614       mov a, p2points
07D8 B40003     615       cjne a, #0x00, start_jmpsub2
07DB 0207FF     616       ljmp start_jmp
07DE            617       
07DE            618   start_jmpsub2:
07DE F530       619       mov x, a
07E0 753401     620            mov y+0, #low (1 % 0x10000) 
07E3 753500     620            mov y+1, #high(1 % 0x10000) 
07E6 753600     620            mov y+2, #low (1 / 0x10000) 
07E9 753700     620            mov y+3, #high(1 / 0x10000) 
07EC 12020E     621       lcall sub32
07EF E530       622       mov a, x
07F1 D4         623       da a
07F2 F545       624       mov p2points, a
07F4 E4         625       clr a
07F5 C201       626       clr p1_press
07F7 C202       627       clr p2_press
07F9 0207FF     628       ljmp start_jmp
07FC            629       
07FC            630   start_game_nohit1_jmp:
07FC 020769     631            ljmp start_game_nohit1
07FF            632   
07FF            633   start_jmp:
07FF D201       634       setb p1_press
0801 D202       635       setb p2_press
0803 02068B     636       ljmp start_game
0806            637   p1win:
0806 D201       638       setb p1_press
0808 D202       639       setb p2_press
080A C0E0       640            push acc
080C 740B       640            mov a, #11
080E 14         640            dec a
080F 12010D     640            lcall ?Set_Cursor_1 ; Select column and row
0812 D0E0       640            pop acc
0814 C083       641            push dph
0816 C082       641            push dpl
0818 C0E0       641            push acc
081A 900044     641            mov dptr, #Winner1_message1
081D 120100     641            lcall ?Send_Constant_String
0820 D0E0       641            pop acc
0822 D082       641            pop dpl
0824 D083       641            pop dph
0826 C0E0       642            push acc
0828 740B       642            mov a, #11
082A 14         642            dec a
082B 12010B     642            lcall ?Set_Cursor_2 ; Select column and row
082E D0E0       642            pop acc
0830 C083       643            push dph
0832 C082       643            push dpl
0834 C0E0       643            push acc
0836 90004B     643            mov dptr, #Winner1_message2
0839 120100     643            lcall ?Send_Constant_String
083C D0E0       643            pop acc
083E D082       643            pop dpl
0840 D083       643            pop dph
0842 C002       644            push AR2
0844 7A05       644            mov R2, #5
0846 120087     644            lcall ?Wait_Milli_Seconds
0849 D002       644            pop AR2
084B            644   
084B C0E0       645            push acc
084D 7401       645            mov a, #1
084F 14         645            dec a
0850 12010D     645            lcall ?Set_Cursor_1 ; Select column and row
0853 D0E0       645            pop acc
0855 C083       646            push dph
0857 C082       646            push dpl
0859 C0E0       646            push acc
085B 900064     646            mov dptr, #Playagain
085E 120100     646            lcall ?Send_Constant_String
0861 D0E0       646            pop acc
0863 D082       646            pop dpl
0865 D083       646            pop dph
0867 C0E0       647            push acc
0869 7401       647            mov a, #1
086B 14         647            dec a
086C 12010B     647            lcall ?Set_Cursor_2 ; Select column and row
086F D0E0       647            pop acc
0871 C083       648            push dph
0873 C082       648            push dpl
0875 C0E0       648            push acc
0877 900071     648            mov dptr, #Clear_screen
087A 120100     648            lcall ?Send_Constant_String
087D D0E0       648            pop acc
087F D082       648            pop dpl
0881 D083       648            pop dph
0883 20C512     649       jb START_BUTTON, p1win_jmp2
0886 C002       650            push AR2
0888 7A05       650            mov R2, #5
088A 120087     650            lcall ?Wait_Milli_Seconds
088D D002       650            pop AR2
088F 20C506     651       jb START_BUTTON, p1win_jmp2
0892 30C5FD     652       jnb START_BUTTON, $
0895 020933     653       ljmp restart_jmp
0898            654   p1win_jmp2:
0898 020806     655       ljmp p1win
089B            656   p2win: 
089B D201       657       setb p1_press
089D D202       658       setb p2_press
089F C0E0       659            push acc
08A1 740B       659            mov a, #11
08A3 14         659            dec a
08A4 12010D     659            lcall ?Set_Cursor_1 ; Select column and row
08A7 D0E0       659            pop acc
08A9            659   
08A9 C083       660            push dph
08AB C082       660            push dpl
08AD C0E0       660            push acc
08AF 90004B     660            mov dptr, #Winner1_message2
08B2 120100     660            lcall ?Send_Constant_String
08B5 D0E0       660            pop acc
08B7 D082       660            pop dpl
08B9 D083       660            pop dph
08BB C0E0       661            push acc
08BD 740B       661            mov a, #11
08BF 14         661            dec a
08C0 12010B     661            lcall ?Set_Cursor_2 ; Select column and row
08C3 D0E0       661            pop acc
08C5 C083       662            push dph
08C7 C082       662            push dpl
08C9 C0E0       662            push acc
08CB 900044     662            mov dptr, #Winner1_message1
08CE 120100     662            lcall ?Send_Constant_String
08D1 D0E0       662            pop acc
08D3 D082       662            pop dpl
08D5 D083       662            pop dph
08D7 C002       663            push AR2
08D9 7A32       663            mov R2, #50
08DB 120087     663            lcall ?Wait_Milli_Seconds
08DE D002       663            pop AR2
08E0 C0E0       664            push acc
08E2 7401       664            mov a, #1
08E4 14         664            dec a
08E5 12010D     664            lcall ?Set_Cursor_1 ; Select column and row
08E8 D0E0       664            pop acc
08EA C083       665            push dph
08EC C082       665            push dpl
08EE C0E0       665            push acc
08F0 900064     665            mov dptr, #Playagain
08F3 120100     665            lcall ?Send_Constant_String
08F6 D0E0       665            pop acc
08F8 D082       665            pop dpl
08FA D083       665            pop dph
08FC C0E0       666            push acc
08FE 7401       666            mov a, #1
0900 14         666            dec a
0901 12010B     666            lcall ?Set_Cursor_2 ; Select column and row
0904 D0E0       666            pop acc
0906 C083       667            push dph
0908 C082       667            push dpl
090A C0E0       667            push acc
090C 900071     667            mov dptr, #Clear_screen
090F 120100     667            lcall ?Send_Constant_String
0912 D0E0       667            pop acc
0914 D082       667            pop dpl
0916 D083       667            pop dph
0918 20C515     668       jb START_BUTTON, p2win_jmp1
091B C002       669            push AR2
091D 7A32       669            mov R2, #50
091F 120087     669            lcall ?Wait_Milli_Seconds
0922 D002       669            pop AR2
0924 20C509     670       jb START_BUTTON, p2win_jmp1
0927 30C5FD     671       jnb START_BUTTON, $
092A 020933     672       ljmp restart_jmp
092D            673   
092D            674   p1win_jmp1:
092D 020806     675       ljmp p1win
0930            676   
0930            677   p2win_jmp1:
0930 02089B     678       ljmp p2win
0933            679   
0933            680   restart_jmp:
0933 020936     681       ljmp restart_game
0936            682   
0936            683   restart_game:
0936 754400     684       mov p1points, #0x00
0939 754500     685       mov p2points, #0x00
093C 02068B     686       ljmp start_game
093F            687   end
