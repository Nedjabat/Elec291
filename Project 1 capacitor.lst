                  2   $LIST
0000              4   
0000              5   
0000              6   START_BUTTON     equ P4.5
0000              7   P1_BUTTON                equ     P2.4
0000              8   P2_BUTTON            equ         P2.6
0000              9   
0000             10   CLK           EQU 22118400
0000             11   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             12   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             13   TIMER1_RATE   EQU 4200     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             14   TIMER1_RELOAD EQU ((65536-(CLK/TIMER1_RATE)))
0000             15   TIMER1_RATE1   EQU 4000  
0000             16   TIMER1_RELOAD1 EQU ((65536-(CLK/TIMER1_RATE1)))               ;2000Hz frequency lose frequency
0000             17   TIMER2_RATE   EQU 4200                 ;2100Hz frequency win frequency
0000             18   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             19   
0000             20   org 0000H
0000 0204EF      21      ljmp MyProgram
0003             22   
0003             23   
0003             24   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             25   org 0x001B
001B 0203DB      26            ljmp Timer1_ISR
001E             27   
001E             28   
0030             29   DSEG at 0x30
0030             30   x:   ds 4
0034             31   y:   ds 4
0038             32   seed: ds 4  
003C             33   bcd: ds 5
0041             34   p1points: ds 1
0042             35   p2points: ds 1
0043             36   freq1: ds 4
0047             37   freq2: ds 4
004B             38   counter: ds 4
004F             39   Period_A: ds 2
0051             40   Period_B: ds 2
0053             41   bcd1: ds 5
0058             42   bcd2: ds 5
005D             43   
0000             44   BSEG
0000             45   mf: dbit 1
0001             46   p1_press: dbit 1
0002             47   p2_press: dbit 1
0003             48   
001E             49   cseg
001E             50   ; These 'equ' must match the hardware wiring
001E             51   LCD_RS equ P3.2
001E             52   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
001E             53   LCD_E  equ P3.3
001E             54   LCD_D4 equ P3.4
001E             55   LCD_D5 equ P3.5
001E             56   LCD_D6 equ P3.6
001E             57   LCD_D7 equ P3.7
001E             58   SOUND_OUT equ P1.1
001E             59   
001E 506C6179    60   Initial_Message:  db 'Player1:          ', 0
     6572313A
     20202020
     20202020
     202000
0031 506C6179    61   Initial_Message2: db 'Player2:          ', 0
     6572323A
     20202020
     20202020
     202000
0044             62   
0044 57696E6E    63   Winner1_message1: db 'Winner!:D', 0
     6572213A
     4400
004E 4C6F7365    64   Winner1_message2: db 'Loser:P', 0
     723A5000
0056             65   
0056 4C6F7365    66   Winner2_message1: db 'Loser:P', 0
     723A5000
005E 57696E6E    67   Winner2_message2: db 'Winner!:D', 0
     6572213A
     4400
0068             68   
0068 506C6179    69   Playagain       : db 'Play again ?', 0
     20616761
     696E203F
     00
0075 20202020    70   Clear_screen    : db '          ', 0
     20202020
     202000
0080             71   
                570   $LIST
                 74   $LIST
03C2             76   
03C2             77   
03C2             78   Timer1_Init:
03C2 E589        79            mov a, TMOD
03C4 54F0        80            anl a, #0xf0 ; Clear the bits for timer 0
03C6 4401        81            orl a, #0x01 ; Configure timer 0 as 16-timer
03C8 F589        82            mov TMOD, a
03CA 758DEB      83            mov TH1, #high(TIMER1_RELOAD)
03CD 758B6E      84            mov TL1, #low(TIMER1_RELOAD)
03D0             85            ; Set autoreload value
03D0 75F5EB      86            mov RH1, #high(TIMER1_RELOAD)
03D3 75F36E      87            mov RL1, #low(TIMER1_RELOAD)
03D6             88            ; Enable the timer and interrupts
03D6 D2AB        89       setb ET1  ; Enable timer 0 interrupt
03D8 D28E        90       setb TR1  ; Start timer 0
03DA 22          91            ret
03DB             92   
03DB             93   ;---------------------------------;
03DB             94   ; ISR for timer 0.  Set to execute;
03DB             95   ; every 1/4096Hz to generate a    ;
03DB             96   ; 2048 Hz square wave at pin P1.1 ;
03DB             97   ;---------------------------------;
03DB             98   Timer1_ISR:
03DB             99            ;clr TF0  ; According to the data sheet this is done for us already.
03DB B291       100            cpl SOUND_OUT ; Connect speaker to P1.1!
03DD 32         101            reti
03DE            102   
03DE            103   Timer1_Init1:
03DE E589       104            mov a, TMOD
03E0 54F0       105            anl a, #0xf0 ; Clear the bits for timer 0
03E2 4401       106            orl a, #0x01 ; Configure timer 0 as 16-timer
03E4 F589       107            mov TMOD, a
03E6 758DEA     108            mov TH1, #high(TIMER1_RELOAD1)
03E9 758B67     109            mov TL1, #low(TIMER1_RELOAD1)
03EC            110            ; Set autoreload value
03EC 75F5EA     111            mov RH1, #high(TIMER1_RELOAD1)
03EF 75F367     112            mov RL1, #low(TIMER1_RELOAD1)
03F2            113            ; Enable the timer and interrupts
03F2 D2AB       114       setb ET1  ; Enable timer 0 interrupt
03F4 D28E       115       setb TR1  ; Start timer 0
03F6 22         116            ret
03F7            117   
03F7            118   ;---------------------------------;
03F7            119   ; ISR for timer 0.  Set to execute;
03F7            120   ; every 1/4096Hz to generate a    ;
03F7            121   ; 2048 Hz square wave at pin P1.1 ;
03F7            122   ;---------------------------------;
03F7            123   ; When using a 22.1184MHz crystal in fast mode
03F7            124   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
03F7            125   ; (tuned manually to get as close to 1s as possible)
03F7            126   Wait1s:
03F7 7AB0       127       mov R2, #176
03F9 79FA       128   X3: mov R1, #250
03FB 78A6       129   X2: mov R0, #166
03FD D8FE       130   X1: djnz R0, X1 ; 3 cycles->3*45.21123ns*166=22.51519us
03FF D9FA       131       djnz R1, X2 ; 22.51519us*250=5.629ms
0401 DAF6       132       djnz R2, X3 ; 5.629ms*176=1.0s (approximately)
0403 22         133       ret
0404            134   
0404            135   ;Initializes timer/counter 2 as a 16-bit counter
0404            136   InitTimer2:
0404 75C800     137            mov T2CON, #0b_0000_0000 ; Stop timer/counter.  Set as counter (clock input is pin T2).
0407            138            ; Set the reload value on overflow to zero (just in case is not zero)
0407 75CB00     139            mov RCAP2H, #0
040A 75CA00     140            mov RCAP2L, #0
040D D2A0       141       setb P2.0 ; Pin is used as input
040F D2A1       142       setb P2.1  ; P1.0 is connected to T2.  Make sure it can be used as input.
0411 22         143       ret
0412            144   
0412            145   InitTimer0:
0412 758811     146       mov TCON, #0b_0001_0001
0415            147            ;Stop timer/counter.  Set as counter (clock input is pin T2).
0415            148            ; Set the reload value on overflow to zero (just in case is not zero)
0415 75F400     149            mov RH0, #0
0418 75F200     150            mov RL0, #0
041B D280       151       setb P0.0 ; P1.0 is connected to T2.  Make sure it can be used as input.
041D 22         152       ret
041E            153   
041E            154   ;Converts the hex number in TH2-TL2 to BCD in R2-R1-R0
041E            155   
041E            156   hex2bcd1:
041E E4         157            clr a
041F 7800       158       mov R0, #0  ;Set BCD result to 00000000 
0421 7900       159       mov R1, #0
0423 7A00       160       mov R2, #0
0425 7B10       161       mov R3, #16 ;Loop counter.
0427            162   
0427            163   hex2bcd_loop1:
0427 E5CC       164       mov a, TL2 ;Shift TH0-TL0 left through carry
0429 33         165       rlc a
042A F5CC       166       mov TL2, a
042C            167       
042C E5CD       168       mov a, TH2
042E 33         169       rlc a
042F F5CD       170       mov TH2, a
0431            171         
0431            172            ; Perform bcd + bcd + carry
0431            173            ; using BCD numbers
0431 E8         174            mov a, R0
0432 38         175            addc a, R0
0433 D4         176            da a
0434 F8         177            mov R0, a
0435            178            
0435 E9         179            mov a, R1
0436 39         180            addc a, R1
0437 D4         181            da a
0438 F9         182            mov R1, a
0439            183            
0439 EA         184            mov a, R2
043A 3A         185            addc a, R2
043B D4         186            da a
043C FA         187            mov R2, a
043D            188            
043D DBE8       189            djnz R3, hex2bcd_loop1
043F 22         190            ret
0440            191   ; Dumps the 5-digit packed BCD number in R2-R1-R0 into the LCD
0440            192   DisplayBCD_LCD:
0440            193            ; 5th digit:
0440 EA         194       mov a, R2
0441 540F       195       anl a, #0FH
0443 4430       196       orl a, #'0' ; convert to ASCII
0445 1200D0     197            lcall ?WriteData
0448            198            ; 4th digit:
0448 E9         199       mov a, R1
0449 C4         200       swap a
044A 540F       201       anl a, #0FH
044C 4430       202       orl a, #'0' ; convert to ASCII
044E 1200D0     203            lcall ?WriteData
0451            204            ; 3rd digit:
0451 E9         205       mov a, R1
0452 540F       206       anl a, #0FH
0454 4430       207       orl a, #'0' ; convert to ASCII
0456 1200D0     208            lcall ?WriteData
0459            209            ; 2nd digit:
0459 E8         210       mov a, R0
045A C4         211       swap a
045B 540F       212       anl a, #0FH
045D 4430       213       orl a, #'0' ; convert to ASCII
045F 1200D0     214            lcall ?WriteData
0462            215            ; 1st digit:
0462 E8         216       mov a, R0
0463 540F       217       anl a, #0FH
0465 4430       218       orl a, #'0' ; convert to ASCII
0467 1200D0     219            lcall ?WriteData
046A            220       
046A 22         221       ret
046B            222   
046B            223   random:
046B 853830     224       mov x+0, seed+0
046E 853931     225       mov x+1, seed+1
0471 853A32     226       mov x+2, seed+2
0474 853B33     227       mov x+3, seed+3
0477 7534FD     228            mov y+0, #low (214013 % 0x10000) 
047A 753543     228            mov y+1, #high(214013 % 0x10000) 
047D 753603     228            mov y+2, #low (214013 / 0x10000) 
0480 753700     228            mov y+3, #high(214013 / 0x10000) 
0483 1202A6     229       lcall mul32
0486 753443     230            mov y+0, #low (2451011 % 0x10000) 
0489 753566     230            mov y+1, #high(2451011 % 0x10000) 
048C 753625     230            mov y+2, #low (2451011 / 0x10000) 
048F 753700     230            mov y+3, #high(2451011 / 0x10000) 
0492 1201F1     231       lcall add32
0495 853038     232       mov seed+0, x+0
0498 853139     233       mov seed+1, x+1
049B 85323A     234       mov seed+2, x+2
049E 85333B     235       mov seed+3, x+3
04A1 22         236       ret
04A2            237   
04A2            238   wait_random:
04A2 C002       239            push AR2
04A4 AA38       239            mov R2, seed+0
04A6 12008B     239            lcall ?Wait_Milli_Seconds
04A9 D002       239            pop AR2
04AB C002       240            push AR2
04AD AA39       240            mov R2, seed+1
04AF 12008B     240            lcall ?Wait_Milli_Seconds
04B2 D002       240            pop AR2
04B4 C002       241            push AR2
04B6 AA3A       241            mov R2, seed+2
04B8 12008B     241            lcall ?Wait_Milli_Seconds
04BB D002       241            pop AR2
04BD C002       242            push AR2
04BF AA3B       242            mov R2, seed+3
04C1 12008B     242            lcall ?Wait_Milli_Seconds
04C4 D002       242            pop AR2
04C6 22         243       ret
04C7            244   
04C7            245   movtox:
04C7            246            ; 5th digit:
04C7 EA         247       mov a, R2
04C8 540F       248       anl a, #0FH
04CA 4430       249       orl a, #'0' ; convert to ASCII
04CC 754000     250       mov bcd+4, #0
04CF 753F00     251       mov bcd+3, #0
04D2 8A3E       252       mov bcd+2, R2
04D4            253            ;lcall ?WriteData
04D4            254            ; 4th digit:
04D4 E9         255       mov a, R1
04D5 C4         256       swap a
04D6 540F       257       anl a, #0FH
04D8 4430       258       orl a, #'0' ; convert to ASCII
04DA            259            ;lcall ?WriteData
04DA            260            ; 3rd digit:
04DA E9         261       mov a, R1
04DB 540F       262       anl a, #0FH
04DD 4430       263       orl a, #'0' ; convert to ASCII
04DF 893D       264       mov bcd+1, R1
04E1            265            ;lcall ?WriteData
04E1            266            ; 2nd digit:
04E1 E8         267       mov a, R0
04E2 C4         268       swap a
04E3 540F       269       anl a, #0FH
04E5 4430       270       orl a, #'0' ; convert to ASCII
04E7            271       
04E7            272            ;lcall ?WriteData
04E7            273            ; 1st digit:
04E7 E8         274       mov a, R0
04E8 540F       275       anl a, #0FH
04EA 4430       276       orl a, #'0' ; convert to ASCII
04EC 883C       277       mov bcd+0, R0
04EE            278            ;lcall ?WriteData
04EE            279       
04EE 22         280       ret
04EF            281   ;---------------------------------;
04EF            282   ; Hardware initialization         ;
04EF            283   ;---------------------------------;
04EF            284   
04EF            285   ;---------------------------------;
04EF            286   ; Main program loop               ;
04EF            287   ;---------------------------------;
04EF            288   MyProgram:
04EF            289       ; Initialize the hardware:
04EF 75817F     290       mov SP, #7FH
04F2 120404     291       lcall InitTimer2
04F5 1200DA     292       lcall LCD_4BIT
04F8 120412     293       lcall InitTimer0
04FB C0E0       294            push acc
04FD 7401       294            mov a, #1
04FF 14         294            dec a
0500 120111     294            lcall ?Set_Cursor_1 ; Select column and row
0503 D0E0       294            pop acc
0505 C083       295            push dph
0507 C082       295            push dpl
0509 C0E0       295            push acc
050B 90001E     295            mov dptr, #Initial_Message
050E 120104     295            lcall ?Send_Constant_String
0511 D0E0       295            pop acc
0513 D082       295            pop dpl
0515 D083       295            pop dph
0517 C0E0       296            push acc
0519 7401       296            mov a, #1
051B 14         296            dec a
051C 12010F     296            lcall ?Set_Cursor_2 ; Select column and row
051F D0E0       296            pop acc
0521 C083       297            push dph
0523 C082       297            push dpl
0525 C0E0       297            push acc
0527 900031     297            mov dptr, #Initial_Message2
052A 120104     297            lcall ?Send_Constant_String
052D D0E0       297            pop acc
052F D082       297            pop dpl
0531 D083       297            pop dph
0533 D2AF       298       setb EA
0535 20C5FD     299       jb P4.5, $
0538 85CD38     300       mov seed+0, TH2
053B 753901     301       mov seed+1, #0x01
053E 753A87     302       mov seed+2, #0x87
0541 85CC3B     303       mov seed+3, TL2
0544 754100     304       mov p1points, #0x00
0547 754200     305       mov p2points, #0x00
054A            306       
054A            307   forever:
054A            308       ; Measure the frequency applied to pin T2
054A            309       ; Measure the period applied to pin P2.0
054A C2CA       310       clr TR2 ; Stop counter 2
054C 75CC00     311       mov TL2, #0
054F 75CD00     312       mov TH2, #0
0552 20A0FD     313       jb P2.0, $
0555 30A0FD     314       jnb P2.0, $
0558 D2CA       315       setb TR2 ; Start counter 0
055A 20A0FD     316       jb P2.0, $
055D 30A0FD     317       jnb P2.0, $
0560 C2CA       318       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0562            319       ; save the period of P2.0 for later use
0562            320            ; Convert the result to BCD and display on LCD
0562 C0E0       321            push acc
0564 740C       321            mov a, #12
0566 14         321            dec a
0567 120111     321            lcall ?Set_Cursor_1 ; Select column and row
056A D0E0       321            pop acc
056C 12041E     322            lcall hex2bcd1
056F            323       ;lcall DisplayBCD_LCD
056F            324       
056F            325       ; Measure the period applied to pin P2.1
056F C2CA       326       clr TR2 ; Stop counter 2
0571 75CC00     327       mov TL2, #0
0574 75CD00     328       mov TH2, #0
0577 20A1FD     329       jb P2.1, $
057A 30A1FD     330       jnb P2.1, $
057D D2CA       331       setb TR2 ; Start counter 0
057F 20A1FD     332       jb P2.1, $
0582 30A1FD     333       jnb P2.1, $
0585 C2CA       334       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0587            335       ; save the period of P2.1 for later use
0587            336            ; Convert the result to BCD and display on LCD
0587 C0E0       337            push acc
0589 740C       337            mov a, #12
058B 14         337            dec a
058C 12010F     337            lcall ?Set_Cursor_2 ; Select column and row
058F D0E0       337            pop acc
0591 12041E     338            lcall hex2bcd1
0594            339      ; lcall DisplayBCD_LCD
0594            340            ; Convert the result to BCD and display on LCD
0594 020632     341            ljmp start_game
0597 02054A     342       ljmp forever ;  Repeat! 
059A            343   
059A            344   forever1:
059A C0E0       345            push acc
059C 7409       345            mov a, #9
059E 14         345            dec a
059F 120111     345            lcall ?Set_Cursor_1 ; Select column and row
05A2 D0E0       345            pop acc
05A4 C000       346            push ar0
05A6 A841       346            mov r0, p1points
05A8 120116     346            lcall ?Display_BCD
05AB D000       346            pop ar0
05AD C0E0       347            push acc
05AF 7409       347            mov a, #9
05B1 14         347            dec a
05B2 12010F     347            lcall ?Set_Cursor_2 ; Select column and row
05B5 D0E0       347            pop acc
05B7 C000       348            push ar0
05B9 A842       348            mov r0, p2points
05BB 120116     348            lcall ?Display_BCD
05BE D000       348            pop ar0
05C0            349       ; Measure the period applied to pin P2.0
05C0 C2CA       350       clr TR2 ; Stop counter 2
05C2 75CC00     351       mov TL2, #0
05C5 75CD00     352       mov TH2, #0
05C8 20A0FD     353       jb P2.0, $
05CB 30A0FD     354       jnb P2.0, $
05CE D2CA       355       setb TR2 ; Start counter 0
05D0 20A0FD     356       jb P2.0, $
05D3 30A0FD     357       jnb P2.0, $
05D6 C2CA       358       clr TR2 ; Stop counter 2, TH2-TL2 has the period
05D8            359       ; save the period of P2.0 for later use
05D8            360            ; Convert the result to BCD and display on LCD
05D8 C0E0       361            push acc
05DA 740C       361            mov a, #12
05DC 14         361            dec a
05DD 120111     361            lcall ?Set_Cursor_1 ; Select column and row
05E0 D0E0       361            pop acc
05E2 12041E     362            lcall hex2bcd1
05E5            363       ;lcall DisplayBCD_LCD
05E5 22         364       ret
05E6            365   forever2:
05E6 C0E0       366            push acc
05E8 7409       366            mov a, #9
05EA 14         366            dec a
05EB 120111     366            lcall ?Set_Cursor_1 ; Select column and row
05EE D0E0       366            pop acc
05F0 C000       367            push ar0
05F2 A841       367            mov r0, p1points
05F4 120116     367            lcall ?Display_BCD
05F7 D000       367            pop ar0
05F9 C0E0       368            push acc
05FB 7409       368            mov a, #9
05FD 14         368            dec a
05FE 12010F     368            lcall ?Set_Cursor_2 ; Select column and row
0601 D0E0       368            pop acc
0603 C000       369            push ar0
0605 A842       369            mov r0, p2points
0607 120116     369            lcall ?Display_BCD
060A D000       369            pop ar0
060C            370       ; Measure the period applied to pin P2.1
060C C2CA       371       clr TR2 ; Stop counter 2
060E 75CC00     372       mov TL2, #0
0611 75CD00     373       mov TH2, #0
0614 20A1FD     374       jb P2.1, $
0617 30A1FD     375       jnb P2.1, $
061A D2CA       376       setb TR2 ; Start counter 0
061C 20A1FD     377       jb P2.1, $
061F 30A1FD     378       jnb P2.1, $
0622 C2CA       379       clr TR2 ; Stop counter 2, TH2-TL2 has the period
0624            380       ; save the period of P2.1 for later use
0624            381            ; Convert the result to BCD and display on LCD
0624 C0E0       382            push acc
0626 740C       382            mov a, #12
0628 14         382            dec a
0629 12010F     382            lcall ?Set_Cursor_2 ; Select column and row
062C D0E0       382            pop acc
062E 12041E     383            lcall hex2bcd1
0631            384       ;lcall DisplayBCD_LCD
0631 22         385       ret
0632            386   start_game:
0632 D201       387       setb p1_press
0634 D202       388       setb p2_press 
0636 C0E0       389            push acc
0638 7409       389            mov a, #9
063A 14         389            dec a
063B 120111     389            lcall ?Set_Cursor_1 ; Select column and row
063E D0E0       389            pop acc
0640 C000       390            push ar0
0642 A841       390            mov r0, p1points
0644 120116     390            lcall ?Display_BCD
0647 D000       390            pop ar0
0649 C0E0       391            push acc
064B 7409       391            mov a, #9
064D 14         391            dec a
064E 12010F     391            lcall ?Set_Cursor_2 ; Select column and row
0651 D0E0       391            pop acc
0653 C000       392            push ar0
0655 A842       392            mov r0, p2points
0657 120116     392            lcall ?Display_BCD
065A D000       392            pop ar0  
065C 12046B     393       lcall random
065F 1204A2     394       lcall wait_random
0662 E539       395       mov a, seed+1
0664 A2E3       396       mov c, acc.3
0666            397       ;mov HLbit, c
0666            398       ;jc lose_tone
0666 02067E     399       ljmp win_tone
0669            400   
0669            401   lose_tone:
0669 1203C2     402       lcall Timer1_Init
066C 753000     403            mov x+0, #low (0 % 0x10000) 
066F 753100     403            mov x+1, #high(0 % 0x10000) 
0672 753200     403            mov x+2, #low (0 / 0x10000) 
0675 753300     403            mov x+3, #high(0 / 0x10000) 
0678 85304B     404       mov counter, x
067B 02071D     405       ljmp start_game_nohit1
067E            406   win_tone: 
067E 1203DE     407       lcall Timer1_Init1
0681 0206B4     408       ljmp start_game_hit1
0684            409       
0684            410   checkfreq1:
0684 753425     411            mov y+0, #low (4645 % 0x10000) 
0687 753512     411            mov y+1, #high(4645 % 0x10000) 
068A 753600     411            mov y+2, #low (4645 / 0x10000) 
068D 753700     411            mov y+3, #high(4645 / 0x10000) 
0690 120292     412       lcall x_gteq_y
0693 100003     413       jbc mf, freq1_nopress
0696 D201       414       setb p1_press
0698 22         415       ret
0699            416   
0699            417   freq1_nopress:
0699 C201       418       clr p1_press
069B 22         419       ret
069C            420   
069C            421   checkfreq2:
069C 75342F     422            mov y+0, #low (4655 % 0x10000) 
069F 753512     422            mov y+1, #high(4655 % 0x10000) 
06A2 753600     422            mov y+2, #low (4655 / 0x10000) 
06A5 753700     422            mov y+3, #high(4655 / 0x10000) 
06A8 120292     423       lcall x_gteq_y
06AB 100003     424       jbc mf, freq2_nopress
06AE D202       425       setb p2_press
06B0 22         426       ret
06B1            427   
06B1            428   freq2_nopress:
06B1 C202       429       clr p2_press
06B3 22         430       ret
06B4            431   
06B4            432   start_game_hit1:
06B4 12059A     433       lcall forever1
06B7 1204C7     434       lcall movtox
06BA 1201B5     435       lcall bcd2hex
06BD 120684     436       lcall checkfreq1
06C0 12012C     437       lcall hex2bcd
06C3 120440     438       lcall DisplayBCD_LCD
06C6 10011E     439       jbc p1_press, start_game_hit2
06C9 C28E       440       clr TR1
06CB E4         441       clr a 
06CC E541       442       mov a, p1points
06CE 2401       443       add a, #0x01
06D0 F541       444       mov p1points, a
06D2 B4053E     445       cjne a, #0x05, start_jmp1
06D5 E4         446       clr a
06D6 D201       447       setb p1_press
06D8 D202       448       setb p2_press
06DA 0206DD     449       ljmp p1win_jmp
06DD            450   
06DD            451   p1win_jmp:
06DD D201       452       setb p1_press
06DF D202       453       setb p2_press
06E1 020817     454       ljmp p1win
06E4            455   checkfreq1_jmp:
06E4 020684     456       ljmp checkfreq1
06E7            457   start_game_hit2:
06E7 1205E6     458       lcall forever2
06EA 1204C7     459       lcall movtox
06ED 1201B5     460       lcall bcd2hex
06F0 12069C     461       lcall checkfreq2
06F3 12012C     462       lcall hex2bcd
06F6 120440     463       lcall DisplayBCD_LCD
06F9 1002B8     464       jbc p2_press, start_game_hit1
06FC C28E       465       clr TR1
06FE E4         466       clr a 
06FF E542       467       mov a, p2points
0701 2401       468       add a, #0x01
0703 F542       469       mov p2points, a
0705 B4050B     470       cjne a, #0x05, start_jmp1
0708 D201       471       setb p1_press
070A D202       472       setb p2_press
070C E4         473       clr a
070D 020716     474       ljmp p2win_jmp
0710            475   start_game_hit1_jmp:
0710 0206B4     476            ljmp start_game_hit1
0713            477            
0713            478   start_jmp1:
0713 020632     479       ljmp start_game
0716            480   
0716            481   p2win_jmp:
0716 D201       482       setb p1_press
0718 D202       483       setb p2_press
071A 0208AC     484       ljmp p2win
071D            485   
071D            486   start_game_nohit1:
071D 020684     487       ljmp checkfreq1
0720 C0E0       488            push acc
0722 740F       488            mov a, #15
0724 14         488            dec a
0725 12010F     488            lcall ?Set_Cursor_2 ; Select column and row
0728 D0E0       488            pop acc
072A C000       489            push ar0
072C A84B       489            mov r0, counter
072E 120116     489            lcall ?Display_BCD
0731 D000       489            pop ar0
0733 854B34     490       mov y, counter
0736 753001     491            mov x+0, #low (1 % 0x10000) 
0739 753100     491            mov x+1, #high(1 % 0x10000) 
073C 753200     491            mov x+2, #low (1 / 0x10000) 
073F 753300     491            mov x+3, #high(1 / 0x10000) 
0742 1201F1     492       lcall add32
0745 7534E8     493            mov y+0, #low (1000 % 0x10000) 
0748 753503     493            mov y+1, #high(1000 % 0x10000) 
074B 753600     493            mov y+2, #low (1000 / 0x10000) 
074E 753700     493            mov y+3, #high(1000 / 0x10000) 
0751 12026C     494       lcall x_eq_y
0754 200020     495       jb mf, start_game_jmp
0757 85304B     496       mov counter, x ; counter+
075A 200138     497       jb p1_press, start_game_nohit2
075D C002       498            push AR2
075F 7A32       498            mov R2, #50
0761 12008B     498            lcall ?Wait_Milli_Seconds
0764 D002       498            pop AR2
0766 20012C     499       jb p1_press, start_game_nohit2
0769 3001FD     500       jnb p1_press, $
076C C28E       501       clr TR1
076E E4         502       clr a 
076F E541       503       mov a, p1points
0771 B40006     504       cjne a, #0x00, start_jmpsub1
0774 020632     505       ljmp start_game
0777            506   
0777            507   start_game_jmp:
0777 020632     508       ljmp start_game
077A            509   
077A            510   start_jmpsub1:
077A F530       511       mov x, a
077C 753401     512            mov y+0, #low (1 % 0x10000) 
077F 753500     512            mov y+1, #high(1 % 0x10000) 
0782 753600     512            mov y+2, #low (1 / 0x10000) 
0785 753700     512            mov y+3, #high(1 / 0x10000) 
0788 120212     513       lcall sub32
078B E530       514       mov a, x
078D D4         515       da a
078E F541       516       mov p1points, a
0790 E4         517       clr a
0791 D201       518       setb p1_press
0793 D202       519       setb p2_press
0795            520   
0795            521   
0795            522   start_game_nohit2:
0795 02069C     523       ljmp checkfreq2
0798 C0E0       524            push acc
079A 740F       524            mov a, #15
079C 14         524            dec a
079D 12010F     524            lcall ?Set_Cursor_2 ; Select column and row
07A0 D0E0       524            pop acc
07A2 C000       525            push ar0
07A4 A84B       525            mov r0, counter
07A6 120116     525            lcall ?Display_BCD
07A9 D000       525            pop ar0
07AB            526       
07AB 854B34     527       mov y, counter
07AE 753001     528            mov x+0, #low (1 % 0x10000) 
07B1 753100     528            mov x+1, #high(1 % 0x10000) 
07B4 753200     528            mov x+2, #low (1 / 0x10000) 
07B7 753300     528            mov x+3, #high(1 / 0x10000) 
07BA 1201F1     529       lcall add32
07BD 7534E8     530            mov y+0, #low (1000 % 0x10000) 
07C0 753503     530            mov y+1, #high(1000 % 0x10000) 
07C3 753600     530            mov y+2, #low (1000 / 0x10000) 
07C6 753700     530            mov y+3, #high(1000 / 0x10000) 
07C9 12026C     531       lcall x_eq_y
07CC 2000A8     532       jb mf, start_game_jmp
07CF 85304B     533       mov counter, X ; counter+
07D2            534   
07D2 200238     535       jb p2_press, start_game_nohit1_jmp
07D5 C002       536            push AR2
07D7 7A32       536            mov R2, #50
07D9 12008B     536            lcall ?Wait_Milli_Seconds
07DC D002       536            pop AR2
07DE 20022C     537       jb p2_press, start_game_nohit1_jmp
07E1 3002FD     538       jnb p2_press, $
07E4 C28E       539       clr TR1
07E6 E4         540       clr a 
07E7 E542       541       mov a, p2points
07E9 B40003     542       cjne a, #0x00, start_jmpsub2
07EC 020810     543       ljmp start_jmp
07EF            544       
07EF            545   
07EF            546   start_jmpsub2:
07EF F530       547       mov x, a
07F1 753401     548            mov y+0, #low (1 % 0x10000) 
07F4 753500     548            mov y+1, #high(1 % 0x10000) 
07F7 753600     548            mov y+2, #low (1 / 0x10000) 
07FA 753700     548            mov y+3, #high(1 / 0x10000) 
07FD 120212     549       lcall sub32
0800 E530       550       mov a, x
0802 D4         551       da a
0803 F542       552       mov p2points, a
0805 E4         553       clr a
0806 C201       554       clr p1_press
0808 C202       555       clr p2_press
080A 020810     556       ljmp start_jmp
080D            557       
080D            558   start_game_nohit1_jmp:
080D 02071D     559            ljmp start_game_nohit1
0810            560   
0810            561   start_jmp:
0810 D201       562       setb p1_press
0812 D202       563       setb p2_press
0814 020632     564       ljmp start_game
0817            565   p1win:
0817 D201       566       setb p1_press
0819 D202       567       setb p2_press
081B C0E0       568            push acc
081D 7409       568            mov a, #9
081F 14         568            dec a
0820 120111     568            lcall ?Set_Cursor_1 ; Select column and row
0823 D0E0       568            pop acc
0825 C083       569            push dph
0827 C082       569            push dpl
0829 C0E0       569            push acc
082B 900044     569            mov dptr, #Winner1_message1
082E 120104     569            lcall ?Send_Constant_String
0831 D0E0       569            pop acc
0833 D082       569            pop dpl
0835 D083       569            pop dph
0837 C0E0       570            push acc
0839 7409       570            mov a, #9
083B 14         570            dec a
083C 12010F     570            lcall ?Set_Cursor_2 ; Select column and row
083F D0E0       570            pop acc
0841 C083       571            push dph
0843 C082       571            push dpl
0845 C0E0       571            push acc
0847 90004E     571            mov dptr, #Winner1_message2
084A 120104     571            lcall ?Send_Constant_String
084D D0E0       571            pop acc
084F D082       571            pop dpl
0851 D083       571            pop dph
0853 C002       572            push AR2
0855 7A05       572            mov R2, #5
0857 12008B     572            lcall ?Wait_Milli_Seconds
085A D002       572            pop AR2
085C            572   
085C C0E0       573            push acc
085E 7401       573            mov a, #1
0860 14         573            dec a
0861 120111     573            lcall ?Set_Cursor_1 ; Select column and row
0864 D0E0       573            pop acc
0866 C083       574            push dph
0868 C082       574            push dpl
086A C0E0       574            push acc
086C 900068     574            mov dptr, #Playagain
086F 120104     574            lcall ?Send_Constant_String
0872 D0E0       574            pop acc
0874 D082       574            pop dpl
0876 D083       574            pop dph
0878 C0E0       575            push acc
087A 7401       575            mov a, #1
087C 14         575            dec a
087D 12010F     575            lcall ?Set_Cursor_2 ; Select column and row
0880 D0E0       575            pop acc
0882 C083       576            push dph
0884 C082       576            push dpl
0886 C0E0       576            push acc
0888 900075     576            mov dptr, #Clear_screen
088B 120104     576            lcall ?Send_Constant_String
088E D0E0       576            pop acc
0890 D082       576            pop dpl
0892 D083       576            pop dph
0894 20C512     577       jb START_BUTTON, p1win_jmp2
0897 C002       578            push AR2
0899 7A05       578            mov R2, #5
089B 12008B     578            lcall ?Wait_Milli_Seconds
089E D002       578            pop AR2
08A0 20C506     579       jb START_BUTTON, p1win_jmp2
08A3 30C5FD     580       jnb START_BUTTON, $
08A6 020944     581       ljmp restart_jmp
08A9            582   p1win_jmp2:
08A9 020817     583       ljmp p1win
08AC            584   p2win: 
08AC D201       585       setb p1_press
08AE D202       586       setb p2_press
08B0 C0E0       587            push acc
08B2 7409       587            mov a, #9
08B4 14         587            dec a
08B5 120111     587            lcall ?Set_Cursor_1 ; Select column and row
08B8 D0E0       587            pop acc
08BA C083       588            push dph
08BC C082       588            push dpl
08BE C0E0       588            push acc
08C0 900056     588            mov dptr, #Winner2_message1
08C3 120104     588            lcall ?Send_Constant_String
08C6 D0E0       588            pop acc
08C8 D082       588            pop dpl
08CA D083       588            pop dph
08CC C0E0       589            push acc
08CE 7409       589            mov a, #9
08D0 14         589            dec a
08D1 12010F     589            lcall ?Set_Cursor_2 ; Select column and row
08D4 D0E0       589            pop acc
08D6 C083       590            push dph
08D8 C082       590            push dpl
08DA C0E0       590            push acc
08DC 90005E     590            mov dptr, #Winner2_message2
08DF 120104     590            lcall ?Send_Constant_String
08E2 D0E0       590            pop acc
08E4 D082       590            pop dpl
08E6 D083       590            pop dph
08E8 C002       591            push AR2
08EA 7A32       591            mov R2, #50
08EC 12008B     591            lcall ?Wait_Milli_Seconds
08EF D002       591            pop AR2
08F1 C0E0       592            push acc
08F3 7401       592            mov a, #1
08F5 14         592            dec a
08F6 120111     592            lcall ?Set_Cursor_1 ; Select column and row
08F9 D0E0       592            pop acc
08FB C083       593            push dph
08FD C082       593            push dpl
08FF C0E0       593            push acc
0901 900068     593            mov dptr, #Playagain
0904 120104     593            lcall ?Send_Constant_String
0907 D0E0       593            pop acc
0909 D082       593            pop dpl
090B D083       593            pop dph
090D C0E0       594            push acc
090F 7401       594            mov a, #1
0911 14         594            dec a
0912 12010F     594            lcall ?Set_Cursor_2 ; Select column and row
0915 D0E0       594            pop acc
0917 C083       595            push dph
0919 C082       595            push dpl
091B C0E0       595            push acc
091D 900075     595            mov dptr, #Clear_screen
0920 120104     595            lcall ?Send_Constant_String
0923 D0E0       595            pop acc
0925 D082       595            pop dpl
0927 D083       595            pop dph
0929 20C515     596       jb START_BUTTON, p2win_jmp1
092C C002       597            push AR2
092E 7A32       597            mov R2, #50
0930 12008B     597            lcall ?Wait_Milli_Seconds
0933 D002       597            pop AR2
0935 20C509     598       jb START_BUTTON, p2win_jmp1
0938 30C5FD     599       jnb START_BUTTON, $
093B 020944     600       ljmp restart_jmp
093E            601   
093E            602   p1win_jmp1:
093E 020817     603       ljmp p1win
0941            604   
0941            605   p2win_jmp1:
0941 0208AC     606       ljmp p2win
0944            607   
0944            608   restart_jmp:
0944 020947     609       ljmp restart_game
0947            610   
0947            611   restart_game:
0947 754100     612       mov p1points, #0x00
094A 754200     613       mov p2points, #0x00
094D 020632     614       ljmp start_game
0950            615   end
